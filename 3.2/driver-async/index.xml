<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Driver-Asyncs on MongoDB Java Driver</title>
    <link>/mongo-java-driver/3.2/driver-async/</link>
    <description>Recent content in Driver-Asyncs on MongoDB Java Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 May 2015 08:01:00 +0000</lastBuildDate>
    <atom:link href="/mongo-java-driver/3.2/driver-async/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Observables</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/observables/</link>
      <pubDate>Thu, 14 May 2015 08:01:00 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/observables/</guid>
      <description>

&lt;h2 id=&#34;observables&#34;&gt;Observables&lt;/h2&gt;

&lt;p&gt;The MongoDB Async Driver is fully callback based and makes extensive use of &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/SingleResultCallback.html
&#34;&gt;&lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; to achieve this. The &lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;&lt;/code&gt; interface requires the implementation of a single method &lt;code&gt;onResult(T result, Throwable t)&lt;/code&gt; which is called once the operation has completed or errored. The &lt;code&gt;result&lt;/code&gt; parameter contains the result of the operation if successful. If the operation failed for any reason then the &lt;code&gt;t&lt;/code&gt; contains the &lt;code&gt;Throwable&lt;/code&gt; reason for the failure. This pattern allows the users application logic to be deferred until the underlying network IO to MongoDB has been completed.&lt;/p&gt;

&lt;p&gt;The callback pattern is extremely flexible but can quickly become unwieldy if the application logic requires a chain of operations. Nesting of callbacks can make code harder to read and give the appearance of making the codebase more complex that it actually is. To help with this we also have released two observable based asynchronous drivers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://mongodb.github.io/mongo-java-driver-reactivestreams/&#34;&gt;MongoDB Reactive Streams Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mongodb.github.io/mongo-java-driver-rx/&#34;&gt;MongoDB RxJava Driver&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These observable drivers follow similar patterns that split the logic into &lt;code&gt;onNext&lt;/code&gt;, &lt;code&gt;onError&lt;/code&gt; and &lt;code&gt;onComplete(d)&lt;/code&gt; methods. These methods split out the logic used by &lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;.onResult(T result, Throwable t)&lt;/code&gt; into individual components that can make the code  easier to reason with.&lt;/p&gt;

&lt;p&gt;The MongoDB Async Driver provides a factory and interfaces that do the heavy lifting of converting callback based operations into an observable operations.  There are three interfaces &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/Observable.html
&#34;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/Subscription.html
&#34;&gt;&lt;code&gt;Subscription&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/Observer.html
&#34;&gt;&lt;code&gt;Observer&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/Observables.html
&#34;&gt;&lt;code&gt;Observables&lt;/code&gt;&lt;/a&gt; helpers convert any callback based operations into observable operations.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The interfaces are similar to &lt;code&gt;Publisher&lt;/code&gt;, &lt;code&gt;Subscription&lt;/code&gt; and &lt;code&gt;Subscriber&lt;/code&gt; interfaces from the &lt;a href=&#34;http://www.reactive-streams.org/&#34;&gt;reactive streams&lt;/a&gt; JVM implementation.  However, we prefer the name &lt;code&gt;Observerable&lt;/code&gt; to &lt;code&gt;Publisher&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; to &lt;code&gt;Subscriber&lt;/code&gt; for readability purposes.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;observable&#34;&gt;Observable&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/Observable.html
&#34;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; represents a MongoDB operation which emits its results to the &lt;code&gt;Observer&lt;/code&gt; based on demand requested by the &lt;code&gt;Subscription&lt;/code&gt; to the &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;subscription&#34;&gt;Subscription&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/Subscription.html
&#34;&gt;&lt;code&gt;Subscription&lt;/code&gt;&lt;/a&gt; represents a one-to-one lifecycle of an &lt;code&gt;Observer&lt;/code&gt; subscribing to an &lt;code&gt;Observable&lt;/code&gt;.  A &lt;code&gt;Subscription&lt;/code&gt; to an &lt;code&gt;Observable&lt;/code&gt; can only be used by a single &lt;code&gt;Observer&lt;/code&gt;.  The purpose of a &lt;code&gt;Subscription&lt;/code&gt; is to control demand and to allow unsubscribing from the &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;observer&#34;&gt;Observer&lt;/h2&gt;

&lt;p&gt;An &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/Observer.html
&#34;&gt;&lt;code&gt;Observer&lt;/code&gt;&lt;/a&gt; provides the mechanism for receiving push-based notifications from the &lt;code&gt;Observable&lt;/code&gt;.  Demand for these events is signalled by its &lt;code&gt;Subscription&lt;/code&gt;. On subscription to an &lt;code&gt;Observable&lt;/code&gt; the &lt;code&gt;Observer&lt;/code&gt; will be passed the &lt;code&gt;Subscription&lt;/code&gt; via the &lt;code&gt;onSubscribe(Subscription subscription)&lt;/code&gt;.
Demand for results is signaled via the &lt;code&gt;Subscription&lt;/code&gt; and any results are passed to the &lt;code&gt;onNext(TResult result)&lt;/code&gt; method.  If there is an error for any reason the &lt;code&gt;onError(Throwable e)&lt;/code&gt; will be called and no more events passed to the &lt;code&gt;Observer&lt;/code&gt;. Alternatively, when the &lt;code&gt;Observer&lt;/code&gt; has consumed all the results from the &lt;code&gt;Observable&lt;/code&gt; the &lt;code&gt;onComplete()&lt;/code&gt; method will be called.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-a-mongoiterable&#34;&gt;Wrapping a MongoIterable&lt;/h2&gt;

&lt;p&gt;With the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/Observables.html
&#34;&gt;&lt;code&gt;Observables&lt;/code&gt;&lt;/a&gt; factory creating an &lt;code&gt;Observable&lt;/code&gt; from a &lt;code&gt;MongoIterable&lt;/code&gt; is simple.&lt;/p&gt;

&lt;p&gt;In the following example we iterate and print out all json forms of documents in a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    Observables.observe(collection.find()).subscribe(new Observer&amp;lt;Document&amp;gt;(){
        @Override
        void onSubscribe(final Subscription subscription) {
            System.out.println(&amp;quot;Subscribed and requesting all documents&amp;quot;);
            subscription.request(Long.MAX_VALUE);
        }

        @Override
        void onNext(final Document document) {
            System.out.println(document.toJson());
        }

        @Override
        void onError(final Throwable e) {
            System.out.println(&amp;quot;There was an error: &amp;quot; + e.getMessage());
        }

        @Override
        void onComplete() {
            System.out.println(&amp;quot;Finished iterating all documents&amp;quot;);
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrapping-a-callback-based-method&#34;&gt;Wrapping a callback based method&lt;/h2&gt;

&lt;p&gt;Creating an &lt;code&gt;Observable&lt;/code&gt; from any callback based methods requires the wrapping of the method inside a &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/Block.html
&#34;&gt;&lt;code&gt;Block&lt;/code&gt;&lt;/a&gt;. This allows the execution of the operation to be delayed, until demand is request by the &lt;code&gt;Subscription&lt;/code&gt;.  The method &lt;em&gt;must&lt;/em&gt; use the supplied callback to convert the results into an &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the following example we print out the count of the number of documents in a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    Block&amp;lt;SingleResultCallback&amp;lt;Long&amp;gt;&amp;gt; operation = new Block&amp;lt;SingleResultCallback&amp;lt;Long&amp;gt;&amp;gt;() {
        @Override
        void apply(final SingleResultCallback&amp;lt;Long&amp;gt; callback) {
            collection.count(callback);
        }
    };

    // Or in Java 8 syntax:
    operation = (Block&amp;lt;SingleResultCallback&amp;lt;Long&amp;gt;&amp;gt;) collection::count;

    Observables.observe(operation).subscribe(new Observer&amp;lt;Long&amp;gt;(){
        @Override
        void onSubscribe(final Subscription subscription) {
            System.out.println(&amp;quot;Subscribed and requesting the count&amp;quot;);
            subscription.request(1);
        }

        @Override
        void onNext(final Long count) {
            System.out.println(&amp;quot;The collection has &amp;quot; + count + &amp;quot; documents&amp;quot;);
        }

        @Override
        void onError(final Throwable e) {
            System.out.println(&amp;quot;There was an error: &amp;quot; + e.getMessage());
        }

        @Override
        void onComplete() {
            System.out.println(&amp;quot;Finished&amp;quot;);
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;back-pressure&#34;&gt;Back Pressure&lt;/h2&gt;

&lt;p&gt;In the following example, the &lt;code&gt;Subscription&lt;/code&gt; is used to control demand when iterating an &lt;code&gt;Observable&lt;/code&gt;. This is similar in concept to the &lt;code&gt;MongoIterable.forEach&lt;/code&gt; method but allows demand-driven iteration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; Observables.observe(collection.find()).subscribe(new Observer&amp;lt;Document&amp;gt;(){
        private long batchSize = 10;
        private long seen = 0;
        private Subscription subscription;

         @Override
         void onSubscribe(final Subscription subscription) {
             this.subscription = subscription;
             subscription.request(batchSize);
         }

         @Override
         void onNext(final Document document) {
             System.out.println(document.toJson());
             seen += 1;
             if (seen == batchSize) {
                seen = 0;
                subscription.request(batchSize);
             }
         }

         @Override
         void onError(final Throwable e) {
             System.out.println(&amp;quot;There was an error: &amp;quot; + e.getMessage());
         }

         @Override
         void onComplete() {
             System.out.println(&amp;quot;Finished iterating all documents&amp;quot;);
         }
     });
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Authenticating</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/connecting/authenticating/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/connecting/authenticating/</guid>
      <description>

&lt;h1 id=&#34;authentication&#34;&gt;Authentication&lt;/h1&gt;

&lt;p&gt;The Java driver supports all MongoDB &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/&#34;&gt;authentication mechanisms&lt;/a&gt;, including those
only available in the MongoDB &lt;a href=&#34;http://docs.mongodb.org/manual/administration/install-enterprise/&#34;&gt;Enterprise Edition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;An authentication credential is represented as an instance of the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/MongoCredential.html
&#34;&gt;&lt;code&gt;MongoCredential&lt;/code&gt;&lt;/a&gt; class, which includes static factory methods for
each of the supported authentication mechanisms.  A list of these instances must be passed to the driver via a
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClients.html
&#34;&gt;&lt;code&gt;MongoClients&lt;/code&gt;&lt;/a&gt; static factory method that takes a
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; parameter.  Alternatively, a single
&lt;code&gt;MongoCredential&lt;/code&gt; can be created implicity via a
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; and passed to a
&lt;code&gt;MongoClients&lt;/code&gt; static factory method that takes a &lt;code&gt;ConnectionString&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Given the flexibility of role-based access control in MongoDB, it is usually sufficient to authenticate with a single user, but, for completeness, the driver accepts a list of credentials.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;default-authentication-mechanism&#34;&gt;Default authentication mechanism&lt;/h2&gt;

&lt;p&gt;MongoDB 3.0 changed the default authentication mechanism from
&lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#mongodb-cr-authentication&#34;&gt;MONGODB-CR&lt;/a&gt; to
&lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#scram-sha-1-authentication&#34;&gt;SCRAM-SHA-1&lt;/a&gt;.  To create a credential that will
authenticate properly regardless of server version, create a credential using the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.MongoCredential;

// ...

String user;        // the user name
String database;    // the name of the database in which the user is defined
char[] password;    // the password as a character array
// ...
MongoCredential credential = MongoCredential.createCredential(user,
                                                              database,
                                                              password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ConnectionString uri = new ConnectionString(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the recommended approach as it will make upgrading from MongoDB 2.6 to MongoDB 3.0 seamless, even after &lt;a href=&#34;http://docs.mongodb.org/manual/release-notes/3.0-scram/#upgrade-mongodb-cr-to-scram&#34;&gt;upgrading the
authentication schema&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;scram-sha-1&#34;&gt;SCRAM-SHA-1&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb .org/manual/core/authentication/#scram-sha-1-authentication&#34;&gt;SCRAM-SHA-1&lt;/a&gt;
use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCredential credential = MongoCredential.createScramSha1Credential(user,
                                                                       database,
                                                                       password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ConnectionString uri = new ConnectionString(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=SCRAM-SHA-1&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mongodb-cr&#34;&gt;MONGODB-CR&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#mongodb-cr-authentication&#34;&gt;MONGODB-CR&lt;/a&gt;
use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCredential credential = MongoCredential.createMongoCRCredential(user,
                                                                     database,
                                                                     password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ConnectionString uri = new ConnectionString(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=MONGODB-CR&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that this is not recommended as a credential created in this way will fail to authenticate after an authentication schema upgrade
from MONGODB-CR to SCRAM-SHA-1.&lt;/p&gt;

&lt;h2 id=&#34;x-509&#34;&gt;x.509&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#x-509-certificate-authentication&#34;&gt;x.509&lt;/a&gt; mechanism authenticates a user
whose name is derived from the distinguished subject name of the X.509 certificate presented by the driver during SSL negotiation. This
authentication method requires the use of SSL connections with certificate validation and is available in MongoDB 2.6 and newer. To
create a credential of this type use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user;     // The x.509 certificate derived user name, e.g. &amp;quot;CN=user,OU=OrgUnit,O=myOrg,...&amp;quot;
MongoCredential credential = MongoCredential.createMongoX509Credential(user);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ConnectionString uri = new ConnectionString(&amp;quot;mongodb://subjectName@host1/?authMechanism=MONGODB-X509&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the MongoDB server
&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/configure-x509-client-authentication/#add-x-509-certificate-subject-as-a-user&#34;&gt;x.509 tutorial&lt;/a&gt; for
more information about determining the subject name from the certificate.&lt;/p&gt;

&lt;h2 id=&#34;kerberos-gssapi&#34;&gt;Kerberos (GSSAPI)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Kerberos service.  To
create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/#kerberos-authentication&#34;&gt;Kerberos (GSSAPI)&lt;/a&gt; use the
following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user;   // The Kerberos user name, including the realm, e.g. &amp;quot;user1@MYREALM.ME&amp;quot;
// ...
MongoCredential credential = MongoCredential.createGSSAPICredential(user);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ConnectionString uri = new ConnectionString(&amp;quot;mongodb://username%40REALM.com@host1/?authMechanism=GSSAPI&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;GSSAPI&lt;/code&gt; authentication mechanism instead of &lt;code&gt;Kerberos&lt;/code&gt; because technically the driver is authenticating via the
&lt;a href=&#34;https://tools.ietf.org/html/rfc4752&#34;&gt;GSSAPI&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To successfully authenticate via Kerberos, the application typically must specify several system properties so that the underlying GSSAPI
Java libraries can acquire a Kerberos ticket:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;java.security.krb5.realm=MYREALM.ME
java.security.krb5.kdc=mykdc.myrealm.me
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;GSSAPI&lt;/code&gt; authentication mechanism is supported only in the following environments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux: Java 6 and above&lt;/li&gt;
&lt;li&gt;Windows: Java 7 and above with &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa380493&#34;&gt;SSPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OS X: Java 7 and above&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;ldap-plain&#34;&gt;LDAP (PLAIN)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Lightweight Directory
Access Protocol (LDAP) service.  To create a credential of type &lt;a href=&#34;http://docs.mongodb
.org/manual/core/authentication/#ldap-proxy-authority-authentication&#34;&gt;LDAP&lt;/a&gt; use the following static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user;          // The LDAP user name
char[] password;      // The LDAP password
// ...
MongoCredential credential = MongoCredential.createPlainCredential(user, &amp;quot;$external&amp;quot;, password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ConnectionString uri = new ConnectionString(&amp;quot;mongodb://user1@host1/?authSource=$external&amp;amp;authMechanism=PLAIN&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;plain&lt;/code&gt; authentication mechanism instead of &lt;code&gt;LDAP&lt;/code&gt; because technically the driver is authenticating via the &lt;a href=&#34;https://www.ietf.org/rfc/rfc4616.txt&#34;&gt;PLAIN&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Management</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/management/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/management/</guid>
      <description>

&lt;h2 id=&#34;management&#34;&gt;Management&lt;/h2&gt;

&lt;p&gt;The driver provides two mechanisms for examining its state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/management/logging/&#34;&gt;Logging&lt;/a&gt;: Comprehensive logging of all operations using &lt;a href=&#34;http://www.slf4j.org/&#34;&gt;SLF4J&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/management/monitoring/&#34;&gt;Monitoring&lt;/a&gt;: Built on &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/jmx/&#34;&gt;JMX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CRUD Operations</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/crud/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/crud/</guid>
      <description>

&lt;h2 id=&#34;crud&#34;&gt;CRUD&lt;/h2&gt;

&lt;p&gt;For a walkthrough of the main CRUD operations please refer to the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/getting-started/quick-tour/&#34;&gt;Quick Tour&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All CRUD-related methods in the Java driver are accessed through the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html
&#34;&gt;&lt;code&gt;MongoCollection&lt;/code&gt;&lt;/a&gt; interface.  Instances of
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html
&#34;&gt;&lt;code&gt;MongoCollection&lt;/code&gt;&lt;/a&gt; can be obtained from a&lt;br /&gt;
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; instance by way of a
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoDatabase.html
&#34;&gt;&lt;code&gt;MongoDatabase&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient client = MongoClients.create();
MongoDatabase database = client.getDatabase(&amp;quot;mydb&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;mycoll&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html
&#34;&gt;&lt;code&gt;MongoCollection&lt;/code&gt;&lt;/a&gt; is a generic interface: the &lt;code&gt;TDocument&lt;/code&gt; type parameter
is the class that clients use to insert or replace documents in a collection, and the default type returned from &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;aggregate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The single-argument &lt;code&gt;getCollection&lt;/code&gt; method returns an instance of &lt;code&gt;MongoCollection&amp;lt;Document&amp;gt;&lt;/code&gt;, and so with this type of collection
an application uses instances of the &lt;code&gt;Document&lt;/code&gt; class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;mycoll&amp;quot;);

// insert a document
Document document = new Document(&amp;quot;x&amp;quot;, 1)
collection.insertOne(document, new SingleResultCallback&amp;lt;Void&amp;gt;() {
   @Override
   public void onResult(final Void result, final Throwable t) {
       System.out.println(&amp;quot;Inserted!&amp;quot;);
   }
});

...

document.append(&amp;quot;x&amp;quot;, 2).append(&amp;quot;y&amp;quot;, 3);

// replace a document
collection.replaceOne(Filters.eq(&amp;quot;_id&amp;quot;, document.get(&amp;quot;_id&amp;quot;), document, 
    new SingleResultCallback&amp;lt;UpdateResult&amp;gt;() {
       @Override
       public void onResult(final UpdateResult result, final Throwable t) {
           System.out.println(result.getModifiedCount());
       }
   });

...

// find documents
collection.find().into(new ArrayList&amp;lt;Document&amp;gt;(), 
    new SingleResultCallback&amp;lt;List&amp;lt;Document&amp;gt;&amp;gt;() {
        @Override
        public void onResult(final List&amp;lt;Document&amp;gt; result, final Throwable t) {
            System.out.println(&amp;quot;Found Documents: #&amp;quot; + result.size());
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;codecregistry&#34;&gt;CodecRegistry&lt;/h3&gt;

&lt;p&gt;An overload of the &lt;code&gt;getCollection&lt;/code&gt; method allows clients to specify a different class for representing BSON documents.  For example,
users my wish to use the type-safe &lt;a href=&#34;http://api.mongodb.org/java/3.2/?org/bson/BsonDocument.html
&#34;&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/a&gt; with the CRUD API:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Pass BsonDocument.class as the second argument
MongoCollection&amp;lt;BsonDocument&amp;gt; collection = database.getCollection(&amp;quot;mycoll&amp;quot;, BsonDocument.class);

// insert a document
BsonDocument document = new BsonDocument(&amp;quot;x&amp;quot;, new BsonInt32(1));
collection.insertOne(document, new SingleResultCallback&amp;lt;Void&amp;gt;() {
   @Override
   public void onResult(final Void result, final Throwable t) {
       System.out.println(&amp;quot;Inserted!&amp;quot;);
   }
});

...

document.append(&amp;quot;x&amp;quot;, new BsonInt32(2)).append(&amp;quot;y&amp;quot;, new BsonInt32(3));

// replace a document
collection.replaceOne(Filters.eq(&amp;quot;_id&amp;quot;, document.get(&amp;quot;_id&amp;quot;), document, 
    new SingleResultCallback&amp;lt;UpdateResult&amp;gt;() {
       @Override
       public void onResult(final UpdateResult result, final Throwable t) {
           System.out.println(result.getModifiedCount());
       }
   });

...

// find documents
collection.find().into(new ArrayList&amp;lt;BsonDocument&amp;gt;(), 
    new SingleResultCallback&amp;lt;List&amp;lt;BsonDocument&amp;gt;&amp;gt;() {
        @Override
        public void onResult(final List&amp;lt;BsonDocument&amp;gt; result, final Throwable t) {
            System.out.println(&amp;quot;Found BsonDocuments: #&amp;quot; + result.size());
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two requirements that must be met for any class used in this way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;Codec&lt;/code&gt; for it must be registered in the &lt;code&gt;MongoCollection&lt;/code&gt;&amp;rsquo;s &lt;code&gt;CodecRegistry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;Codec&lt;/code&gt; must be one that encodes and decodes a full BSON document (and not just, for example, a single BSON value like an Int32)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, a &lt;code&gt;MongoCollection&lt;/code&gt; is configured with &lt;code&gt;Codec&lt;/code&gt;s for two classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Applications, however, are free to register &lt;code&gt;Codec&lt;/code&gt; implementations for other classes by customizing the &lt;code&gt;CodecRegistry&lt;/code&gt;.  New
&lt;code&gt;CodecRegistry&lt;/code&gt; instances are configurable at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In a &lt;code&gt;MongoClient&lt;/code&gt; via &lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;MongoDatabase&lt;/code&gt; via its &lt;code&gt;withCodecRegistry&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;MongoCollection&lt;/code&gt; via its &lt;code&gt;withCodecRegistry&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the case of encoding and decoding instances of the &lt;code&gt;UUID&lt;/code&gt; class.  The Java driver by default encodes instances of &lt;code&gt;UUID&lt;/code&gt; using a
byte ordering that is not compatible with other MongoDB drivers, and changing the default would be quite dangerous.  But it is
possible for new applications that require interoperability across multiple drivers to be able to change that default, and they can do
that with a &lt;code&gt;CodecRegistry&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Replaces the default UuidCodec with one that uses the new standard UUID representation
CodecRegistry codecRegistry = 
CodecRegistries.fromRegistries(CodecRegistries.fromCodecs(new UuidCodec(UuidRepresentation.STANDARD)),
                               MongoClient.getDefaultCodecRegistry());

// globally
MongoClientSettings clientSettings = MongoClients.create(&amp;quot;mongodb://localhost&amp;quot;).ggetSettings();
newClientSettings = MongoClientSettings.builder(clientSettings).codecRegistry(codecRegistry).build();
MongoClient client = MongoClients.create(newClientSettings);
 

// or per database
MongoDatabase database = client.getDatabase(&amp;quot;mydb&amp;quot;)
                               .withCodecRegistry(codecRegistry);

// or per collection
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;mycoll&amp;quot;)
                                               .withCodecRegistry(codecRegistry);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;write-concern&#34;&gt;Write Concern&lt;/h3&gt;

&lt;p&gt;Applications can configure the &lt;code&gt;WriteConcern&lt;/code&gt; that a &lt;code&gt;MongoCollection&lt;/code&gt; uses for write operations.  Like &lt;code&gt;CodecRegistry&lt;/code&gt;, the
&lt;code&gt;WriteConcern&lt;/code&gt; can be configured at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In a &lt;code&gt;MongoClient&lt;/code&gt; via &lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;MongoDatabase&lt;/code&gt; via its &lt;code&gt;withWriteConcern&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;MongoCollection&lt;/code&gt; via its &lt;code&gt;withWriteConcern&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;read-preference&#34;&gt;Read Preference&lt;/h3&gt;

&lt;p&gt;Applications can configure the &lt;code&gt;ReadPreference&lt;/code&gt; that a &lt;code&gt;MongoCollection&lt;/code&gt; uses for read operations.  Like &lt;code&gt;WriteConcern&lt;/code&gt;, the
&lt;code&gt;ReadPreference&lt;/code&gt; can be configured at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In a &lt;code&gt;MongoClient&lt;/code&gt; via &lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;MongoDatabase&lt;/code&gt; via its &lt;code&gt;withReadPreference&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;MongoCollection&lt;/code&gt; via its &lt;code&gt;withReadPreference&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;immutability-of-mongodatabase-and-mongocollection&#34;&gt;Immutability of MongoDatabase and MongoCollection&lt;/h3&gt;

&lt;p&gt;Instance of &lt;code&gt;MongoDatabase&lt;/code&gt; and &lt;code&gt;MongoCollection&lt;/code&gt; are immutable, so rather than mutate the state of the &lt;code&gt;MongoCollection&lt;/code&gt; on which they
are invoked, the three methods discussed above return new instances.  Applications should therefore be sure to store the result of the
method call.  For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// CORRECT: The results of the method calls are chained and the final one is referenced 
// by collection 
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;mycoll&amp;quot;)
                                                .withWriteConcern(WriteConcern.JOURNALED)
                                                .withReadPreference(ReadPreference.primary())
                                                .withCodecRegistry(newRegistry);

// INCORRECT: withReadPreference returns a new instance of MongoCollection
// It does not modify the collection it&#39;s called on.  So this will
// have no effect
collection.withReadPreference(ReadPreference.secondary());
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Connecting</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/connecting/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/connecting/</guid>
      <description>

&lt;h2 id=&#34;connecting&#34;&gt;Connecting&lt;/h2&gt;

&lt;p&gt;The reference documentation for connecting to a MongoDB server deployment is divided into three sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/connecting/connection-settings/&#34;&gt;Connection Settings&lt;/a&gt;: documentation of the various ways to specify the properties of a connection&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/connecting/authenticating/&#34;&gt;Authenticating&lt;/a&gt;: detailed documentation of the various ways to specify authentication credentials&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/connecting/ssl/&#34;&gt;SSL&lt;/a&gt;: Detailed documentation of the various ways to specify the properties of an SSL connection&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Connection Settings</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/connecting/connection-settings/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/connecting/connection-settings/</guid>
      <description>

&lt;h2 id=&#34;connection-settings&#34;&gt;Connection Settings&lt;/h2&gt;

&lt;p&gt;The Java driver has two ways of specifying the settings of a connection to a MongoDB server deployment.&lt;/p&gt;

&lt;h3 id=&#34;connection-string&#34;&gt;Connection String&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;connection string&lt;/a&gt; is the simplest way to specify the properties of a
connection. . A connection string mostly follows &lt;a href=&#34;http://tools.ietf.org/html/rfc3986&#34;&gt;RFC 3986&lt;/a&gt;, with the exception of the domain name.
 For MongoDB, it is possible to list multiple domain names separated by a comma. Below are some example connection strings.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a standalone mongod, mongos, or a direct connection to a member of a replica set:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;mongodb://host:27017
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;To connect to multiple mongos or a replica set:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;mongodb://host1:27017,host2:27017
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/connecting/authenticating/&#34;&gt;authentication guide&lt;/a&gt; contains information on how to provide credentials in the connection string.&lt;/p&gt;

&lt;h4 id=&#34;the-database-component&#34;&gt;The Database Component&lt;/h4&gt;

&lt;p&gt;The database component is optional and is used to indicate which database to authenticate against. When the database component is not
provided, the &amp;ldquo;admin&amp;rdquo; database is used.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;mongodb://host:27017/mydb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Above, the database by the name of &amp;ldquo;mydb&amp;rdquo; is where the credentials are stored for the application.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Some drivers utilize the database component to indicate which database to work with by default. The Java driver, while it parses the
database component, does not use the database component for anything other than authentication.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;options&#34;&gt;Options&lt;/h4&gt;

&lt;p&gt;Many options can be provided via the connection string. The ones that cannot may be provided in a
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; instance. To
provide an option, append a &lt;code&gt;?&lt;/code&gt; to the connection string and separate options by an &lt;code&gt;&amp;amp;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;mongodb://host:27017/?replicaSet=rs0&amp;amp;maxPoolSize=200
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above connection string sets the &amp;ldquo;replicaSet&amp;rdquo; value to &amp;ldquo;rs0&amp;rdquo; and the &amp;ldquo;maxPoolSize&amp;rdquo; to &amp;ldquo;200&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;For a comprehensive list of the available options, see the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h3 id=&#34;mongoclient&#34;&gt;MongoClient&lt;/h3&gt;

&lt;p&gt;A &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; instance will be the root object for all interaction with MongoDB. It is all
that is needed to handle connecting to servers, monitoring servers, and performing operations against those servers.&lt;/p&gt;

&lt;p&gt;To create a &lt;code&gt;MongoClient&lt;/code&gt; use the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClients.html#create-com.mongodb.ConnectionString-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt;
static helper.  Without any arguments &lt;code&gt;MongoClients.create()&lt;/code&gt; will return a &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt;
instance will connect to &amp;ldquo;localhost&amp;rdquo; port 27017.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient client = MongoClients.create();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, a connection string may be provided:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient client = MongoClients.create(new ConnectionString(&amp;quot;mongodb://host:27017,host2:27017/?replicaSet=rs0&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; class provides an in-code way to set the
same options from a connection string.  This is sometimes necessary, as the connection string does not allow an application to configure as
many properties of the connection as  &lt;code&gt;MongoClientSettings&lt;/code&gt;.&lt;br /&gt;
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; instances are immutable, so to create one an
application uses a builder:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ClusterSettings clusterSettings = ClusterSettings.builder().hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).description(&amp;quot;Local Server&amp;quot;).build();
MongoClientSettings settings = MongoClientSettings.builder().clusterSettings(clusterSettings).build();
MongoClient client = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;netty-configuration&#34;&gt;Netty Configuration&lt;/h3&gt;

&lt;p&gt;By default, the async driver relies on the
&lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/nio/channels/AsynchronousSocketChannel.html&#34;&gt;&lt;code&gt;AsynchronousSocketChannel&lt;/code&gt;&lt;/a&gt; class, introduced
in Java 7.  If configured properly, the driver will use &lt;a href=&#34;http://netty.io/&#34;&gt;Netty&lt;/a&gt; instead.  An application must use Netty for the
following reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The application is configured to use SSL to communicate with the MongoDB server.&lt;/li&gt;
&lt;li&gt;The application runs on Java 6.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To configure the driver to use Netty, the application must configure the MongoClientSettings appropriately:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientSettings.builder()
                   .streamFactoryFactory(new NettyStreamFactoryFactory())
                   .build();
         
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default the Netty-based streams will use the &lt;a href=&#34;http://netty.io/4.0/api/io/netty/channel/nio/NioEventLoopGroup.html&#34;&gt;NioEventLoopGroup&lt;/a&gt;
and Netty&amp;rsquo;s &lt;a href=&#34;http://netty.io/4.0/api/io/netty/buffer/ByteBufAllocator.html#DEFAULT&#34;&gt;default &lt;code&gt;ByteBufAllocator&lt;/code&gt;&lt;/a&gt;, but these are
configurable via the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/connection/netty/NettyStreamFactoryFactory.html
&#34;&gt;&lt;code&gt;NettyStreamFactoryFactory&lt;/code&gt;&lt;/a&gt; constructor.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Netty may also be configured by setting the &lt;code&gt;org.mongodb.async.type&lt;/code&gt; system property to &lt;code&gt;netty&lt;/code&gt;, but this should be considered as
deprecated as of the 3.1 driver release.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/management/monitoring/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/management/monitoring/</guid>
      <description>

&lt;h1 id=&#34;monitoring&#34;&gt;Monitoring&lt;/h1&gt;

&lt;p&gt;The driver uses &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/jmx/&#34;&gt;JMX&lt;/a&gt; to create
&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/jmx/mbeans/mxbeans.html&#34;&gt;MXBeans&lt;/a&gt; that allow an
application or end user to monitor various aspects of the driver.&lt;/p&gt;

&lt;p&gt;The driver creates MXBean instances of a single type:
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/management/ConnectionPoolStatisticsMBean.html
&#34;&gt;ConnectionPoolStatisticsMBean&lt;/a&gt;.
 The driver registers one &lt;code&gt;ConnectionPoolStatisticsMBean&lt;/code&gt; instance per each server it connects to. For example, in the case of a replica
 set, the driver creates an instance per each non-hidden member of the replica set.&lt;/p&gt;

&lt;p&gt;Each MXBean instance is required to be registered with a unique object name, which consists of a domain and a set of named properties. All
MXBean instances created by the driver are under the domain &lt;code&gt;&amp;quot;org.mongodb.driver&amp;quot;&lt;/code&gt;.  Instances of &lt;code&gt;ConnectionPoolStatisticsMBean&lt;/code&gt; will have
the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clusterId&lt;/code&gt;: a client-generated unique identifier, required to ensure object name uniqueness in situations where an
application has multiple &lt;code&gt;MongoClient&lt;/code&gt; instances connected to the same MongoDB server deployment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt;: the host name of the server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;: the port on which the server is listening&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minSize&lt;/code&gt;: the minimum allowed size of the pool, including idle and in-use members&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxSize&lt;/code&gt;: the maximum allowed size of the pool, including idle and in-use members&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;: the current size of the pool, including idle and and in-use members&lt;/li&gt;
&lt;li&gt;&lt;code&gt;waitQueueSize&lt;/code&gt;: the current size of the wait queue for a connection from this pool&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkedOutCount&lt;/code&gt;: the current count of connections that are currently in use&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SSL</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/connecting/ssl/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/connecting/ssl/</guid>
      <description>

&lt;h2 id=&#34;ssl&#34;&gt;SSL&lt;/h2&gt;

&lt;p&gt;The async Java driver supports SSL connections to MongoDB servers using the underlying support for SSL provided by
&lt;a href=&#34;http://netty .io/&#34;&gt;Netty&lt;/a&gt;. You can configure the driver to use SSL with &lt;code&gt;MongoClientSettings&lt;/code&gt; by setting the sslEnabled property to true
and the stream factory to &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/connection/netty/NettyStreamFactoryFactory.html
&#34;&gt;&lt;code&gt;NettyStreamFactoryFactory&lt;/code&gt;&lt;/a&gt;, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientSettings.builder()                                                  
                   .sslSettings(SslSettings.builder()
                                           .enabled(true)
                                           .build())   
                   .streamFactoryFactory(new NettyStreamFactoryFactory())
                   .build()                                                    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/connecting/connection-settings/#netty-configuration&#34;&gt;Netty Configuration&lt;/a&gt; for details on
configuring Netty.&lt;/p&gt;

&lt;h3 id=&#34;host-name-verification&#34;&gt;Host name verification&lt;/h3&gt;

&lt;p&gt;By default, the driver ensures that the host name included in the server&amp;rsquo;s SSL certificate(s) matches the host name(s) provided when
constructing a &lt;code&gt;MongoClient&lt;/code&gt;.  However, this host name verification requires a Java 7 JVM, as it relies on additions to the
&lt;code&gt;javax.net.SSLParameters&lt;/code&gt; class that were introduced in Java 7.  If your application must run on Java 6, or for some other reason you need
 to disable host name verification, you must expicitly indicate this in &lt;code&gt;SslSettings&lt;/code&gt; using the &lt;code&gt;invalidHostNameAllowed&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientSettings.builder()                                             
                   .sslSettings(SslSettings.builder()                     
                                           .enabled(true)                 
                                           .invalidHostNameAllowed(true)  
                                           .build())                      
                   .streamFactoryFactory(new NettyStreamFactoryFactory())
                   .build()                                              
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;jvm-system-properties&#34;&gt;JVM system properties&lt;/h3&gt;

&lt;p&gt;A typical application will need to set several JVM system properties to ensure that the client is able to validate the SSL certificate
presented by the server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javax.net.ssl.trustStore&lt;/code&gt;: the path to a trust store containing the certificate of the signing authority&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javax.net.ssl.trustStorePassword&lt;/code&gt;: the password to access this trust store&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The trust store is typically created with the &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;keytool&lt;/a&gt;
command line program provided as part of the JDK.  For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    keytool -importcert -trustcacerts -file &amp;lt;path to certificate authority file&amp;gt; 
        -keystore &amp;lt;path to trust store&amp;gt; -storepass &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A typical application will also need to set several JVM system properties to ensure that the client presents an SSL certificate to the
MongoDB server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;javax.net.ssl.keyStore&lt;/code&gt;: the path to a key store containing the client&amp;rsquo;s SSL certificates&lt;/li&gt;
&lt;li&gt;&lt;code&gt;javax.net.ssl.keyStorePassword&lt;/code&gt;: the password to access this key store&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key store is typically created with the &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;keytool&lt;/a&gt; or the
&lt;a href=&#34;https://www.openssl.org/docs/apps/openssl.html&#34;&gt;openssl&lt;/a&gt; command line program.&lt;/p&gt;

&lt;p&gt;For more information on configuring a Java application for SSL, please refer to the&lt;br /&gt;
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSSERefGuide.html&#34;&gt;JSSE Reference Guide&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/management/logging/</link>
      <pubDate>Wed, 18 Mar 2015 21:14:20 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/management/logging/</guid>
      <description>

&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;

&lt;p&gt;By default, logging is enabled via the popular &lt;a href=&#34;http://www.slf4j.org/&#34;&gt;SLF4J&lt;/a&gt; API. The use of &lt;a href=&#34;http://www.slf4j.org/&#34;&gt;SLF4J&lt;/a&gt; is optional;
the driver will use SLF4J if the driver detects the presence of SLF4J in the classpath. Otherwise, the driver will fall back to
JUL (&lt;code&gt;java.util.logging&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;The driver uses the following logger names:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;org.mongodb.driver&lt;/code&gt;: the root logger

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;cluster&lt;/code&gt;: for logs related to monitoring of the MongoDB servers to which the driver connects&lt;/li&gt;
&lt;li&gt;&lt;code&gt;connection&lt;/code&gt;: for logs related to connections and connection pools&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protocol&lt;/code&gt;: for logs related to protocol message sent to and received from a MongoDB server

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;: for logs related to insert messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt;: for logs related to update messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;: for logs related to delete messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;query&lt;/code&gt;: for logs related to query messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getmore&lt;/code&gt;: for logs related to getmore messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;killcursor&lt;/code&gt;: for logs related to killcursor messages and responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command&lt;/code&gt;: for logs related to command messages and responses&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uri&lt;/code&gt;: for logs related to connection string parsing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;management&lt;/code&gt;: for logs related to JMX&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Admin Quick Tour</title>
      <link>/mongo-java-driver/3.2/driver-async/getting-started/quick-tour-admin/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/getting-started/quick-tour-admin/</guid>
      <description>

&lt;h1 id=&#34;mongodb-driver-admin-quick-tour&#34;&gt;MongoDB Driver Admin Quick Tour&lt;/h1&gt;

&lt;p&gt;This is the second part of the MongoDB driver quick tour. In the
&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/getting-started/quick-tour/&#34;&gt;quick tour&lt;/a&gt; we looked at how to
use the Async Java driver to execute basic CRUD operations.  In this section we&amp;rsquo;ll look at some of the
administrative features available in the driver.&lt;/p&gt;

&lt;p&gt;The following code snippets come from the &lt;code&gt;QuickTourAdmin.java&lt;/code&gt; example code
that can be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/master/driver-async/src/examples/tour/QuickTourAdmin.java
&#34;&gt;driver
source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;See the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/getting-started/installation-guide/&#34;&gt;installation guide&lt;/a&gt;
for instructions on how to install the MongoDB Driver.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;To get started we&amp;rsquo;ll quickly connect and create a &lt;code&gt;mongoClient&lt;/code&gt;, &lt;code&gt;database&lt;/code&gt; and &lt;code&gt;collection&lt;/code&gt;
variable for use in the examples below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(new ConnectionString(&amp;quot;mongodb://localhost&amp;quot;));
MongoDatabase database = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Calling the &lt;code&gt;getDatabase()&lt;/code&gt; on &lt;code&gt;MongoClient&lt;/code&gt; does not create a database.
Only when a database is written to will a database be created.  Examples include the creation of an index or the insertion of a document
into a previously non-existent collection.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Sometimes you will need the same or similar callbacks more than once.  In these situations
it makes sense to DRY (Do not Repeat Yourself) up your code and save the callback either
as a concrete class or assign to a variable as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SingleResultCallback&amp;lt;Void&amp;gt; callbackWhenFinished = new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Operation Finished!&amp;quot;);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-a-list-of-databases&#34;&gt;Get A List of Databases&lt;/h2&gt;

&lt;p&gt;You can get a list of the available databases:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mongoClient.listDatabaseNames().forEach(new Block&amp;lt;String&amp;gt;() {
    @Override
    public void apply(final String s) {
        System.out.println(s);
    }
}, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drop-a-database&#34;&gt;Drop A Database&lt;/h2&gt;

&lt;p&gt;You can drop a database by name using a &lt;code&gt;MongoClient&lt;/code&gt; instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;mongoClient.getDatabase(&amp;quot;databaseToBeDropped&amp;quot;).drop(callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-collection&#34;&gt;Create A Collection&lt;/h2&gt;

&lt;p&gt;Collections in MongoDB are created automatically simply by inserted a document into it. Using the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoDatabase.html#createCollection-java.lang.String-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;createCollection&lt;/code&gt;&lt;/a&gt;
method, you can also create a collection explicitly in order to customize its configuration. For example, to create a capped collection sized to 1 megabyte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.createCollection(&amp;quot;cappedCollection&amp;quot;,
  new CreateCollectionOptions().capped(true).sizeInBytes(0x100000),
  callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-list-of-collections&#34;&gt;Get A List of Collections&lt;/h2&gt;

&lt;p&gt;You can get a list of the available collections in a database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.listCollectionNames().forEach(new Block&amp;lt;String&amp;gt;() {
    @Override
    public void apply(final String databaseName) {
        System.out.println(databaseName);
    }
}, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drop-a-collection&#34;&gt;Drop A Collection&lt;/h2&gt;

&lt;p&gt;You can drop a collection by using the drop() method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.drop(callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-an-index&#34;&gt;Create An Index&lt;/h2&gt;

&lt;p&gt;MongoDB supports secondary indexes. To create an index, you just
specify the field or combination of fields, and for each field specify the direction of the index for that field.
We can use the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/indexes/&#34;&gt;&lt;code&gt;Indexes&lt;/code&gt;&lt;/a&gt; helpers to create index keys:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create an ascending index on the &amp;quot;i&amp;quot; field
 collection.createIndex(Indexes.ascending(&amp;quot;i&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-list-of-indexes-on-a-collection&#34;&gt;Get a List of Indexes on a Collection&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;listIndexes()&lt;/code&gt; method to get a list of indexes. The following creates a
&lt;code&gt;printDocumentBlock&lt;/code&gt; Block that prints out the Json version of a document and then passes
that block to the &lt;code&gt;forEach&lt;/code&gt; method on a
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoIterable.html
&#34;&gt;&lt;code&gt;mongoIterable&lt;/code&gt;&lt;/a&gt;
so that it will printout all the indexes on the collection &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Block&amp;lt;Document&amp;gt; printDocumentBlock = new Block&amp;lt;Document&amp;gt;() {
    @Override
    public void apply(final Document document) {
        System.out.println(document.toJson());
    }
};

collection.listIndexes().forEach(printDocumentBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example should print the following indexes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;v&amp;quot; : 1, &amp;quot;key&amp;quot; : { &amp;quot;_id&amp;quot; : 1 }, &amp;quot;name&amp;quot; : &amp;quot;_id_&amp;quot;, &amp;quot;ns&amp;quot; : &amp;quot;mydb.test&amp;quot; }
{ &amp;quot;v&amp;quot; : 1, &amp;quot;key&amp;quot; : { &amp;quot;i&amp;quot; : 1 }, &amp;quot;name&amp;quot; : &amp;quot;i_1&amp;quot;, &amp;quot;ns&amp;quot; : &amp;quot;mydb.test&amp;quot; }
Operation Finished!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;text-indexes&#34;&gt;Text indexes&lt;/h2&gt;

&lt;p&gt;MongoDB also provides text indexes to support text search of string
content. Text indexes can include any field whose value is a string or
an array of string elements. To create a text index use the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/indexes/#text-index&#34;&gt;&lt;code&gt;Indexes.text&lt;/code&gt;&lt;/a&gt;
static helper:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// create a text index on the &amp;quot;content&amp;quot; field
coll.createIndex(Indexes.text(&amp;quot;content&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As of MongoDB 2.6, text indexes are now integrated into the main query
language and enabled by default (here we use the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/filters/#evaluation&#34;&gt;&lt;code&gt;Filters.text&lt;/code&gt;&lt;/a&gt; helper):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Insert some documents
collection.insertOne(new Document(&amp;quot;_id&amp;quot;, 0).append(&amp;quot;content&amp;quot;, &amp;quot;textual content&amp;quot;), callbackWhenFinished);
collection.insertOne(new Document(&amp;quot;_id&amp;quot;, 1).append(&amp;quot;content&amp;quot;, &amp;quot;additional content&amp;quot;), callbackWhenFinished);
collection.insertOne(new Document(&amp;quot;_id&amp;quot;, 2).append(&amp;quot;content&amp;quot;, &amp;quot;irrelevant content&amp;quot;), callbackWhenFinished);

// Find using the text index
long matchCount = collection.count(text(&amp;quot;textual content -irrelevant&amp;quot;));
System.out.println(&amp;quot;Text search matches: &amp;quot; + matchCount);

// Find using the $language operator
Bson textSearch = Filters.text(&amp;quot;textual content -irrelevant&amp;quot;, new TextSearchOptions().language(&amp;quot;english&amp;quot;));
matchCount = collection.count(textSearch);
System.out.println(&amp;quot;Text search matches (english): &amp;quot; + matchCount);

// Find the highest scoring match
// Find using the text index
collection.count(text(&amp;quot;textual content -irrelevant&amp;quot;), new SingleResultCallback&amp;lt;Long&amp;gt;() {
    @Override
    public void onResult(final Long matchCount, final Throwable t) {
        System.out.println(&amp;quot;Text search matches: &amp;quot; + matchCount);
    }
});


// Find using the $language operator
Bson textSearch = text(&amp;quot;textual content -irrelevant&amp;quot;, &amp;quot;english&amp;quot;);
collection.count(textSearch, new SingleResultCallback&amp;lt;Long&amp;gt;() {
    @Override
    public void onResult(final Long matchCount, final Throwable t) {
        System.out.println(&amp;quot;Text search matches (english): &amp;quot; + matchCount);
    }
});

// Find the highest scoring match
Document projection = new Document(&amp;quot;score&amp;quot;, new Document(&amp;quot;$meta&amp;quot;, &amp;quot;textScore&amp;quot;));
collection.find(textSearch).projection(projection).first(new SingleResultCallback&amp;lt;Document&amp;gt;() {
    @Override
    public void onResult(final Document highest, final Throwable t) {
        System.out.println(&amp;quot;Highest scoring document: &amp;quot; + highest.toJson());

    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and it should print:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;Text search matches: 2
Text search matches (english): 2
Highest scoring document: { &amp;quot;_id&amp;quot; : 1, &amp;quot;content&amp;quot; : &amp;quot;additional content&amp;quot;, &amp;quot;score&amp;quot; : 0.75 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about text search see the &lt;a href=&#34;http://docs.mongodb.org/manual//core/index-text
&#34;&gt;text index&lt;/a&gt; and
&lt;a href=&#34;http://docs.mongodb.org/manual//reference/operator/query/text
&#34;&gt;$text query operator&lt;/a&gt; documentation.&lt;/p&gt;

&lt;h2 id=&#34;running-a-command&#34;&gt;Running a command&lt;/h2&gt;

&lt;p&gt;While not all commands have a specific helper, however you can run any &lt;a href=&#34;http://docs.mongodb.org/manual//reference/command
&#34;&gt;command&lt;/a&gt;
by using the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoDatabase.html#runCommand-org.bson.conversions.Bson-com.mongodb.ReadPreference-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;runCommand()&lt;/code&gt;&lt;/a&gt;
method.  Here we call the &lt;a href=&#34;{{ docsref &amp;quot;reference/command/buildInfo&amp;quot; }}&#34;&gt;buildInfo&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.runCommand(new Document(&amp;quot;buildInfo&amp;quot;, 1), new SingleResultCallback&amp;lt;Document&amp;gt;() {
    @Override
    public void onResult(final Document buildInfo, final Throwable t) {
        System.out.println(buildInfo);
    }
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/mongo-java-driver/3.2/driver-async/getting-started/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/getting-started/</guid>
      <description>

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;To help you get started quickly on the new driver, follow:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/getting-started/installation-guide/&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/getting-started/quick-tour/&#34;&gt;Quick Tour&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/getting-started/quick-tour-admin/&#34;&gt;Admin Quick Tour&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>/mongo-java-driver/3.2/driver-async/getting-started/installation-guide/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/getting-started/installation-guide/</guid>
      <description>

&lt;h1 id=&#34;installation&#34;&gt;Installation&lt;/h1&gt;

&lt;p&gt;The recommended way to get started using one of the drivers in your project is with a dependency management system.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;The MongoDB Async Driver requires either &lt;a href=&#34;http://netty.io/&#34;&gt;Netty&lt;/a&gt; or Java 7.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;pull-right&#34;&gt;
  &lt;input type=&#34;checkbox&#34; checked=&#34;&#34; class=&#34;distroPicker&#34; data-toggle=&#34;toggle&#34; data-on=&#34;Maven&#34; data-off=&#34;Gradle&#34; data-offstyle=&#34;success&#34;&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;mongodb-async-driver&#34;&gt;MongoDB Async Driver&lt;/h2&gt;

&lt;p&gt;The new asynchronous API that can leverage either Netty or Java 7&amp;rsquo;s AsynchronousSocketChannel for fast and non-blocking IO.&lt;/p&gt;

&lt;p&gt;


&lt;section class=&#34;maven&#34;&gt;
&lt;pre&gt;&lt;code class=&#34;ini&#34;&gt;
&amp;lt;dependencies&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mongodb-driver-async&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;3.2.2&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&amp;lt;/dependencies&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section class=&#34;gradle hidden&#34;&gt;
&lt;pre&gt;&lt;code&gt;
  dependencies {
      compile &#39;org.mongodb:mongodb-driver-async:3.2.2&#39;
  }

&lt;/code&gt;&lt;/pre&gt;
&lt;/section&gt;
&lt;section class=&#34;downloadInfo small&#34;&gt;
    &lt;p&gt;You can also download the jars
        &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/mongodb-driver-async/3.2.2&#34; target=&#34;_blank&#34;&gt;directly&lt;/a&gt;
        from sonatype.&lt;/a&gt;&lt;/p&gt;
    
    &lt;p&gt;
        &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;mongodb-driver-async&lt;/code&gt; requires the following dependencies:
        &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/bson/3.2.2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;bson&lt;/code&gt;&lt;/a&gt; and
        &lt;a href=&#34;https://oss.sonatype.org/content/repositories/releases/org/mongodb/mongodb-driver-core/3.2.2&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;mongodb-driver-core&lt;/code&gt;&lt;/a&gt;
    &lt;/p&gt;
    
&lt;/section&gt;

&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MongoDB Async Driver</title>
      <link>/mongo-java-driver/3.2/driver-async/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/</guid>
      <description>

&lt;h2 id=&#34;mongodb-async-java-driver-documentation&#34;&gt;MongoDB Async Java Driver Documentation&lt;/h2&gt;

&lt;p&gt;Welcome to the MongoDB Async Java driver documentation hub.&lt;/p&gt;

&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/getting-started/&#34;&gt;Getting Started&lt;/a&gt; guide contains installation instructions
and a simple tutorial to get up  and running quickly.&lt;/p&gt;

&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;

&lt;p&gt;For more detailed documentation, see the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/&#34;&gt;Reference&lt;/a&gt; guide.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quick Tour</title>
      <link>/mongo-java-driver/3.2/driver-async/getting-started/quick-tour/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/getting-started/quick-tour/</guid>
      <description>

&lt;h1 id=&#34;mongodb-async-driver-quick-tour&#34;&gt;MongoDB Async Driver Quick Tour&lt;/h1&gt;

&lt;p&gt;The following code snippets come from the &lt;code&gt;QuickTour.java&lt;/code&gt; example code
that can be found with the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/master/driver-async/src/examples/tour/QuickTour.java
&#34;&gt;async driver
source&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;See the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/getting-started/installation-guide/#mongodb-async-driver&#34;&gt;installation guide&lt;/a&gt;
for instructions on how to install the MongoDB Async Driver.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;going-async-with-callbacks&#34;&gt;Going Async with Callbacks&lt;/h2&gt;

&lt;p&gt;The MongoDB Async driver provides an asynchronous API that can leverage either Netty or Java 7&amp;rsquo;s &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; for fast and non-blocking IO.&lt;/p&gt;

&lt;p&gt;The API mirrors the new Synchronous API from the MongoDB Driver, but any methods that cause network IO take a &lt;code&gt;SingleResponseCallback&amp;lt;T&amp;gt;&lt;/code&gt; and return immediately, where &lt;code&gt;T&lt;/code&gt; is the type of response for the document.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;SingleResponseCallback&amp;lt;T&amp;gt;&lt;/code&gt; interface requires the implementation of a single method &lt;code&gt;onResult(T result, Throwable t)&lt;/code&gt; which is called when the operation has completed.  The &lt;code&gt;result&lt;/code&gt; parameter contains the result of the operation, if successful. If the operation failed for any reason then the &lt;code&gt;t&lt;/code&gt; contains the &lt;code&gt;Throwable&lt;/code&gt; reason for the failure.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;It&amp;rsquo;s important to always check for errors in any &lt;code&gt;SingleResponseCallback&amp;lt;T&amp;gt;&lt;/code&gt; implementation
and handle them appropriately! Below the error checks are left out only for the sake of brevity.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;make-a-connection&#34;&gt;Make a Connection&lt;/h2&gt;

&lt;p&gt;The following example shows multiple ways to connect to the database &lt;code&gt;mydb&lt;/code&gt; on the local machine, using the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoClients.html#create-com.mongodb.ConnectionString-
&#34;&gt;&lt;code&gt;MongoClients.create&lt;/code&gt;&lt;/a&gt; helper.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// To directly connect to the default server localhost on port 27017
MongoClient mongoClient = MongoClients.create();

// Use a Connection String
MongoClient mongoClient = MongoClients.create(&amp;quot;mongodb://localhost&amp;quot;);

// or a Connection String
MongoClient mongoClient = MongoClients.create(new ConnectionString(&amp;quot;mongodb://localhost&amp;quot;));

// or provide custom MongoClientSettings
ClusterSettings clusterSettings = ClusterSettings.builder().hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).build();
MongoClientSettings settings = MongoClientSettings.builder().clusterSettings(clusterSettings).build();
MongoClient mongoClient = MongoClients.create(settings);

MongoDatabase database = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, the &lt;code&gt;database&lt;/code&gt; object will be a connection to a MongoDB
server for the specified database.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;There is no callback required for &lt;code&gt;getDatabase(&amp;quot;mydb&amp;quot;)&lt;/code&gt; as there is no network IO required.
A &lt;code&gt;MongoDatabase&lt;/code&gt; instance provides methods to interact with a database
but the database might not actually exist and will only be created on the
insertion of data via some means; e.g. the creation of a collection or the insertion of documents
which do require callbacks as they require network IO.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;mongoclient&#34;&gt;MongoClient&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;MongoClient&lt;/code&gt; instance actually represents a pool of connections
to the database; you will only need one instance of class
&lt;code&gt;MongoClient&lt;/code&gt; even with multiple concurrently executing asynchronous operations.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Typically you only create one &lt;code&gt;MongoClient&lt;/code&gt; instance for a given database
cluster and use it across your application. When creating multiple instances:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All resource usage limits (max connections, etc) apply per
&lt;code&gt;MongoClient&lt;/code&gt; instance&lt;/li&gt;
&lt;li&gt;To dispose of an instance, make sure you call &lt;code&gt;MongoClient.close()&lt;/code&gt;
to clean up resources&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-a-collection&#34;&gt;Get a Collection&lt;/h2&gt;

&lt;p&gt;To get a collection to operate upon, specify the name of the collection to
the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoDatabase.html#getCollection-java.lang.String-
&#34;&gt;&lt;code&gt;getCollection(String collectionName)&lt;/code&gt;&lt;/a&gt;
method:&lt;/p&gt;

&lt;p&gt;The following example gets the collection &lt;code&gt;test&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;insert-a-document&#34;&gt;Insert a Document&lt;/h2&gt;

&lt;p&gt;Once you have the collection object, you can insert documents into the
collection. For example, consider the following JSON document; the document
contains a field &lt;code&gt;info&lt;/code&gt; which is an embedded document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{
   &amp;quot;name&amp;quot; : &amp;quot;MongoDB&amp;quot;,
   &amp;quot;type&amp;quot; : &amp;quot;database&amp;quot;,
   &amp;quot;count&amp;quot; : 1,
   &amp;quot;info&amp;quot; : {
               x : 203,
               y : 102
             }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create the document using the Java driver, use the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?org/bson/Document.html
&#34;&gt;Document&lt;/a&gt; class. You
can use this class to create the embedded document as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document doc = new Document(&amp;quot;name&amp;quot;, &amp;quot;MongoDB&amp;quot;)
               .append(&amp;quot;type&amp;quot;, &amp;quot;database&amp;quot;)
               .append(&amp;quot;count&amp;quot;, 1)
               .append(&amp;quot;info&amp;quot;, new Document(&amp;quot;x&amp;quot;, 203).append(&amp;quot;y&amp;quot;, 102));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To insert the document into the collection, use the &lt;code&gt;insertOne()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.insertOne(doc, new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Inserted!&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As &lt;code&gt;SingleResponseCallback&amp;lt;T&amp;gt;&lt;/code&gt; is a &lt;a href=&#34;https://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.8&#34;&gt;functional interface&lt;/a&gt; and it can be
implemented as a lambda for users on Java 8:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.insertOne(doc, (Void result, final Throwable t) -&amp;gt; System.out.println(&amp;quot;Inserted!&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Once the document has been inserted the &lt;code&gt;onResult&lt;/code&gt; callback will be called and it will
print &amp;ldquo;Inserted!&amp;rdquo;.  Remember, in a normal application you would always check for the presence of
errors in the &lt;code&gt;t&lt;/code&gt; variable.&lt;/p&gt;

&lt;h2 id=&#34;add-multiple-documents&#34;&gt;Add Multiple Documents&lt;/h2&gt;

&lt;p&gt;To add multiple documents, you can use the &lt;code&gt;insertMany()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The following example will add multiple documents of the form:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ &amp;quot;i&amp;quot; : value }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create the documents in a loop.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;Document&amp;gt; documents = new ArrayList&amp;lt;Document&amp;gt;();
for (int i = 0; i &amp;lt; 100; i++) {
    documents.add(new Document(&amp;quot;i&amp;quot;, i));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To insert these documents to the collection, pass the list of documents to the
&lt;code&gt;insertMany()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.insertMany(documents, new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Documents inserted!&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;count-documents-in-a-collection&#34;&gt;Count Documents in A Collection&lt;/h2&gt;

&lt;p&gt;Now that we&amp;rsquo;ve inserted 101 documents (the 100 we did in the loop, plus
the first one), we can check to see if we have them all using the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection#count--.html
&#34;&gt;count()&lt;/a&gt;
method. The following code should print &lt;code&gt;101&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.count(
  new SingleResultCallback&amp;lt;Long&amp;gt;() {
      @Override
      public void onResult(final Long count, final Throwable t) {
          System.out.println(count);
      }
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;query-the-collection&#34;&gt;Query the Collection&lt;/h2&gt;

&lt;p&gt;Use the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html#find--
&#34;&gt;find()&lt;/a&gt;
method to query the collection.&lt;/p&gt;

&lt;h3 id=&#34;find-the-first-document-in-a-collection&#34;&gt;Find the First Document in a Collection&lt;/h3&gt;

&lt;p&gt;To get the first document in the collection, call the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoIterable.html#first--
&#34;&gt;first()&lt;/a&gt;
method on the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html#find--
&#34;&gt;find()&lt;/a&gt;
operation. &lt;code&gt;collection.find().first()&lt;/code&gt; returns the first document or null rather than a cursor.
This is useful for queries that should only match a single document, or if you are
interested in the first document only.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Sometimes you will need the same or similar callbacks more than once.  In these situations
it makes sense to DRY (Do not Repeat Yourself) up your code and save the callback either
as a concrete class or assign to a variable as below:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SingleResultCallback&amp;lt;Document&amp;gt; printDocument = new SingleResultCallback&amp;lt;Document&amp;gt;() {
    @Override
    public void onResult(final Document document, final Throwable t) {
        System.out.println(document.toJson());
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The following example passes the &lt;code&gt;printDocument&lt;/code&gt; callback  to the &lt;code&gt;first&lt;/code&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().first(printDocument);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example will print the following document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;_id&amp;quot; : { &amp;quot;$oid&amp;quot; : &amp;quot;551582c558c7b4fbacf16735&amp;quot; },
  &amp;quot;name&amp;quot; : &amp;quot;MongoDB&amp;quot;, &amp;quot;type&amp;quot; : &amp;quot;database&amp;quot;, &amp;quot;count&amp;quot; : 1,
  &amp;quot;info&amp;quot; : { &amp;quot;x&amp;quot; : 203, &amp;quot;y&amp;quot; : 102 } }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; element has been added automatically by MongoDB to your
document and your value will differ from that shown. MongoDB reserves field
names that start with
&amp;ldquo;_&amp;rdquo; and &amp;ldquo;$&amp;rdquo; for internal use.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;find-all-documents-in-a-collection&#34;&gt;Find All Documents in a Collection&lt;/h3&gt;

&lt;p&gt;To retrieve all the documents in the collection, we will use the
&lt;code&gt;find()&lt;/code&gt; method. The &lt;code&gt;find()&lt;/code&gt; method returns a &lt;code&gt;FindIterable&lt;/code&gt; instance that
provides a fluent interface for chaining or controlling find operations. Use the
&lt;code&gt;forEach()&lt;/code&gt; method to provide a &lt;code&gt;Block&lt;/code&gt; to apply to each document and a callback that
is run once the iteration has finished.
The following code retrieves all documents in the collection and prints them out
(101 documents) and then finally prints out &amp;ldquo;Operation Finished!&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Block&amp;lt;Document&amp;gt; printDocumentBlock = new Block&amp;lt;Document&amp;gt;() {
    @Override
    public void apply(final Document document) {
        System.out.println(document.toJson());
    }
};
SingleResultCallback&amp;lt;Void&amp;gt; callbackWhenFinished = new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Operation Finished!&amp;quot;);
    }
};

collection.find().forEach(printDocumentBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-single-document-with-a-query-filter&#34;&gt;Get A Single Document with a Query Filter&lt;/h2&gt;

&lt;p&gt;We can create a filter to pass to the find() method to get a subset of
the documents in our collection. For example, if we wanted to find the
document for which the value of the &amp;ldquo;i&amp;rdquo; field is 71, we would do the
following (reusing the &lt;code&gt;printDocument&lt;/code&gt; callback):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import static com.mongodb.client.model.Filters.*;

collection.find(eq(&amp;quot;i&amp;quot;, 71)).first(printDocument);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;will eventually print just one document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &amp;quot;_id&amp;quot; : { &amp;quot;$oid&amp;quot; : &amp;quot;5515836e58c7b4fbc756320b&amp;quot; }, &amp;quot;i&amp;quot; : 71 }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Use the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/filters/&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/sorts/&#34;&gt;&lt;code&gt;Sorts&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/projections/&#34;&gt;&lt;code&gt;Projections&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/updates/&#34;&gt;&lt;code&gt;Updates&lt;/code&gt;&lt;/a&gt;
helpers for simple and concise ways of building up queries.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-a-set-of-documents-with-a-query&#34;&gt;Get a Set of Documents with a Query&lt;/h2&gt;

&lt;p&gt;We can use the query to get a set of documents from our collection. For
example, if we wanted to get all documents where &lt;code&gt;&amp;quot;i&amp;quot; &amp;gt; 50&lt;/code&gt;, we could
write (reusing &lt;code&gt;printDocumentBlock&lt;/code&gt; block and &lt;code&gt;callbackWhenFinished&lt;/code&gt; callback):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// now use a range query to get a larger subset
collection.find(gt(&amp;quot;i&amp;quot;, 50)).forEach(printDocumentBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which should print the documents where &lt;code&gt;i &amp;gt; 50&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We could also get a range, say &lt;code&gt;50 &amp;lt; i &amp;lt;= 100&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gt(&amp;quot;i&amp;quot;, 50), lte(&amp;quot;i&amp;quot;, 100))).forEach(printDocumentBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sorting-documents&#34;&gt;Sorting documents&lt;/h2&gt;

&lt;p&gt;We can also use the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/sorts/&#34;&gt;Sorts&lt;/a&gt; helpers to sort documents.
We add a sort to a find query by calling the &lt;code&gt;sort()&lt;/code&gt; method on a &lt;code&gt;FindIterable&lt;/code&gt;.  Below we use the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/filters/#elements&#34;&gt;&lt;code&gt;exists()&lt;/code&gt;&lt;/a&gt; helper and sort
&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/sorts/#descending&#34;&gt;&lt;code&gt;descending(&amp;quot;i&amp;quot;)&lt;/code&gt;&lt;/a&gt; helper to sort our documents:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(exists(&amp;quot;i&amp;quot;)).sort(descending(&amp;quot;i&amp;quot;)).first(printDocument);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;projecting-fields&#34;&gt;Projecting fields&lt;/h2&gt;

&lt;p&gt;Sometimes we don&amp;rsquo;t need all the data contained in a document. The &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/projections/&#34;&gt;Projections&lt;/a&gt;
helpers can be used to build the projection parameter for the find operation and limit the fields returned.&lt;br /&gt;
Below we&amp;rsquo;ll sort the collection, exclude the &lt;code&gt;_id&lt;/code&gt; field and output the first matching document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().projection(excludeId()).first(printDocument);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;aggregations&#34;&gt;Aggregations&lt;/h2&gt;

&lt;p&gt;Sometimes we need to aggregate the data stored in MongoDB. The &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/aggregation/&#34;&gt;&lt;code&gt;Aggregates&lt;/code&gt;&lt;/a&gt; helper provides
builders for each of type of aggregation stage.&lt;/p&gt;

&lt;p&gt;Below we&amp;rsquo;ll do a simple two step transformation that will calculate the value of &lt;code&gt;i * 10&lt;/code&gt;. First we find all Documents
where &lt;code&gt;i &amp;gt; 0&lt;/code&gt; by using the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/aggregation/#match&#34;&gt;&lt;code&gt;Aggregates.match&lt;/code&gt;&lt;/a&gt;
helper. Then we reshape the document by using &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/aggregation/#project&#34;&gt;&lt;code&gt;Aggregates.project&lt;/code&gt;&lt;/a&gt;
in conjunction with the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/multiply/
&#34;&gt;&lt;code&gt;$multiply&lt;/code&gt;&lt;/a&gt; operator to calculate the &amp;ldquo;&lt;code&gt;ITimes10&lt;/code&gt;&amp;rdquo;
value:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.aggregate(asList(
    match(gt(&amp;quot;i&amp;quot;, 0)),
    project(Document.parse(&amp;quot;{ITimes10: {$multiply: [&#39;$i&#39;, 10]}}&amp;quot;)))
).forEach(printDocumentBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/aggregation/#group&#34;&gt;&lt;code&gt;$group&lt;/code&gt;&lt;/a&gt; operations use the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/client/model/Accumulators.html
&#34;&gt;&lt;code&gt;Accumulators&lt;/code&gt;&lt;/a&gt; helper for any
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/group/#accumulator-operator
&#34;&gt;accumulator operations&lt;/a&gt;. Below we sum up all the values of
&lt;code&gt;i&lt;/code&gt; by using the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/aggregation/#group&#34;&gt;&lt;code&gt;Aggregates.group&lt;/code&gt;&lt;/a&gt; helper in conjunction with the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/client/model/Accumulators#sum-java.lang.String-TExpression-.html
&#34;&gt;&lt;code&gt;Accumulators.sum&lt;/code&gt;&lt;/a&gt; helper:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.aggregate(singletonList(group(null, sum(&amp;quot;total&amp;quot;, &amp;quot;$i&amp;quot;)))).first(printDocument);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Currently, there are no helpers for &lt;a href=&#34;http://docs.mongodb.org/manual/meta/aggregation-quick-reference/#aggregation-expressions&#34;&gt;aggregation expressions&lt;/a&gt;.
Use the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/bson/extended-json/&#34;&gt;&lt;code&gt;Document.parse()&lt;/code&gt;&lt;/a&gt; helper to quickly build aggregation expressions from extended JSON.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;updating-documents&#34;&gt;Updating documents&lt;/h2&gt;

&lt;p&gt;There are numerous &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update-field/&#34;&gt;update operators&lt;/a&gt;
supported by MongoDB.&lt;/p&gt;

&lt;p&gt;To update at most a single document (may be 0 if none match the filter), use the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html#updateOne-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateOne&lt;/code&gt;&lt;/a&gt;
method to specify the filter and the update document. Here we use the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/updates/#set&#34;&gt;&lt;code&gt;Updates.set&lt;/code&gt;&lt;/a&gt; helper to update the first document that meets the filter &lt;code&gt;i&lt;/code&gt; equals &lt;code&gt;10&lt;/code&gt; and set the value of &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;110&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateOne(eq(&amp;quot;i&amp;quot;, 10), set(&amp;quot;i&amp;quot;, 110),
    new SingleResultCallback&amp;lt;UpdateResult&amp;gt;() {
        @Override
        public void onResult(final UpdateResult result, final Throwable t) {
            System.out.println(result.getModifiedCount());
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To update all documents matching the filter use the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateMany&lt;/code&gt;&lt;/a&gt;
method. Here we use the &lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/builders/updates/#increment&#34;&gt;&lt;code&gt;Updates.inc&lt;/code&gt;&lt;/a&gt; helper to increment the value of &lt;code&gt;i&lt;/code&gt; by &lt;code&gt;100&lt;/code&gt;
where &lt;code&gt;i&lt;/code&gt; is less than &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateMany(lt(&amp;quot;i&amp;quot;, 100), inc(&amp;quot;i&amp;quot;, 100),
    new SingleResultCallback&amp;lt;UpdateResult&amp;gt;() {
        @Override
        public void onResult(final UpdateResult result, final Throwable t) {
            System.out.println(result.getModifiedCount());
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The update methods return an &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/client/result/UpdateResult.html
&#34;&gt;&lt;code&gt;UpdateResult&lt;/code&gt;&lt;/a&gt;,
which provides information about the operation including the number of documents modified by the update.&lt;/p&gt;

&lt;h2 id=&#34;deleting-documents&#34;&gt;Deleting documents&lt;/h2&gt;

&lt;p&gt;To delete at most a single document (may be 0 if none match the filter) use the &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html#deleteOne-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteOne&lt;/code&gt;&lt;/a&gt;
method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteOne(eq(&amp;quot;i&amp;quot;, 110), new SingleResultCallback&amp;lt;DeleteResult&amp;gt;() {
    @Override
    public void onResult(final DeleteResult result, final Throwable t) {
        System.out.println(result.getDeletedCount());
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To delete all documents matching the filter use the
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/async/client/MongoCollection.html#deleteMany-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteMany&lt;/code&gt;&lt;/a&gt; method. Here we delete
all documents where &lt;code&gt;i&lt;/code&gt; is greater or equal to &lt;code&gt;100&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteMany(gte(&amp;quot;i&amp;quot;, 100), new SingleResultCallback&amp;lt;DeleteResult&amp;gt;() {
    @Override
    public void onResult(final DeleteResult result, final Throwable t) {
        System.out.println(result.getDeletedCount());
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The delete methods return a &lt;a href=&#34;http://api.mongodb.org/java/3.2/?com/mongodb/client/result/DeleteResult.html
&#34;&gt;&lt;code&gt;DeleteResult&lt;/code&gt;&lt;/a&gt;,
which provides information about the operation including the number of documents deleted.&lt;/p&gt;

&lt;h2 id=&#34;bulk-operations&#34;&gt;Bulk operations&lt;/h2&gt;

&lt;p&gt;These commands allow for the execution of bulk
insert/update/delete operations. There are two types of bulk operations:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ordered bulk operations.&lt;/p&gt;

&lt;p&gt;Executes all the operation in order and error out on the first write error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unordered bulk operations.&lt;/p&gt;

&lt;p&gt;Executes all the operations and reports any the errors.&lt;/p&gt;

&lt;p&gt;Unordered bulk operations do not guarantee order of execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let&amp;rsquo;s look at two simple examples using ordered and unordered
operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SingleResultCallback&amp;lt;BulkWriteResult&amp;gt; printBatchResult = new SingleResultCallback&amp;lt;BulkWriteResult&amp;gt;() {
    @Override
    public void onResult(final BulkWriteResult result, final Throwable t) {
        System.out.println(result);
    }
};

// 2. Ordered bulk operation - order is guaranteed
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))),
  printBatchResult
);


 // 2. Unordered bulk operation - no guarantee of order of operation
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))),
  new BulkWriteOptions().ordered(false),
  printBatchResult
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Use of the bulkWrite methods is not recommended when connected to pre-2.6 MongoDB servers, as this was the first server version to support bulk write commands for insert, update, and delete in a way that allows the driver to implement the correct semantics for BulkWriteResult and BulkWriteException. The methods will still work for pre-2.6 servers, but performance will suffer, as each write operation has to be executed one at a time.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/mongo-java-driver/3.2/driver-async/reference/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.2/driver-async/reference/</guid>
      <description>

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;The reference documentation for the Java driver focuses on high-level documentation and use-cases. The Javadoc-generated API reference is
&lt;a href=&#34;http://api.mongodb.org/java/3.2/?
&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/connecting/&#34;&gt;Connecting&lt;/a&gt;: Documentation of the driver&amp;rsquo;s support for connecting to MongoDB servers&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/crud/&#34;&gt;CRUD&lt;/a&gt;: Documentation of the driver&amp;rsquo;s support for CRUD operations&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/mongo-java-driver/3.2/mongo-java-driver/3.2/driver-async/reference/management/&#34;&gt;Management&lt;/a&gt;: Documentation of the driver&amp;rsquo;s support for logging and monitoring of its
internal state&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
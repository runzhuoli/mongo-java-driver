<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Driver-Asyncs on MongoDB Java Driver</title>
    <link>/mongo-java-driver/3.4/driver-async/</link>
    <description>Recent content in Driver-Asyncs on MongoDB Java Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Aug 2016 14:13:59 -0400</lastBuildDate>
    <atom:link href="/mongo-java-driver/3.4/driver-async/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Create Indexes</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/indexes/</link>
      <pubDate>Mon, 01 Aug 2016 14:13:59 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/indexes/</guid>
      <description>

&lt;h2 id=&#34;create-indexes&#34;&gt;Create Indexes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/indexes
&#34;&gt;Indexes&lt;/a&gt; support the efficient execution of queries in MongoDB. To create an &lt;a href=&#34;http://docs.mongodb.org/manual/indexes
&#34;&gt;index&lt;/a&gt; on a field or fields, pass an index specification document to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#createIndex-org.bson.conversions.Bson-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;MongoCollection.createIndex&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The MongoDB Java Async Driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/indexes/&#34;&gt;&lt;code&gt;Indexes&lt;/code&gt;&lt;/a&gt; helper class that
provides static factory methods to create index specification
documents for the various MongoDB Index key types.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;MongoDB only creates an index if an index of the same specification does not already exist.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;consideration&#34;&gt;Consideration&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Always check for errors in any &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/SingleResultCallback.html&#34;&gt;&lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; implementation
and handle them appropriately.&lt;/p&gt;

&lt;p&gt;For sake of brevity, this tutorial omits the error check logic in the code examples.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.Block;
import com.mongodb.async.SingleResultCallback;
import com.mongodb.async.client.MongoClient;
import com.mongodb.async.client.MongoClients;
import com.mongodb.async.client.MongoCollection;
import com.mongodb.async.client.MongoDatabase;
import com.mongodb.client.model.*;
import org.bson.Document;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following callback code which the examples in the tutorials will use:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SingleResultCallback&amp;lt;String&amp;gt; callbackWhenFinished = new SingleResultCallback&amp;lt;String&amp;gt;() {
           @Override
           public void onResult(final String result, final Throwable t) {
               System.out.println(&amp;quot;Operation Finished!&amp;quot;);
           }
       };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; and a &lt;code&gt;MongoCollection&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ascending-index&#34;&gt;Ascending Index&lt;/h2&gt;

&lt;p&gt;To create a specification for an ascending index, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html
&#34;&gt;&lt;code&gt;Indexes.ascending&lt;/code&gt;&lt;/a&gt; static helper methods.&lt;/p&gt;

&lt;h3 id=&#34;single-ascending-index&#34;&gt;Single Ascending Index&lt;/h3&gt;

&lt;p&gt;The following example creates an ascending index on the
&lt;code&gt;name&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.ascending(&amp;quot;name&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compound-ascending-index&#34;&gt;Compound Ascending Index&lt;/h3&gt;

&lt;p&gt;The following example creates an ascending &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-compound
&#34;&gt;compound index&lt;/a&gt;  on the &lt;code&gt;stars&lt;/code&gt; field and the &lt;code&gt;name&lt;/code&gt;
 field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.ascending(&amp;quot;stars&amp;quot;, &amp;quot;name&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For an alternative way to create a compound index, see &lt;a href=&#34;#compound-indexes&#34;&gt;Compound Indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;descending-index&#34;&gt;Descending Index&lt;/h2&gt;

&lt;p&gt;To create a specification of a descending index, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html
&#34;&gt;&lt;code&gt;Indexes.descending&lt;/code&gt;&lt;/a&gt; static helper methods.&lt;/p&gt;

&lt;h3 id=&#34;single-descending-key-index&#34;&gt;Single Descending Key Index&lt;/h3&gt;

&lt;p&gt;The following example creates a descending index on the &lt;code&gt;stars&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.descending(&amp;quot;stars&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compound-descending-key-index&#34;&gt;Compound Descending Key Index&lt;/h3&gt;

&lt;p&gt;The following example creates a descending &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-compound
&#34;&gt;compound index&lt;/a&gt; on the &lt;code&gt;stars&lt;/code&gt; field and the &lt;code&gt;name&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.descending(&amp;quot;stars&amp;quot;, &amp;quot;name&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For an alternative way to create a compound index, see &lt;a href=&#34;#compound-indexes&#34;&gt;Compound Indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;compound-indexes&#34;&gt;Compound Indexes&lt;/h2&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-compound
&#34;&gt;compound index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html
&#34;&gt;&lt;code&gt;Indexes.compoundIndex&lt;/code&gt;&lt;/a&gt; static helper methods.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;To create a specification for a compound index where all the keys are ascending, you can use the &lt;a href=&#34;#compound-ascending-key-index&#34;&gt;&lt;code&gt;ascending()&lt;/code&gt;&lt;/a&gt; method. To create a specification for a compound index where all the keys are descending, you can use the &lt;a href=&#34;##compound-descending-key-index&#34;&gt;&lt;code&gt;descending()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The following example creates a compound index with the &lt;code&gt;stars&lt;/code&gt; field in descending order and the &lt;code&gt;name&lt;/code&gt; field in ascending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.compoundIndex(Indexes.descending(&amp;quot;stars&amp;quot;),
                       Indexes.ascending(&amp;quot;name&amp;quot;)), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;text-indexes&#34;&gt;Text Indexes&lt;/h2&gt;

&lt;p&gt;MongoDB provides &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-text
&#34;&gt;text indexes&lt;/a&gt; to support text search of string content. Text indexes can include any field whose value is a string or an array of string elements. To create a specification for a text index, use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#text-java.lang.String-
&#34;&gt;&lt;code&gt;Indexes.text&lt;/code&gt;&lt;/a&gt; static helper method.&lt;/p&gt;

&lt;p&gt;The following example creates a text index on the &lt;code&gt;name&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.text(&amp;quot;name&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hashed-index&#34;&gt;Hashed Index&lt;/h2&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-hashed
&#34;&gt;hashed index&lt;/a&gt; index, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#hashed-java.lang.String-
&#34;&gt;&lt;code&gt;Indexes.hashed&lt;/code&gt;&lt;/a&gt; static helper method.&lt;/p&gt;

&lt;p&gt;The following example creates a hashed index on the &lt;code&gt;_id&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.hashed(&amp;quot;_id&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;geospatial-indexes&#34;&gt;Geospatial Indexes&lt;/h2&gt;

&lt;p&gt;To support geospatial queries, MongoDB supports various
&lt;a href=&#34;http://docs.mongodb.org/manual/applications/geospatial-indexes
&#34;&gt;geospatial indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;2dsphere&#34;&gt;&lt;code&gt;2dsphere&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/2dsphere
&#34;&gt;&lt;code&gt;2dsphere&lt;/code&gt; index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#geo2dsphere-java.lang.String...-
&#34;&gt;&lt;code&gt;Indexes.geo2dsphere&lt;/code&gt;&lt;/a&gt; static helper methods.&lt;/p&gt;

&lt;p&gt;The following example creates a &lt;code&gt;2dsphere&lt;/code&gt; index on the &lt;code&gt;&amp;quot;contact.location&amp;quot;&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.geo2dsphere(&amp;quot;contact.location&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2d&#34;&gt;&lt;code&gt;2d&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/2d/
&#34;&gt;&lt;code&gt;2d&lt;/code&gt; index&lt;/a&gt; index, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#geo2d-java.lang.String-
&#34;&gt;&lt;code&gt;Indexes.geo2d&lt;/code&gt;&lt;/a&gt;
static helper method.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;A 2d index is for data stored as points on a two-dimensional plane
and is intended for legacy coordinate pairs used in MongoDB 2.2 and
earlier.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The following example creates a &lt;code&gt;2d&lt;/code&gt; index on the &lt;code&gt;&amp;quot;contact.location&amp;quot;&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.geo2d(&amp;quot;contact.location&amp;quot;), callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;geohaystack&#34;&gt;geoHaystack&lt;/h3&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/geohaystack/
&#34;&gt;&lt;code&gt;geoHaystack&lt;/code&gt; index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#geoHaystack-java.lang.String-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;Indexes.geoHaystack&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;geoHaystack&lt;/code&gt; indexes can improve performance on queries that use flat geometries.&lt;/p&gt;

&lt;p&gt;The following example creates a &lt;code&gt;geoHaystack&lt;/code&gt; index on the &lt;code&gt;contact.location&lt;/code&gt; field and an ascending index on the &lt;code&gt;stars&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;IndexOptions haystackOption = new IndexOptions().bucketSize(1.0);
collection.createIndex(
         Indexes.geoHaystack(&amp;quot;contact.location&amp;quot;, Indexes.ascending(&amp;quot;stars&amp;quot;)),
         haystackOption, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To query a haystack index, use the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command/geoSearch
&#34;&gt;&lt;code&gt;geoSearch&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;

&lt;h2 id=&#34;indexoptions&#34;&gt;IndexOptions&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.client.model.IndexOptions;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the index specification document, the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#createIndex-org.bson.conversions.Bson-com.mongodb.client.model.IndexOptions-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;createIndex()&lt;/code&gt;&lt;/a&gt; method can take an index options document, such as to create unique indexes or partial indexes.&lt;/p&gt;

&lt;p&gt;The Java Driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/IndexOptions.html
&#34;&gt;IndexOptions&lt;/a&gt; class to specify various index options.&lt;/p&gt;

&lt;h3 id=&#34;unique-index&#34;&gt;Unique Index&lt;/h3&gt;

&lt;p&gt;The following specifies a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/IndexOptions.html#unique-boolean-
&#34;&gt;&lt;code&gt;unique(true)&lt;/code&gt;&lt;/a&gt; option to create a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-unique
&#34;&gt;unique index&lt;/a&gt; on the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;stars&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;IndexOptions indexOptions = new IndexOptions().unique(true);
collection.createIndex(Indexes.ascending(&amp;quot;name&amp;quot;, &amp;quot;stars&amp;quot;),
                       indexOptions,
                       callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on unique indexes, see &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-unique
&#34;&gt;Unique Indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;partial-index&#34;&gt;Partial Index&lt;/h3&gt;

&lt;p&gt;To create a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-partial/
&#34;&gt;partial index&lt;/a&gt;, include a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/IndexOptions.html#partialFilterExpression-org.bson.conversions.Bson-
&#34;&gt;partialFilterExpression&lt;/a&gt; as an index option.&lt;/p&gt;

&lt;p&gt;The following example creates a partial index on documents that have &lt;code&gt;status&lt;/code&gt; field equal to &lt;code&gt;&amp;quot;A&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;IndexOptions partialFilterIndexOptions = new IndexOptions()
                       .partialFilterExpression(Filters.exists(&amp;quot;contact.email&amp;quot;));
collection.createIndex(Indexes.descending(&amp;quot;name&amp;quot;, &amp;quot;stars&amp;quot;),
                       partialFilterIndexOptions,
                       callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on partial indexes, see &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-partial/
&#34;&gt;Partial Indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;get-a-list-of-indexes-on-a-collection&#34;&gt;Get a List of Indexes on a Collection&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;listIndexes()&lt;/code&gt; method to get a list of indexes. The following lists the indexes on the collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Block&amp;lt;Document&amp;gt; printBlock = new Block&amp;lt;Document&amp;gt;() {
            @Override
            public void apply(final Document document) {
                System.out.println(document.toJson());
            }
        };

collection.listIndexes().forEach(printBlock, new SingleResultCallback&amp;lt;Void&amp;gt;() {
            @Override
            public void onResult(final Void result, final Throwable t) {
                System.out.println(&amp;quot;Operation Finished!&amp;quot;);
            }
        });
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/aggregation/</link>
      <pubDate>Mon, 01 Aug 2016 11:35:05 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/aggregation/</guid>
      <description>

&lt;h2 id=&#34;aggregation-framework&#34;&gt;Aggregation Framework&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual//core/aggregation-pipeline
&#34;&gt;aggregation pipeline&lt;/a&gt; is a framework for data aggregation, modeled on the concept of data processing pipelines.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.Block;
import com.mongodb.async.client.*;
import com.mongodb.async.SingleResultCallback;

import com.mongodb.client.model.*;

import org.bson.Document;

import java.util.Arrays;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Include the following callback code which the examples in the tutorials will use:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SingleResultCallback&amp;lt;Void&amp;gt; callbackWhenFinished = new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Operation Finished!&amp;quot;);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Include the following code which the examples in the tutorials will use to print the results of the aggregation:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Block&amp;lt;Document&amp;gt; printBlock = new Block&amp;lt;Document&amp;gt;() {
    @Override
    public void apply(final Document document) {
        System.out.println(document.toJson());
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; and a &lt;code&gt;MongoCollection&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;perform-aggregation&#34;&gt;Perform Aggregation&lt;/h2&gt;

&lt;p&gt;To perform aggregation, pass a list of &lt;a href=&#34;http://docs.mongodb.org/manual/meta/aggregation-quick-reference
&#34;&gt;aggregation stages&lt;/a&gt; to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#aggregate-java.util.List-
&#34;&gt;&lt;code&gt;MongoCollection.aggregate()&lt;/code&gt;&lt;/a&gt; method.
The Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Aggregates.html
&#34;&gt;&lt;code&gt;Aggregates&lt;/code&gt;&lt;/a&gt; helper class that contains builders for aggregation stages.&lt;/p&gt;

&lt;p&gt;In the following example, the aggregation pipeline&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First uses a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/match/
&#34;&gt;&lt;code&gt;$match&lt;/code&gt;&lt;/a&gt; stage to filter for documents whose &lt;code&gt;categories&lt;/code&gt; array field contains the element &lt;code&gt;Bakery&lt;/code&gt;. The example uses &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/aggregation/#match&#34;&gt;&lt;code&gt;Aggregates.match&lt;/code&gt;&lt;/a&gt; to build the &lt;code&gt;$match&lt;/code&gt; stage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then, uses  a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/group/
&#34;&gt;&lt;code&gt;$group&lt;/code&gt;&lt;/a&gt; stage to group the matching documents by the &lt;code&gt;stars&lt;/code&gt; field, accumulating a count of documents for each distinct value of &lt;code&gt;stars&lt;/code&gt;. The example uses &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/aggregation/#group&#34;&gt;&lt;code&gt;Aggregates.group&lt;/code&gt;&lt;/a&gt; to build the &lt;code&gt;$group&lt;/code&gt; stage and &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Accumulators#sum-java.lang.String-TExpression-.html
&#34;&gt;&lt;code&gt;Accumulators.sum&lt;/code&gt;&lt;/a&gt; to build the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/group/#accumulator-operator
&#34;&gt;accumulator expression&lt;/a&gt;.  For the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation-group/
&#34;&gt;accumulator expressions&lt;/a&gt; for use within the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/group/
&#34;&gt;&lt;code&gt;$group&lt;/code&gt;&lt;/a&gt; stage, the Java driver provides &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Accumulators.html
&#34;&gt;&lt;code&gt;Accumulators&lt;/code&gt;&lt;/a&gt; helper class.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.aggregate(Arrays.asList(
                        Aggregates.match(Filters.eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)),
                        Aggregates.group(&amp;quot;$stars&amp;quot;, Accumulators.sum(&amp;quot;count&amp;quot;, 1))))
          .forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;use-aggregation-expressions&#34;&gt;Use Aggregation Expressions&lt;/h3&gt;

&lt;p&gt;For &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation-group/
&#34;&gt;$group accumulator expressions&lt;/a&gt;, the Java driver provides &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Accumulators.html
&#34;&gt;&lt;code&gt;Accumulators&lt;/code&gt;&lt;/a&gt; helper class. For other &lt;a href=&#34;http://docs.mongodb.org/manual/meta/aggregation-quick-reference/#aggregation-expressions
&#34;&gt;aggregation expressions&lt;/a&gt;, manually build the expression &lt;code&gt;Document&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the following example, the aggregation pipeline uses a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/project/
&#34;&gt;&lt;code&gt;$project&lt;/code&gt;&lt;/a&gt; stage to return only the &lt;code&gt;name&lt;/code&gt; field and the calculated field &lt;code&gt;firstCategory&lt;/code&gt; whose value is the first element in the &lt;code&gt;categories&lt;/code&gt; array. The example uses &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/aggregation/#project&#34;&gt;&lt;code&gt;Aggregates.project&lt;/code&gt;&lt;/a&gt; and various
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Projections.html
&#34;&gt;&lt;code&gt;Projections&lt;/code&gt;&lt;/a&gt; methods to build the &lt;code&gt;$project&lt;/code&gt; stage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.aggregate(Arrays.asList(Aggregates.project(Projections.fields(
                                        Projections.excludeId(),
                                        Projections.include(&amp;quot;name&amp;quot;),
                                        Projections.computed(
                                                &amp;quot;firstCategory&amp;quot;,
                                                new Document(&amp;quot;$arrayElemAt&amp;quot;,
                                                    Arrays.asList(&amp;quot;$categories&amp;quot;, 0)))))))
          .forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Geospatial Search</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/geospatial-search/</link>
      <pubDate>Sun, 12 Jun 2016 17:26:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/geospatial-search/</guid>
      <description>

&lt;h2 id=&#34;geospatial-search&#34;&gt;Geospatial Search&lt;/h2&gt;

&lt;p&gt;To support geospatial queries, MongoDB provides various geospatial indexes as well as &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query-geospatial/
&#34;&gt;geospatial query operators&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.Block;
import com.mongodb.async.SingleResultCallback;
import com.mongodb.async.client.MongoClient;
import com.mongodb.async.client.MongoClients;
import com.mongodb.async.client.MongoCollection;
import com.mongodb.async.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Indexes;
import com.mongodb.client.model.geojson.Point;
import com.mongodb.client.model.geojson.Position;
import org.bson.Document;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Include the following callback code which the examples in the tutorials will use:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SingleResultCallback&amp;lt;Void&amp;gt; callbackWhenFinished = new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Operation Finished!&amp;quot;);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Include the following code which the examples in the tutorials will use to print the results of the aggregation:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Block&amp;lt;Document&amp;gt; printBlock = new Block&amp;lt;Document&amp;gt;() {
    @Override
    public void apply(final Document document) {
        System.out.println(document.toJson());
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; and a &lt;code&gt;MongoCollection&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-the-2dsphere-index&#34;&gt;Create the &lt;code&gt;2dsphere&lt;/code&gt; Index&lt;/h2&gt;

&lt;p&gt;To create a &lt;a href=&#34;http://docs.mongodb.org/manual/core/2dsphere
&#34;&gt;&lt;code&gt;2dsphere&lt;/code&gt; index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#geo2dsphere-java.lang.String...-
&#34;&gt;&lt;code&gt;Indexes.geo2dsphere&lt;/code&gt;&lt;/a&gt;
helper to create a specification for the &lt;code&gt;2dsphere&lt;/code&gt; index and pass to &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#createIndex-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;MongoCollection.createIndex()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example creates a &lt;code&gt;2dsphere&lt;/code&gt; index on the &lt;code&gt;&amp;quot;contact.location&amp;quot;&lt;/code&gt; field for the &lt;code&gt;restaurants&lt;/code&gt; collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.geo2dsphere(&amp;quot;contact.location&amp;quot;), new SingleResultCallback&amp;lt;String&amp;gt;() {
    @Override
    public void onResult(final String result, final Throwable t) {
        System.out.println(&amp;quot;Operation Finished!&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;query-for-locations-near-a-geojson-point&#34;&gt;Query for Locations Near a GeoJSON Point&lt;/h2&gt;

&lt;p&gt;MongoDB provides various &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?reference/operator/query-geospatial.html
&#34;&gt;geospatial query operators&lt;/a&gt;. To facilitate the creation of geospatial queries filters, the Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; class and the &lt;code&gt;com.mongodb.client.model.geojson&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;The following example returns documents that are at least 1000 meters from and at most 5000 meters from the specified GeoJSON point &lt;code&gt;com.mongodb.client.model.geojson.Point&lt;/code&gt;, sorted from nearest to farthest:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Point refPoint = new Point(new Position(-73.9667, 40.78));
collection.find(Filters.near(&amp;quot;contact.location&amp;quot;, refPoint, 5000.0, 1000.0))
          .forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Text Search</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/text-search/</link>
      <pubDate>Tue, 07 Jun 2016 23:28:50 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/text-search/</guid>
      <description>

&lt;h2 id=&#34;text-search&#34;&gt;Text Search&lt;/h2&gt;

&lt;p&gt;MongoDB supports query operations that perform a &lt;a href=&#34;http://docs.mongodb.org/manual/text-search
&#34;&gt;text search&lt;/a&gt; of string content. To perform text search, MongoDB uses a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-text
&#34;&gt;text index&lt;/a&gt; and the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text
&#34;&gt;&lt;code&gt;$text&lt;/code&gt; query operator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html#text-java.lang.String-com.mongodb.client.model.TextSearchOptions-
&#34;&gt;&lt;code&gt;Filters.text()&lt;/code&gt;&lt;/a&gt; helper to facilitate the creation of text search query filters.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.Block;
import com.mongodb.async.SingleResultCallback;
import com.mongodb.async.client.MongoClient;
import com.mongodb.async.client.MongoClients;
import com.mongodb.async.client.MongoCollection;
import com.mongodb.async.client.MongoDatabase;
import com.mongodb.client.model.*;
import org.bson.Document;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Include the following code which the examples in the tutorials will use to print the results of the aggregation:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Block&amp;lt;Document&amp;gt; printBlock = new Block&amp;lt;Document&amp;gt;() {
    @Override
    public void apply(final Document document) {
        System.out.println(document.toJson());
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; and a &lt;code&gt;MongoCollection&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-the-text-index&#34;&gt;Create the &lt;code&gt;text&lt;/code&gt; Index&lt;/h2&gt;

&lt;p&gt;To create a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-text
&#34;&gt;text index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/indexes/#text-index&#34;&gt;&lt;code&gt;Indexes.text&lt;/code&gt;&lt;/a&gt;
static helper to create a specification for a text index and pass to &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#createIndex-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;MongoCollection.createIndex()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example creates a text index on the &lt;code&gt;name&lt;/code&gt; field for the &lt;code&gt;restaurants&lt;/code&gt; collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.text(&amp;quot;name&amp;quot;), new SingleResultCallback&amp;lt;String&amp;gt;() {
    @Override
    public void onResult(final String result, final Throwable t) {
        System.out.println(&amp;quot;Operation Finished!&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;perform-text-search&#34;&gt;Perform Text Search&lt;/h2&gt;

&lt;p&gt;To perform text search, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html#text-java.lang.String-com.mongodb.client.model.TextSearchOptions-
&#34;&gt;&lt;code&gt;Filters.text()&lt;/code&gt;&lt;/a&gt; helper to specify the text search query filter.&lt;/p&gt;

&lt;p&gt;For example, the following code performs a text search on the &lt;code&gt;name&lt;/code&gt; field for the word &lt;code&gt;&amp;quot;bakery&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;coffee&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.count(Filters.text(&amp;quot;bakery coffee&amp;quot;), new SingleResultCallback&amp;lt;Long&amp;gt;()  {
    @Override
    public void onResult(final Long count, final Throwable t) {
        System.out.println(&amp;quot;Text search matches: &amp;quot; +count);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example should print the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;Text search matches: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on the text search, see &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text
&#34;&gt;&lt;code&gt;$text&lt;/code&gt; operator&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;text-score&#34;&gt;Text Score&lt;/h3&gt;

&lt;p&gt;For each matching document, text search assigns a score, representing the relevance of a document to the specified text search query filter. To return and sort by score, use the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text/#sort-by-text-search-score
&#34;&gt;&lt;code&gt;$meta&lt;/code&gt;&lt;/a&gt; operator in the projection document and the sort expression.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(Filters.text(&amp;quot;bakery cafe&amp;quot;))
                       .projection(Projections.metaTextScore(&amp;quot;score&amp;quot;))
                       .sort(Sorts.metaTextScore(&amp;quot;score&amp;quot;))
          .forEach(printBlock, new SingleResultCallback&amp;lt;Void&amp;gt;() {
              @Override
              public void onResult(final Void result, final Throwable t) {
                  System.out.println(&amp;quot;Operation Finished!&amp;quot;);
              }
          });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;specify-a-text-search-option&#34;&gt;Specify a Text Search Option&lt;/h3&gt;

&lt;p&gt;The  &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html#text-java.lang.String-com.mongodb.client.model.TextSearchOptions-
&#34;&gt;&lt;code&gt;Filters.text()&lt;/code&gt;&lt;/a&gt; helper can accept various &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text
&#34;&gt;text search options&lt;/a&gt;. The Java driver provides &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/TextSearchOptions.html
&#34;&gt;&lt;code&gt;TextSearchOptions&lt;/code&gt;&lt;/a&gt; class to specify these options.&lt;/p&gt;

&lt;p&gt;For example, the following text search specifies the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/text-search-languages
&#34;&gt;text search language&lt;/a&gt; option when performing text search for the word &lt;code&gt;cafe&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.count(Filters.text(&amp;quot;cafe&amp;quot;,
      new TextSearchOptions().language(&amp;quot;english&amp;quot;)),
      new SingleResultCallback&amp;lt;Long&amp;gt;()  {
            @Override
            public void onResult(final Long count, final Throwable t) {
                System.out.println(&amp;quot;Text search matches: &amp;quot; +count);
            }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example should print the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;Text search matches: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about text search see the following sections in the MongoDB Server Manual:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual//reference/operator/query/text
&#34;&gt;&lt;code&gt;$text&lt;/code&gt; query operator&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual//core/index-text
&#34;&gt;&lt;code&gt;text&lt;/code&gt; index&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/reference/text-search-languages
&#34;&gt;Text Search Languages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Run Commands</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/commands/</link>
      <pubDate>Tue, 31 May 2016 13:07:04 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/commands/</guid>
      <description>

&lt;h2 id=&#34;run-commands&#34;&gt;Run Commands&lt;/h2&gt;

&lt;p&gt;Not all commands have a specific helper. However, you can run any &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command
&#34;&gt;MongoDB command&lt;/a&gt; by using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoDatabase.html#runCommand-org.bson.conversions.Bson-com.mongodb.ReadPreference-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;runCommand()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; import com.mongodb.async.client.MongoClient;
 import com.mongodb.async.client.MongoClients;
 import com.mongodb.async.client.MongoDatabase;
 import com.mongodb.async.SingleResultCallback;
 import org.bson.Document;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;run-buildinfo-and-collstats-commands&#34;&gt;Run &lt;code&gt;buildInfo&lt;/code&gt; and &lt;code&gt;collStats&lt;/code&gt; Commands&lt;/h2&gt;

&lt;p&gt;To run a command, construct a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;
object that specifies the command and pass it to the &lt;code&gt;runCommand()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The following runs the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command/buildInfo
&#34;&gt;&lt;code&gt;buildInfo&lt;/code&gt;&lt;/a&gt; command and the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command/collStats
&#34;&gt;&lt;code&gt;collStats&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.runCommand(new Document(&amp;quot;buildInfo&amp;quot;, 1), new SingleResultCallback&amp;lt;Document&amp;gt;() {
    @Override
    public void onResult(final Document buildInfo, final Throwable t) {
        System.out.println(buildInfo);
    }
});

database.runCommand(new Document(&amp;quot;collStats&amp;quot;, 1), new SingleResultCallback&amp;lt;Document&amp;gt;() {
    @Override
    public void onResult(final Document collStats, final Throwable t) {
        System.out.println(collStats);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a list of available MongoDB commands, see &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command
&#34;&gt;MongoDB commands&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/</link>
      <pubDate>Sun, 29 May 2016 12:49:33 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/</guid>
      <description>

&lt;h2 id=&#34;java-async-driver-tutorials&#34;&gt;Java Async Driver Tutorials&lt;/h2&gt;

&lt;p&gt;The tutorials in this section provide examples of some frequently used operations. This section is not meant to be an exhaustive list of all operations available in the Java Async driver.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/databases-collections/&#34;&gt;Databases and Collections&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/indexes/&#34;&gt;Create Indexes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/perform-read-operations/&#34;&gt;Read Operations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/perform-write-operations/&#34;&gt;Write Operations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/aggregation/&#34;&gt;Aggregation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/text-search/&#34;&gt;Text Search&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/geospatial-search/&#34;&gt;Geospatial Search&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/gridfs/&#34;&gt;GridFS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/commands/&#34;&gt;Run Commands&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bulk Writes</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/bulk-writes/</link>
      <pubDate>Sun, 29 May 2016 12:47:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/bulk-writes/</guid>
      <description>

&lt;h2 id=&#34;bulk-operations&#34;&gt;Bulk operations&lt;/h2&gt;

&lt;p&gt;Starting in version 2.6, MongoDB servers support bulk write commands for insert, update, and delete in a way that allows the driver to implement the correct semantics for BulkWriteResult and BulkWriteException.&lt;/p&gt;

&lt;p&gt;There are two types of bulk operations, ordered and unordered bulk operations.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ordered bulk operations execute all the operation in order and error out on the first write error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unordered bulk operations execute all the operations and report any the errors. Unordered bulk operations do not guarantee order of execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following code provide examples using ordered and unordered
operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Callback
SingleResultCallback&amp;lt;BulkWriteResult&amp;gt; printBatchResult = new SingleResultCallback&amp;lt;BulkWriteResult&amp;gt;() {
    @Override
    public void onResult(final BulkWriteResult result, final Throwable t) {
        System.out.println(result);
    }
};

// 1. Ordered bulk operation - order is guaranteed
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))),
  printBatchResult
);


 // 2. Unordered bulk operation - no guarantee of order of operation
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))),
  new BulkWriteOptions().ordered(false),
  printBatchResult
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Use of the bulkWrite methods is not recommended when connected to pre-2.6 MongoDB servers, as this was the first server version to support bulk write commands for insert, update, and delete in a way that allows the driver to implement the correct semantics for BulkWriteResult and BulkWriteException. The methods will still work for pre-2.6 servers, but performance will suffer, as each write operation has to be executed one at a time.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GridFS</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/gridfs/</link>
      <pubDate>Fri, 27 Nov 2015 12:00:00 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/gridfs/</guid>
      <description>

&lt;h2 id=&#34;gridfs&#34;&gt;GridFS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/core/gridfs
&#34;&gt;GridFS&lt;/a&gt; is a specification for storing and retrieving files that exceed the BSON document size limit of 16MB. Instead of storing a file in a single document, GridFS divides a file into parts, or chunks, and stores each of those chunks as a separate document.&lt;/p&gt;

&lt;p&gt;When you query a GridFS store for a file, the Java Async driver will reassemble the chunks as needed.&lt;/p&gt;

&lt;p&gt;The following code snippets come from the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/master/driver-async/src/examples/gridfs/GridFSTour.java
&#34;&gt;&lt;code&gt;GridFSTour.java&lt;/code&gt;&lt;/a&gt; example code,
which can be found with the driver source on github.&lt;/p&gt;

&lt;h2 id=&#34;async-streams&#34;&gt;Async Streams&lt;/h2&gt;

&lt;p&gt;The driver&amp;rsquo;s GridFS library uses flexible interfaces for asynchronous input and output. The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/AsyncInputStream.html
&#34;&gt;&lt;code&gt;AsyncInputStream&lt;/code&gt;&lt;/a&gt; interface represents an &lt;code&gt;InputStream&lt;/code&gt;
and the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/AsyncOutputStream.html
&#34;&gt;&lt;code&gt;AsyncOutputStream&lt;/code&gt;&lt;/a&gt; interface represents an &lt;code&gt;OutputStream&lt;/code&gt;.
These interfaces should be easy to wrap for any alternative asynchronous I/O implementations such as Netty or Vertx.&lt;/p&gt;

&lt;p&gt;In addition to these interfaces, the driver provides the following helpers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/helpers/AsyncStreamHelper.html
&#34;&gt;&lt;code&gt;AsyncStreamHelper&lt;/code&gt;&lt;/a&gt;, which provides support for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;byte[]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;InputStream&lt;/code&gt; - note: input streams are blocking&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OutputStream&lt;/code&gt; - note: output streams are blocking&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/helpers/AsynchronousChannelHelper.html
&#34;&gt;&lt;code&gt;AsynchronousChannelHelper&lt;/code&gt;&lt;/a&gt;, which provides support for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AsynchronousByteChannel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsynchronousFileChannel&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.async.client.MongoClient;
import com.mongodb.async.client.MongoClients;
import com.mongodb.async.client.MongoDatabase;

import com.mongodb.async.client.gridfs.GridFSBucket;
import com.mongodb.async.client.gridfs.GridFSBuckets;
import com.mongodb.async.client.gridfs.AsyncInputStream;
import com.mongodb.async.client.gridfs.GridFSDownloadStream;
import com.mongodb.async.client.gridfs.GridFSUploadStream;
import com.mongodb.client.gridfs.model.GridFSFile;
import com.mongodb.client.gridfs.model.GridFSDownloadOptions;
import com.mongodb.client.gridfs.model.GridFSUploadOptions;

import static com.mongodb.async.client.gridfs.helpers.AsyncStreamHelper.toAsyncInputStream;
import static com.mongodb.async.client.gridfs.helpers.AsynchronousChannelHelper.channelToOutputStream;
import com.mongodb.async.SingleResultCallback;

import com.mongodb.Block;
import static com.mongodb.client.model.Filters.eq;
import java.nio.charset.StandardCharsets;
import java.nio.ByteBuffer;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.nio.channels.AsynchronousFileChannel;
import org.bson.Document;
import org.bson.types.ObjectId;
import java.io.FileNotFoundException;
import java.io.IOException;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;consideration&#34;&gt;Consideration&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Always check for errors in any &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/SingleResultCallback.html&#34;&gt;&lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; implementation
and handle them appropriately.&lt;/p&gt;

&lt;p&gt;For sake of brevity, this tutorial omits the error check logic in the code examples.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-a-gridfs-bucket&#34;&gt;Create a GridFS Bucket&lt;/h2&gt;

&lt;p&gt;GridFS stores files in &lt;a href=&#34;http://docs.mongodb.org/manual/core/gridfs/#gridfs-collections
&#34;&gt;two collections&lt;/a&gt;: a &lt;code&gt;chunks&lt;/code&gt; collection stores the file chunks, and a  &lt;code&gt;files&lt;/code&gt; collection stores file metadata. The two collections are in a common bucket and the collection names are prefixed with the bucket name.&lt;/p&gt;

&lt;p&gt;The Java Async driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBuckets.html#create-com.mongodb.async.client.MongoDatabase-
&#34;&gt;&lt;code&gt;GridFSBuckets.create()&lt;/code&gt;&lt;/a&gt;  method
to create the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBucket.html
&#34;&gt;&lt;code&gt;GridFSBucket&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoDatabase myDatabase = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);

// Create a gridFSBucket using the default bucket name &amp;quot;fs&amp;quot;
GridFSBucket gridFSBucket = GridFSBuckets.create(myDatabase);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify a bucket name to &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBuckets.html#create-com.mongodb.async.client.MongoDatabase-
&#34;&gt;&lt;code&gt;GridFSBuckets.create()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Create a gridFSBucket with a custom bucket name &amp;quot;files&amp;quot;
GridFSBucket gridFSBucketCustom = GridFSBuckets.create(myDatabase, &amp;quot;files&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;GridFS will automatically create indexes on the &lt;code&gt;files&lt;/code&gt; and &lt;code&gt;chunks&lt;/code&gt; collections on first upload of data into the GridFS bucket.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;upload-to-gridfs&#34;&gt;Upload to GridFS&lt;/h2&gt;

&lt;p&gt;To upload data into GridFS, you can upload from an &lt;code&gt;InputStream&lt;/code&gt; or write data to a &lt;code&gt;GridFSUploadStream&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;uploadfromstream&#34;&gt;UploadFromStream&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBucket.html#openUploadStream-java.lang.String-com.mongodb.client.gridfs.model.GridFSUploadOptions-
&#34;&gt;&lt;code&gt;uploadFromStream&lt;/code&gt;&lt;/a&gt; method
reads the contents of an &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/AsyncInputStream.html
&#34;&gt;&lt;code&gt;AsyncInputStream&lt;/code&gt;&lt;/a&gt; and saves it to the &lt;code&gt;GridFSBucket&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/model/GridFSUploadOptions.html
&#34;&gt;&lt;code&gt;GridFSUploadOptions&lt;/code&gt;&lt;/a&gt; to configure the chunk size or include additional metadata.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Get the input stream
final AsyncInputStream streamToUploadFrom = toAsyncInputStream(
                    &amp;quot;/tmp/mongodb-tutorial.pdf&amp;quot;.getBytes(StandardCharsets.UTF_8));

// Create some custom options
GridFSUploadOptions options = new GridFSUploadOptions()
                                    .chunkSizeBytes(1024 * 1024)
                                    .metadata(new Document(&amp;quot;type&amp;quot;, &amp;quot;presentation&amp;quot;));

gridFSBucket.uploadFromStream(&amp;quot;mongodb-tutorial&amp;quot;, streamToUploadFrom, options,
    new SingleResultCallback&amp;lt;ObjectId&amp;gt;() {
       @Override
       public void onResult(final ObjectId result, final Throwable t) {
           System.out.println(&amp;quot;The fileId of the uploaded file is: &amp;quot; + result.toHexString());
            streamToUploadFrom.close(new SingleResultCallback&amp;lt;Void&amp;gt;() {
                @Override
                public void onResult(final Void result, final Throwable t) {
                    // Stream closed
                }
            });
       }
    }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;openuploadstream&#34;&gt;OpenUploadStream&lt;/h3&gt;

&lt;p&gt;For a finer-grained control of the upload, the driver also provides a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBucket.html#openUploadStream-java.lang.String-com.mongodb.client.gridfs.model.GridFSUploadOptions-
&#34;&gt;&lt;code&gt;GridFSBucket.openUploadStream&lt;/code&gt;&lt;/a&gt; method, which returns a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSUploadStream.html
&#34;&gt;&lt;code&gt;GridFSUploadStream&lt;/code&gt;&lt;/a&gt;. You can write data to a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSUploadStream.html
&#34;&gt;&lt;code&gt;GridFSUploadStream&lt;/code&gt;&lt;/a&gt; which extends &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/AsyncOutputStream.html
&#34;&gt;&lt;code&gt;AsyncOutputStream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSUploadStream.html
&#34;&gt;&lt;code&gt;GridFSUploadStream&lt;/code&gt;&lt;/a&gt; buffers data until it reaches the &lt;code&gt;chunkSizeBytes&lt;/code&gt; and then inserts the chunk into the &lt;code&gt;chunks&lt;/code&gt; collection.  When the &lt;code&gt;GridFSUploadStream&lt;/code&gt; is closed, the final chunk is written and the file metadata is inserted into the &lt;code&gt;files&lt;/code&gt; collection.&lt;/p&gt;

&lt;h2 id=&#34;find-files-stored-in-gridfs&#34;&gt;Find Files Stored in GridFS&lt;/h2&gt;

&lt;p&gt;To find the files stored in the &lt;code&gt;GridFSBucket&lt;/code&gt; use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBucket.html#find--
&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example prints out the filename of each file stored:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;gridFSBucket.find().forEach(
    new Block&amp;lt;GridFSFile&amp;gt;() {
        @Override
        public void apply(final GridFSFile gridFSFile) {
            System.out.println(gridFSFile.getFilename() + &amp;quot; has file id: &amp;quot; +
                                gridFSFile.getObjectId().toHexString());
        }
    },
    new SingleResultCallback&amp;lt;Void&amp;gt;() {
        @Override
        public void onResult(final Void result, final Throwable t) {
            // Finished
        }
    }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also provide a custom filter to limit the results returned. The following example prints out the filenames of all files with a &amp;ldquo;image/png&amp;rdquo; value set as the contentType in the user defined metadata document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;gridFSBucket.find(eq(&amp;quot;metadata.contentType&amp;quot;, &amp;quot;image/png&amp;quot;)).forEach(
    new Block&amp;lt;GridFSFile&amp;gt;() {
        @Override
        public void apply(final GridFSFile gridFSFile) {
            System.out.println(gridFSFile.getFilename() + &amp;quot; has file id: &amp;quot; +
                               gridFSFile.getObjectId().toHexString());
        }
    },
    new SingleResultCallback&amp;lt;Void&amp;gt;() {
        @Override
        public void onResult(final Void result, final Throwable t) {
            // Finished
        }
    }
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;download-from-gridfs&#34;&gt;Download from GridFS&lt;/h2&gt;

&lt;h3 id=&#34;downloadtostream&#34;&gt;DownloadToStream&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBucket.html#downloadToStream-org.bson.types.ObjectId-com.mongodb.async.client.gridfs.AsyncOutputStream-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;downloadToStream&lt;/code&gt;&lt;/a&gt; method reads the contents from MongoDB and writes the data directly to the provided &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/AsyncOutputStream.html
&#34;&gt;&lt;code&gt;AsyncOutputStream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For the &lt;code&gt;fileId&lt;/code&gt; variable, specify an &lt;code&gt;ObjectId&lt;/code&gt; value returned from the find operation section in this tutorial.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Path outputPath = Paths.get(&amp;quot;/tmp/mongodb-tutorial-out.pdf&amp;quot;);
AsynchronousFileChannel streamToDownloadTo = AsynchronousFileChannel.open(outputPath,
        StandardOpenOption.CREATE_NEW,
        StandardOpenOption.WRITE,
        StandardOpenOption.DELETE_ON_CLOSE);

gridFSBucket.downloadToStream(fileId, channelToOutputStream(streamToDownloadTo),
    new SingleResultCallback&amp;lt;Long&amp;gt;() {
      @Override
      public void onResult(final Long result, final Throwable t) {
          System.out.println(&amp;quot;downloaded file sized: &amp;quot; + result);
      }
});
// Note: AsynchronousFileChannel was opened with option delete on close
streamToDownloadTo.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the &lt;code&gt;_id&lt;/code&gt; of the file is unknown but you know the filename, then you can pass the filename to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBucket.html#downloadToStream-java.lang.String-com.mongodb.async.client.gridfs.AsyncOutputStream-com.mongodb.client.gridfs.model.GridFSDownloadOptions-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;downloadToStream&lt;/code&gt;&lt;/a&gt; method. By default, it will download the latest version of the file. Use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/model/GridFSDownloadOptions.html
&#34;&gt;&lt;code&gt;GridFSDownloadOptions&lt;/code&gt;&lt;/a&gt; to configure which version to download.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Path outputPath = Paths.get(&amp;quot;/tmp/mongodb-tutorial-out.pdf&amp;quot;);
AsynchronousFileChannel streamToDownloadTo = AsynchronousFileChannel.open(outputPath,
        StandardOpenOption.CREATE_NEW,
        StandardOpenOption.WRITE,
        StandardOpenOption.DELETE_ON_CLOSE);

GridFSDownloadOptions downloadOptions = new GridFSDownloadOptions().revision(0);

gridFSBucket.downloadToStream(&amp;quot;mongodb-tutorial&amp;quot;, channelToOutputStream(streamToDownloadTo), downloadOptions,
    new SingleResultCallback&amp;lt;Long&amp;gt;() {
      @Override
      public void onResult(final Long result, final Throwable t) {
          System.out.println(&amp;quot;downloaded file sized: &amp;quot; + result);
      }
});
// Note: AsynchronousFileChannel was opened with option delete on close
streamToDownloadTo.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;opendownloadstream&#34;&gt;OpenDownloadStream&lt;/h3&gt;

&lt;p&gt;For a finer-grained control of the upload, the driver also provides a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBucket.html#openDownloadStream-org.bson.types.ObjectId-
&#34;&gt;&lt;code&gt;openDownloadStream&lt;/code&gt;&lt;/a&gt; method, which returns a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSDownloadStream.html
&#34;&gt;&lt;code&gt;GridFSDownloadStream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;rename-files&#34;&gt;Rename Files&lt;/h2&gt;

&lt;p&gt;If you should need to rename a file, then use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBucket.html#rename-org.bson.types.ObjectId-java.lang.String-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;rename&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example renames a file to &amp;ldquo;mongodbTutorial&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ObjectId fileId; // The id of a file uploaded to GridFS, initialize to valid file id 
...
gridFSBucket.rename(fileId, &amp;quot;mongodbTutorial&amp;quot;, new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Renamed file&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;rename&lt;/code&gt; method requires an &lt;code&gt;_id&lt;/code&gt; rather than a &lt;code&gt;filename&lt;/code&gt; to ensure the correct file is renamed.&lt;/p&gt;

&lt;p&gt;To rename multiple revisions of the same filename, first retrieve the full list of files. Then, for every file that should be renamed, execute &lt;code&gt;rename&lt;/code&gt; with the corresponding &lt;code&gt;_id&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;delete-files&#34;&gt;Delete Files&lt;/h2&gt;

&lt;p&gt;To delete a file from the &lt;code&gt;GridFSBucket&lt;/code&gt; use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/gridfs/GridFSBucket.html#delete-org.bson.types.ObjectId-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example deletes a file from the &lt;code&gt;GridFSBucket&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ObjectId fileId; // The id of a file uploaded to GridFS, initialize to valid file id 
...
gridFSBucket.delete(fileId, new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Deleted file&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Observables</title>
      <link>/mongo-java-driver/3.4/driver-async/reference/observables/</link>
      <pubDate>Thu, 14 May 2015 08:01:00 +0000</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/reference/observables/</guid>
      <description>

&lt;h2 id=&#34;observables&#34;&gt;Observables&lt;/h2&gt;

&lt;p&gt;The MongoDB Async Driver is fully callback based and makes extensive use of &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/SingleResultCallback.html
&#34;&gt;&lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/a&gt; to achieve this. The &lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;&lt;/code&gt; interface requires the implementation of a single method &lt;code&gt;onResult(T result, Throwable t)&lt;/code&gt; which is called once the operation has completed or errored. The &lt;code&gt;result&lt;/code&gt; parameter contains the result of the operation if successful. If the operation failed for any reason then the &lt;code&gt;t&lt;/code&gt; contains the &lt;code&gt;Throwable&lt;/code&gt; reason for the failure. This pattern allows the users application logic to be deferred until the underlying network IO to MongoDB has been completed.&lt;/p&gt;

&lt;p&gt;The callback pattern is extremely flexible but can quickly become unwieldy if the application logic requires a chain of operations. Nesting of callbacks can make code harder to read and give the appearance of making the codebase more complex that it actually is. To help with this we also have released two observable based asynchronous drivers:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://mongodb.github.io/mongo-java-driver-reactivestreams/&#34;&gt;MongoDB Reactive Streams Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mongodb.github.io/mongo-java-driver-rx/&#34;&gt;MongoDB RxJava Driver&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These observable drivers follow similar patterns that split the logic into &lt;code&gt;onNext&lt;/code&gt;, &lt;code&gt;onError&lt;/code&gt; and &lt;code&gt;onComplete(d)&lt;/code&gt; methods. These methods split out the logic used by &lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;.onResult(T result, Throwable t)&lt;/code&gt; into individual components that can make the code  easier to reason with.&lt;/p&gt;

&lt;p&gt;The MongoDB Async Driver provides a factory and interfaces that do the heavy lifting of converting callback based operations into an observable operations.  There are three interfaces &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/Observable.html
&#34;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/Subscription.html
&#34;&gt;&lt;code&gt;Subscription&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/Observer.html
&#34;&gt;&lt;code&gt;Observer&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/Observables.html
&#34;&gt;&lt;code&gt;Observables&lt;/code&gt;&lt;/a&gt; helpers convert any callback based operations into observable operations.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The interfaces are similar to &lt;code&gt;Publisher&lt;/code&gt;, &lt;code&gt;Subscription&lt;/code&gt; and &lt;code&gt;Subscriber&lt;/code&gt; interfaces from the &lt;a href=&#34;http://www.reactive-streams.org/&#34;&gt;reactive streams&lt;/a&gt; JVM implementation.  However, we prefer the name &lt;code&gt;Observerable&lt;/code&gt; to &lt;code&gt;Publisher&lt;/code&gt; and &lt;code&gt;Observer&lt;/code&gt; to &lt;code&gt;Subscriber&lt;/code&gt; for readability purposes.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;observable&#34;&gt;Observable&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/Observable.html
&#34;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; represents a MongoDB operation which emits its results to the &lt;code&gt;Observer&lt;/code&gt; based on demand requested by the &lt;code&gt;Subscription&lt;/code&gt; to the &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;subscription&#34;&gt;Subscription&lt;/h2&gt;

&lt;p&gt;A &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/Subscription.html
&#34;&gt;&lt;code&gt;Subscription&lt;/code&gt;&lt;/a&gt; represents a one-to-one lifecycle of an &lt;code&gt;Observer&lt;/code&gt; subscribing to an &lt;code&gt;Observable&lt;/code&gt;.  A &lt;code&gt;Subscription&lt;/code&gt; to an &lt;code&gt;Observable&lt;/code&gt; can only be used by a single &lt;code&gt;Observer&lt;/code&gt;.  The purpose of a &lt;code&gt;Subscription&lt;/code&gt; is to control demand and to allow unsubscribing from the &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;observer&#34;&gt;Observer&lt;/h2&gt;

&lt;p&gt;An &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/Observer.html
&#34;&gt;&lt;code&gt;Observer&lt;/code&gt;&lt;/a&gt; provides the mechanism for receiving push-based notifications from the &lt;code&gt;Observable&lt;/code&gt;.  Demand for these events is signalled by its &lt;code&gt;Subscription&lt;/code&gt;. On subscription to an &lt;code&gt;Observable&lt;/code&gt; the &lt;code&gt;Observer&lt;/code&gt; will be passed the &lt;code&gt;Subscription&lt;/code&gt; via the &lt;code&gt;onSubscribe(Subscription subscription)&lt;/code&gt;.
Demand for results is signaled via the &lt;code&gt;Subscription&lt;/code&gt; and any results are passed to the &lt;code&gt;onNext(TResult result)&lt;/code&gt; method.  If there is an error for any reason the &lt;code&gt;onError(Throwable e)&lt;/code&gt; will be called and no more events passed to the &lt;code&gt;Observer&lt;/code&gt;. Alternatively, when the &lt;code&gt;Observer&lt;/code&gt; has consumed all the results from the &lt;code&gt;Observable&lt;/code&gt; the &lt;code&gt;onComplete()&lt;/code&gt; method will be called.&lt;/p&gt;

&lt;h2 id=&#34;wrapping-a-mongoiterable&#34;&gt;Wrapping a MongoIterable&lt;/h2&gt;

&lt;p&gt;With the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/Observables.html
&#34;&gt;&lt;code&gt;Observables&lt;/code&gt;&lt;/a&gt; factory creating an &lt;code&gt;Observable&lt;/code&gt; from a &lt;code&gt;MongoIterable&lt;/code&gt; is simple.&lt;/p&gt;

&lt;p&gt;In the following example we iterate and print out all json forms of documents in a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    Observables.observe(collection.find()).subscribe(new Observer&amp;lt;Document&amp;gt;(){
        @Override
        void onSubscribe(final Subscription subscription) {
            System.out.println(&amp;quot;Subscribed and requesting all documents&amp;quot;);
            subscription.request(Long.MAX_VALUE);
        }

        @Override
        void onNext(final Document document) {
            System.out.println(document.toJson());
        }

        @Override
        void onError(final Throwable e) {
            System.out.println(&amp;quot;There was an error: &amp;quot; + e.getMessage());
        }

        @Override
        void onComplete() {
            System.out.println(&amp;quot;Finished iterating all documents&amp;quot;);
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;wrapping-a-callback-based-method&#34;&gt;Wrapping a callback based method&lt;/h2&gt;

&lt;p&gt;Creating an &lt;code&gt;Observable&lt;/code&gt; from any callback based methods requires the wrapping of the method inside a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/Block.html
&#34;&gt;&lt;code&gt;Block&lt;/code&gt;&lt;/a&gt;. This allows the execution of the operation to be delayed, until demand is request by the &lt;code&gt;Subscription&lt;/code&gt;.  The method &lt;em&gt;must&lt;/em&gt; use the supplied callback to convert the results into an &lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the following example we print out the count of the number of documents in a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    Block&amp;lt;SingleResultCallback&amp;lt;Long&amp;gt;&amp;gt; operation = new Block&amp;lt;SingleResultCallback&amp;lt;Long&amp;gt;&amp;gt;() {
        @Override
        void apply(final SingleResultCallback&amp;lt;Long&amp;gt; callback) {
            collection.count(callback);
        }
    };

    // Or in Java 8 syntax:
    operation = (Block&amp;lt;SingleResultCallback&amp;lt;Long&amp;gt;&amp;gt;) collection::count;

    Observables.observe(operation).subscribe(new Observer&amp;lt;Long&amp;gt;(){
        @Override
        void onSubscribe(final Subscription subscription) {
            System.out.println(&amp;quot;Subscribed and requesting the count&amp;quot;);
            subscription.request(1);
        }

        @Override
        void onNext(final Long count) {
            System.out.println(&amp;quot;The collection has &amp;quot; + count + &amp;quot; documents&amp;quot;);
        }

        @Override
        void onError(final Throwable e) {
            System.out.println(&amp;quot;There was an error: &amp;quot; + e.getMessage());
        }

        @Override
        void onComplete() {
            System.out.println(&amp;quot;Finished&amp;quot;);
        }
    });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;back-pressure&#34;&gt;Back Pressure&lt;/h2&gt;

&lt;p&gt;In the following example, the &lt;code&gt;Subscription&lt;/code&gt; is used to control demand when iterating an &lt;code&gt;Observable&lt;/code&gt;. This is similar in concept to the &lt;code&gt;MongoIterable.forEach&lt;/code&gt; method but allows demand-driven iteration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; Observables.observe(collection.find()).subscribe(new Observer&amp;lt;Document&amp;gt;(){
        private long batchSize = 10;
        private long seen = 0;
        private Subscription subscription;

         @Override
         void onSubscribe(final Subscription subscription) {
             this.subscription = subscription;
             subscription.request(batchSize);
         }

         @Override
         void onNext(final Document document) {
             System.out.println(document.toJson());
             seen += 1;
             if (seen == batchSize) {
                seen = 0;
                subscription.request(batchSize);
             }
         }

         @Override
         void onError(final Throwable e) {
             System.out.println(&amp;quot;There was an error: &amp;quot; + e.getMessage());
         }

         @Override
         void onComplete() {
             System.out.println(&amp;quot;Finished iterating all documents&amp;quot;);
         }
     });
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/authentication/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/authentication/</guid>
      <description>

&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;The Java driver supports all MongoDB &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/&#34;&gt;authentication mechanisms&lt;/a&gt;, including those
only available in the MongoDB &lt;a href=&#34;http://docs.mongodb.org/manual/administration/install-enterprise/&#34;&gt;Enterprise Edition&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mongocredential&#34;&gt;&lt;code&gt;MongoCredential&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.MongoCredential;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An authentication credential is represented as an instance of the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html
&#34;&gt;&lt;code&gt;MongoCredential&lt;/code&gt;&lt;/a&gt; class. The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html
&#34;&gt;&lt;code&gt;MongoCredential&lt;/code&gt;&lt;/a&gt; class includes static
factory methods for each of the supported authentication mechanisms.&lt;/p&gt;

&lt;p&gt;To specify a list of these instances, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; and pass as a parameter to the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.async.client.MongoClientSettings-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;To specify a single &lt;code&gt;MongoCredential&lt;/code&gt; instance, you can also use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; and pass to a
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.ConnectionString-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can also specify the credential with a string that specifies the connection URI and pass the string to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-java.lang.String-&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; method that takes the connection string as a parameter.  For brevity, the tutorial omits the examples using the string.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Given the flexibility of role-based access control in MongoDB, it is usually sufficient to authenticate with a single user, but, for completeness, the driver accepts a list of credentials.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;default-authentication-mechanism&#34;&gt;Default Authentication Mechanism&lt;/h2&gt;

&lt;p&gt;Starting in MongoDB 3.0, MongoDB changed the default authentication
mechanism from &lt;a href=&#34;http://docs.mongodb.org/manual//core/security-mongodb-cr
&#34;&gt;&lt;code&gt;MONGODB-CR&lt;/code&gt;&lt;/a&gt; to
&lt;a href=&#34;http://docs.mongodb.org/manual/core/security-scram-sha-1
&#34;&gt;&lt;code&gt;SCRAM-SHA-1&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create a credential that will authenticate using the default
authentication mechanism regardless of server version, create a
credential using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createCredential-java.lang.String-java.lang.String-char:A-
&#34;&gt;&lt;code&gt;createCredential&lt;/code&gt;&lt;/a&gt;
static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user; // the user name
String database; // the name of the database in which the user is defined
char[] password; // the password as a character array
// ...


MongoCredential credential = MongoCredential.createCredential(user, database, password);

ClusterSettings clusterSettings = ClusterSettings.builder()
                                  .hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).build();
MongoClientSettings settings = MongoClientSettings.builder()
                                  .clusterSettings(clusterSettings)
                                  .credentialList(Arrays.asList(credential))
                                  .build();
MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a &lt;code&gt;ConnectionString&lt;/code&gt; instance that does not  specify the
authentication mechanism:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(
            new ConnectionString(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For challenge and response mechanisms, using the default authentication
mechanism is the recommended approach as the approach will make
upgrading from MongoDB 2.6 to MongoDB 3.0 seamless, even after
&lt;a href=&#34;http://docs.mongodb.org/manual/release-notes/3.0-scram/
&#34;&gt;upgrading the authentication schema&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;scram-sha-1&#34;&gt;SCRAM-SHA-1&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/security-scram-sha-1/
&#34;&gt;&lt;code&gt;SCRAM-SHA-1&lt;/code&gt;&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createScramSha1Credential-java.lang.String-java.lang.String-char:A-
&#34;&gt;&lt;code&gt;createScramSha1Credential&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCredential credential = MongoCredential.createScramSha1Credential(user,
                                                                       database,
                                                                       password);

ClusterSettings clusterSettings = ClusterSettings.builder()
                                  .hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).build();
MongoClientSettings settings = MongoClientSettings.builder()
                                  .clusterSettings(clusterSettings)
                                  .credentialList(Arrays.asList(credential))
                                  .build();
MongoClient mongoClient = MongoClients.create(settings);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a &lt;code&gt;ConnectionString&lt;/code&gt; instance that explicitly specifies the
&lt;code&gt;authMechanism=SCRAM-SHA-1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(new ConnectionString(
            &amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=SCRAM-SHA-1&amp;quot;));

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mongodb-cr&#34;&gt;MONGODB-CR&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/security-mongodb-cr
&#34;&gt;&lt;code&gt;MONGODB-CR&lt;/code&gt;&lt;/a&gt; use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createMongoCRCredential-java.lang.String-java.lang.String-char:A-
&#34;&gt;&lt;code&gt;createMongCRCredential&lt;/code&gt;&lt;/a&gt;
static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCredential credential = MongoCredential.createMongoCRCredential(user,
                                                                     database,
                                                                     password);
ClusterSettings clusterSettings = ClusterSettings.builder()
                                  .hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).build();
MongoClientSettings settings = MongoClientSettings.builder()
                                  .clusterSettings(clusterSettings)
                                  .credentialList(Arrays.asList(credential))
                                  .build();
MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a  &lt;code&gt;ConnectionString&lt;/code&gt; instance that explicitly specifies the
&lt;code&gt;authMechanism=MONGODB-CR&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(new ConnectionString(
            &amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=MONGODB-CR&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;After the &lt;a href=&#34;http://docs.mongodb.org/manual/release-notes/3.0-scram/&#34;&gt;authentication schema upgrade&lt;/a&gt; from MONGODB-CR to SCRAM-SHA-1,
MONGODB-CR credentials will fail to authenticate.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;x-509&#34;&gt;X.509&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&#34;http://docs.mongodb.org/manual/core/security-x.509
&#34;&gt;X.509&lt;/a&gt; mechanism, MongoDB uses the
X.509 certificate presented during SSL negotiation to
authenticate a user whose name is derived from the distinguished name
of the X.509 certificate.&lt;/p&gt;

&lt;p&gt;X.509 authentication requires the use of SSL connections with
certificate validation and is available in MongoDB 2.6 and later. To
create a credential of this type use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createMongoX509Credential-java.lang.String-
&#34;&gt;&lt;code&gt;createMongoX509Credential&lt;/code&gt;&lt;/a&gt; static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user;     // The x.509 certificate derived user name, e.g. &amp;quot;CN=user,OU=OrgUnit,O=myOrg,...&amp;quot;
MongoCredential credential = MongoCredential.createMongoX509Credential(user);
ClusterSettings clusterSettings = ClusterSettings.builder()
                                  .hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).build();

EventLoopGroup eventLoopGroup = new NioEventLoopGroup();  // make sure application shuts this down

MongoClientSettings settings = MongoClientSettings.builder()
                .clusterSettings(clusterSettings)
                .credentialList(Arrays.asList(credential))
                .streamFactoryFactory(NettyStreamFactoryFactory.builder().eventLoopGroup(eventLoopGroup).build())
                .sslSettings(SslSettings.builder().enabled(true).build())
                .build();
MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a &lt;code&gt;ConnectionString&lt;/code&gt; instance that explicitly specifies the
&lt;code&gt;authMechanism=MONGODB-X509&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(new ConnectionString(
            &amp;quot;mongodb://subjectName@host1/?authMechanism=MONGODB-X509&amp;amp;streamType=netty&amp;amp;ssl=true&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the MongoDB server
&lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/configure-x509-client-authentication/#add-x-509-certificate-subject-as-a-user&#34;&gt;x.509 tutorial&lt;/a&gt; for
more information about determining the subject name from the certificate.&lt;/p&gt;

&lt;h2 id=&#34;kerberos-gssapi&#34;&gt;Kerberos (GSSAPI)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy
authentication through Kerberos service. To create a credential of type
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?core/authentication/#kerberos-authentication.html
&#34;&gt;Kerberos (GSSAPI)&lt;/a&gt;, use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createGSSAPICredential-java.lang.String-
&#34;&gt;&lt;code&gt;createGSSAPICredential&lt;/code&gt;&lt;/a&gt;
static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user;   // The Kerberos user name, including the realm, e.g. &amp;quot;user1@MYREALM.ME&amp;quot;
// ...
MongoCredential credential = MongoCredential.createGSSAPICredential(user);
ClusterSettings clusterSettings = ClusterSettings.builder()
                                  .hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).build();
MongoClientSettings settings = MongoClientSettings.builder()
                                  .clusterSettings(clusterSettings)
                                  .credentialList(Arrays.asList(credential))
                                  .build();
MongoClient mongoClient = MongoClients.create(settings);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a &lt;code&gt;ConnectionString&lt;/code&gt; that explicitly specifies the
&lt;code&gt;authMechanism=GSSAPI&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(new ConnectionString(
            &amp;quot;mongodb://username%40MYREALM.ME@host1/?authMechanism=GSSAPI&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;GSSAPI&lt;/code&gt; authentication mechanism instead of &lt;code&gt;Kerberos&lt;/code&gt; because technically the driver is authenticating via the
&lt;a href=&#34;https://tools.ietf.org/html/rfc4752&#34;&gt;GSSAPI&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;GSSAPI&lt;/code&gt; authentication mechanism is supported only in the following environments:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux: Java 6 and above&lt;/li&gt;
&lt;li&gt;Windows: Java 7 and above with &lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa380493&#34;&gt;SSPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;OS X: Java 7 and above&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To successfully authenticate via Kerberos, the application typically
must specify several system properties so that the underlying GSSAPI
Java libraries can acquire a Kerberos ticket:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;java.security.krb5.realm=MYREALM.ME
java.security.krb5.kdc=mykdc.myrealm.me
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Depending on the Kerberos setup, additional property specifications may be required, either via the application code or, in some cases, the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#withMechanismProperty-java.lang.String-T-
&#34;&gt;withMechanismProperty()&lt;/a&gt; method of the &lt;code&gt;MongoCredential&lt;/code&gt; instance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#SERVICE_NAME_KEY
&#34;&gt;&lt;code&gt;SERVICE_NAME&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#CANONICALIZE_HOST_NAME_KEY
&#34;&gt;&lt;code&gt;CANONICALIZE_HOST_NAME&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#JAVA_SUBJECT_KEY
&#34;&gt;&lt;code&gt;JAVA_SUBJECT&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#JAVA_SASL_CLIENT_PROPERTIES_KEY
&#34;&gt;&lt;code&gt;JAVA_SASL_CLIENT_PROPERTIES&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For example, to specify the &lt;code&gt;SERVICE_NAME&lt;/code&gt; property via the &lt;code&gt;MongoCredential&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;credential = credential.withMechanismProperty(MongoCredential.SERVICE_NAME_KEY, &amp;quot;othername&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the &lt;code&gt;ConnectionString&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongodb://username%40MYREALM.com@myserver/?authMechanism=GSSAPI&amp;amp;authMechanismProperties=SERVICE_NAME:othername
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ldap-plain&#34;&gt;LDAP (PLAIN)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Lightweight Directory Access Protocol (LDAP) service. To create a credential of type &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?core/authentication/#ldap-proxy-authority-authentication.html
&#34;&gt;LDAP&lt;/a&gt; use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createPlainCredential-java.lang.String-java.lang.String-char:A-
&#34;&gt;&lt;code&gt;createPlainCredential&lt;/code&gt;&lt;/a&gt; static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user;          // The LDAP user name
char[] password;      // The LDAP password
// ...
MongoCredential credential = MongoCredential.createPlainCredential(user, &amp;quot;$external&amp;quot;, password);
ClusterSettings clusterSettings = ClusterSettings.builder()
                                  .hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;))).build();
MongoClientSettings settings = MongoClientSettings.builder()
                                  .clusterSettings(clusterSettings)
                                  .credentialList(Arrays.asList(credential))
                                  .build();
MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with a connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(new ConnectionString(
          &amp;quot;mongodb://user1@host1/?authSource=$external&amp;amp;authMechanism=PLAIN&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;plain&lt;/code&gt; authentication mechanism instead of &lt;code&gt;LDAP&lt;/code&gt; because technically the driver is authenticating via the &lt;a href=&#34;https://www.ietf.org/rfc/rfc4616.txt&#34;&gt;PLAIN&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connect to MongoDB</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/</guid>
      <description>

&lt;h2 id=&#34;connect-to-mongodb&#34;&gt;Connect to MongoDB&lt;/h2&gt;

&lt;p&gt;To make a connection to a running MongoDB instance, use &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create--
&#34;&gt;&lt;code&gt;MongoClients.create&lt;/code&gt;&lt;/a&gt; to create a new &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; instance.&lt;/p&gt;

&lt;p&gt;A &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/a&gt; instance actually represents a pool of connections
to the database; you will only need one instance of class
&lt;code&gt;MongoClient&lt;/code&gt; even with multiple concurrently executing asynchronous operations.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Typically you only create one &lt;code&gt;MongoClient&lt;/code&gt; instance for a given MongoDB
deployment (e.g. standalone, replica set, or a sharded cluster) and use it across your application. However, if you do create multiple instances:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All resource usage limits (max connections, etc.) apply per &lt;code&gt;MongoClient&lt;/code&gt; instance.&lt;/li&gt;
&lt;li&gt;To dispose of an instance, call &lt;code&gt;MongoClient.close()&lt;/code&gt; to clean up resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running MongoDB deployments to which to connect. For example, to connect to a standalone, you must have a running standalone.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The MongoDB Asynchronous Driver.  See &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/getting-started/installation/&#34;&gt;Installation&lt;/a&gt; for instructions on how to install the MongoDB async driver.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.ConnectionString;
import com.mongodb.ServerAddress;
import com.mongodb.async.client.*;
import com.mongodb.connection.ClusterSettings;
import com.mongodb.connection.netty.NettyStreamFactoryFactory;
import java.util.Arrays;
import static java.util.Arrays.asList;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-standalone-mongodb-instance&#34;&gt;Connect to a Standalone MongoDB Instance&lt;/h2&gt;

&lt;p&gt;To connect to a standalone MongoDB instance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create--
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; without any parameters to connect to a MongoDB instance running on localhost on port &lt;code&gt;27017&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-java.lang.String-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a string that specifies the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(&amp;quot;mongodb://localhost&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The connection string mostly follows &lt;a href=&#34;http://tools.ietf.org/html/rfc3986&#34;&gt;RFC 3986&lt;/a&gt;, with the exception of the domain name. For MongoDB, it is possible to list multiple domain names separated by a comma. For more information on the connection string, see &lt;a href=&#34;http://docs.mongodb.org/manual/reference/connection-string
&#34;&gt;connection string&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.ConnectionString-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(new ConnectionString(&amp;quot;mongodb://localhost&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.async.client.MongoClientSettings-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; object. To specify the host information, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/connection/ClusterSettings.html
&#34;&gt;&lt;code&gt;ClusterSettings&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ClusterSettings clusterSettings = ClusterSettings.builder()
                                  .hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;)))
                                  .build();
MongoClientSettings settings = MongoClientSettings.builder()
                                  .clusterSettings(clusterSettings).build();
MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;admonition tip&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;tip&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.html&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; provide more configuration options than a connection string.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;connect-to-a-replica-set&#34;&gt;Connect to a Replica Set&lt;/h2&gt;

&lt;p&gt;To connect to a &lt;a href=&#34;http://docs.mongodb.org/manual/replication/
&#34;&gt;replica set&lt;/a&gt;, specify at least one or more members of the replica set in the connection string or &lt;code&gt;MongoClientSettings&lt;/code&gt; object and pass to &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create--
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;MongoDB will auto-discover the primary and the secondaries.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-java.lang.String-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a connection string that specifies the members of the replica set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify at least two members of the replica set if you are not specifying the replica set name&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(
              &amp;quot;mongodb://host1:27017,host2:27017,host3:27017&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Specify at least one member of the replica set and the replica set name&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(
              &amp;quot;mongodb://host1:27017,host2:27017,host3:27017/?replicaSet=myReplicaSet&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.ConnectionString-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; object that specifies the members of the replica set:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Specify at least two members of the replica set if you are not specifying the replica set name&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(
        new ConnectionString(&amp;quot;mongodb://host1:27017,host2:27017,host3:27017&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Specify at least one member of the replica set and the replica set name:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(
      new ConnectionString(&amp;quot;mongodb://host1:27017,host2:27017,host3:27017/?replicaSet=myReplicaSet&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.async.client.MongoClientSettings-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; object. To specify the host information of the replica set members, use &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/connection/ClusterSettings.html
&#34;&gt;&lt;code&gt;ClusterSettings&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  ClusterSettings clusterSettings = ClusterSettings.builder()
                                      .hosts(asList(
                                          new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                                          new ServerAddress(&amp;quot;host2&amp;quot;, 27017),
                                          new ServerAddress(&amp;quot;host3&amp;quot;, 27017)))
                                      .build();


  MongoClientSettings settings = MongoClientSettings.builder()
                                      .clusterSettings(clusterSettings).build();


  MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-sharded-cluster&#34;&gt;Connect to a Sharded Cluster&lt;/h2&gt;

&lt;p&gt;To connect to a &lt;a href=&#34;http://docs.mongodb.org/manual/sharding/
&#34;&gt;sharded cluster&lt;/a&gt;, specify the &lt;code&gt;mongos&lt;/code&gt; instance or instances to the &lt;code&gt;MongoClient&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;To connect to a single &lt;code&gt;mongos&lt;/code&gt; instance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create--
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; without any parameters to connect to a :program:&lt;code&gt;mongos&lt;/code&gt; running on localhost on port &lt;code&gt;27017&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-java.lang.String-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a string that specifies the host information of the &lt;code&gt;mongos&lt;/code&gt; instance in the connection URI:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(&amp;quot;mongodb://localhost&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.ConnectionString-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; object that specifies the host information of the &lt;code&gt;mongos&lt;/code&gt; instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(
            new ConnectionString(&amp;quot;mongodb://localhost&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.async.client.MongoClientSettings-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; object. To specify the host information of the &lt;code&gt;mongos&lt;/code&gt; instance, use &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/connection/ClusterSettings.html
&#34;&gt;&lt;code&gt;ClusterSettings&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ClusterSettings clusterSettings = ClusterSettings.builder()
                                    .hosts(asList(new ServerAddress(&amp;quot;localhost&amp;quot;)))
                                    .build();
MongoClientSettings settings = MongoClientSettings.builder()
                                    .clusterSettings(clusterSettings)
                                    .build();
MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To connect to multiple &lt;code&gt;mongos&lt;/code&gt; instances, specify the host and port of the &lt;code&gt;mongos&lt;/code&gt; instances:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-java.lang.String-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a string that specifies the host and port information of the &lt;code&gt;mongos&lt;/code&gt; instances in the connection URI:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(&amp;quot;mongodb://host1:27017,host2:27017&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.ConnectionString-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; object that specifies the host and port information of the &lt;code&gt;mongos&lt;/code&gt; instances:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create(
            new ConnectionString(&amp;quot;mongodb://host1:27017,host2:27017&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can call &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClients.html#create-com.mongodb.async.client.MongoClientSettings-
&#34;&gt;&lt;code&gt;MongoClients.create()&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; object. To specify the host information of the &lt;code&gt;mongos&lt;/code&gt; instances, use &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/connection/ClusterSettings.html
&#34;&gt;&lt;code&gt;ClusterSettings&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ClusterSettings clusterSettings = ClusterSettings.builder()
                                      .hosts(asList(
                                          new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                                          new ServerAddress(&amp;quot;host2&amp;quot;, 27017)))
                                      .build();


MongoClientSettings settings = MongoClientSettings.builder()
                                      .clusterSettings(clusterSettings).build();
MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connection-options&#34;&gt;Connection Options&lt;/h2&gt;

&lt;p&gt;You can specify the connection settings using either the
connection string (or &lt;code&gt;ConnectionString&lt;/code&gt; object) or the &lt;code&gt;MongoClientSettings&lt;/code&gt; or both.&lt;/p&gt;

&lt;h3 id=&#34;netty-configuration&#34;&gt;Netty Configuration&lt;/h3&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Netty is an optional dependency of the asynchronous driver. If your application requires Netty, it must explicitly add a dependency to
Netty artifacts.  The driver is currently tested against Netty 4.0.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;By default, the async driver relies on the
&lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/nio/channels/AsynchronousSocketChannel.html&#34;&gt;&lt;code&gt;AsynchronousSocketChannel&lt;/code&gt;&lt;/a&gt; class, introduced
in Java 7.  However, an application must use &lt;a href=&#34;http://netty.io/&#34;&gt;Netty&lt;/a&gt; instead if:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The application is configured to use SSL to communicate with the MongoDB server, or&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The application runs on Java 6.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To configure the driver to use Netty,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Include the &lt;code&gt;streamType&lt;/code&gt; option set to &lt;code&gt;netty&lt;/code&gt;  in the connection string&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient client = MongoClients.create(&amp;quot;mongodb://localhost/?streamType=netty&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Configure &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.Builder.html#streamFactoryFactory-com.mongodb.connection.StreamFactoryFactory-
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;StreamFactory&lt;/code&gt; set to use Netty:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient client = MongoClients.create(MongoClientSettings.builder()
                          .clusterSettings(ClusterSettings.builder()
                                              .hosts(Arrays.asList(new ServerAddress()))
                                              .build())
                          .streamFactoryFactory(NettyStreamFactoryFactory.builder()
                                              .build())
                          .build());


&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Netty may also be configured by setting the &lt;code&gt;org.mongodb.async.type&lt;/code&gt; system property to &lt;code&gt;netty&lt;/code&gt;, but this should be considered as
deprecated as of the 3.1 driver release.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Read Operations</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/perform-read-operations/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/perform-read-operations/</guid>
      <description>

&lt;h2 id=&#34;find-operations&#34;&gt;Find Operations&lt;/h2&gt;

&lt;p&gt;Find operations retrieve documents from a collection. You can specify a filter to select only those documents that match the filter condition.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.*;
import com.mongodb.async.SingleResultCallback;
import com.mongodb.async.client.*;
import com.mongodb.client.model.Sorts;
import com.mongodb.connection.ClusterSettings;
import org.bson.Document;

import static com.mongodb.client.model.Filters.*;
import static com.mongodb.client.model.Projections.excludeId;
import static com.mongodb.client.model.Projections.fields;
import static com.mongodb.client.model.Projections.include;
import static java.util.Arrays.asList;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Include the following callback code which the examples in the tutorials will use:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;SingleResultCallback&amp;lt;Void&amp;gt; callbackWhenFinished = new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Operation Finished!&amp;quot;);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Include the following code which the examples will use to print the results of the find operations:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Block&amp;lt;Document&amp;gt; printBlock = new Block&amp;lt;Document&amp;gt;() {
    @Override
    public void apply(final Document document) {
        System.out.println(document.toJson());
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;considerations&#34;&gt;Considerations&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Always check for errors in any &lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;&lt;/code&gt; implementation
and handle them appropriately.&lt;/p&gt;

&lt;p&gt;For sake of brevity, this tutorial omits the error check logic in the code examples.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; and a &lt;code&gt;MongoCollection&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;query-a-collection&#34;&gt;Query a Collection&lt;/h2&gt;

&lt;p&gt;To query the collection, you can use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#find-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;You can call the method without any arguments to query all documents in a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or pass a filter to query for documents that match the filter criteria:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(eq(&amp;quot;name&amp;quot;, &amp;quot;456 Cookies Shop&amp;quot;))
            .forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;query-filters&#34;&gt;Query Filters&lt;/h2&gt;

&lt;p&gt;To query for documents that match certain conditions, pass a filter document to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#find-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;h3 id=&#34;empty-filter&#34;&gt;Empty Filter&lt;/h3&gt;

&lt;p&gt;To specify an empty filter (i.e. match all documents in a collection), use an empty &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(new Document()).forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition tip&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;tip&lt;/h5&gt;
&lt;p&gt;For the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#find--&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; method, you can also call the method without passing a filter object to match all documents in a collection.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;filters-helper&#34;&gt;&lt;code&gt;Filters&lt;/code&gt; Helper&lt;/h3&gt;

&lt;p&gt;To facilitate the creation of filter documents, the Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; class that provides filter condition helper methods.&lt;/p&gt;

&lt;p&gt;Consider the following &lt;code&gt;find&lt;/code&gt; operation which includes a filter &lt;code&gt;Document&lt;/code&gt; which specifies that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;stars&lt;/code&gt; field is greater than or equal to 2 and less than 5, &lt;em&gt;AND&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the &lt;code&gt;categories&lt;/code&gt; field equals &lt;code&gt;&amp;quot;Bakery&amp;quot;&lt;/code&gt; (or if &lt;code&gt;categories&lt;/code&gt; is an array, contains the string &lt;code&gt;&amp;quot;Bakery&amp;quot;&lt;/code&gt; as an element):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(
    new Document(&amp;quot;stars&amp;quot;, new Document(&amp;quot;$gte&amp;quot;, 2)
          .append(&amp;quot;$lt&amp;quot;, 5))
          .append(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)).forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following example specifies the same filter condition using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; helper methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
            .forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a list of MongoDB query filter operators, refer to the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query
&#34;&gt;MongoDB Manual&lt;/a&gt;. For the associated &lt;code&gt;Filters&lt;/code&gt; helpers, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt;.
See also the  &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/query-documents
&#34;&gt;Query Documents Tutorial&lt;/a&gt; for an overview of querying in MongoDB, including specifying filter conditions on arrays and embedded documents.&lt;/p&gt;

&lt;h2 id=&#34;finditerable&#34;&gt;FindIterable&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#find--
&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; method returns an instance of the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/FindIterable.html
&#34;&gt;&lt;code&gt;FindIterable&lt;/code&gt;&lt;/a&gt; interface. The interface provides various methods that you can chain to the &lt;code&gt;find()&lt;/code&gt; method to modify the output or behavior of the query, such as &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/FindIterable.html#sort-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;sort()&lt;/code&gt;&lt;/a&gt;  or &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/FindIterable.html#projection-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;projection()&lt;/code&gt;&lt;/a&gt;, as well as for iterating the results, such as &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoIterable.html#forEach-com.mongodb.Block-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;projections&#34;&gt;Projections&lt;/h3&gt;

&lt;p&gt;By default, queries in MongoDB return all fields in matching documents. To specify the fields to return in the matching documents, you can specify a &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results/#projection-document
&#34;&gt;projection document&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following &lt;code&gt;find&lt;/code&gt; operation which includes a projection &lt;code&gt;Document&lt;/code&gt; which specifies that the matching documents return only the &lt;code&gt;name&lt;/code&gt; field, &lt;code&gt;stars&lt;/code&gt; field, and the &lt;code&gt;categories&lt;/code&gt; field.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
                .projection(new Document(&amp;quot;name&amp;quot;, 1)
                     .append(&amp;quot;stars&amp;quot;, 1)
                     .append(&amp;quot;categories&amp;quot;,1)
                     .append(&amp;quot;_id&amp;quot;, 0))
                .forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To facilitate the creation of projection documents, the Java driver provides the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Projections.html
&#34;&gt;&lt;code&gt;Projections&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
                .projection(fields(include(&amp;quot;name&amp;quot;, &amp;quot;stars&amp;quot;, &amp;quot;categories&amp;quot;), excludeId()))
                .forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the projection document, you can also specify a projection expression using a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?reference/operator/projection/.html
&#34;&gt;projection operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For an example on using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Projections.html#metaTextScore-java.lang.String-
&#34;&gt;&lt;code&gt;Projections.metaTextScore&lt;/code&gt;&lt;/a&gt;,
see the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/text-search/&#34;&gt;Text Search tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;sorts&#34;&gt;Sorts&lt;/h3&gt;

&lt;p&gt;To sort documents, pass a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/cursor.sort/#cursor.sort
&#34;&gt;sort specification document&lt;/a&gt; to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/FindIterable.html#sort-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;FindIterable.sort()&lt;/code&gt;&lt;/a&gt; method.  The Java driver provides &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/sorts/&#34;&gt;&lt;code&gt;Sorts&lt;/code&gt;&lt;/a&gt; helpers to facilitate the sort specification document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
                .sort(Sorts.ascending(&amp;quot;name&amp;quot;))
                .forEach(printBlock, callbackWhenFinished);

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sort-with-projections&#34;&gt;Sort with Projections&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/FindIterable.html
&#34;&gt;&lt;code&gt;FindIterable&lt;/code&gt;&lt;/a&gt; methods themselves return &lt;code&gt;FindIterable&lt;/code&gt; objects, and as such, you can append multiple &lt;code&gt;FindIterable&lt;/code&gt; methods to the &lt;code&gt;find()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
                .sort(Sorts.ascending(&amp;quot;name&amp;quot;))
                .projection(fields(include(&amp;quot;name&amp;quot;, &amp;quot;stars&amp;quot;, &amp;quot;categories&amp;quot;), excludeId()))
                .forEach(printBlock, callbackWhenFinished);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mongoiterable&#34;&gt;MongoIterable&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/FindIterable.html
&#34;&gt;&lt;code&gt;MongoIterable&lt;/code&gt;&lt;/a&gt; interface provides helper methods to access the results of an operation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoIterable.html#first-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;first()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoIterable.html#forEach-com.mongodb.Block-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoIterable.html#map-com.mongodb.Function-
&#34;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoIterable.html#into-A-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;into()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;read-preference&#34;&gt;Read Preference&lt;/h2&gt;

&lt;p&gt;For read operations on &lt;a href=&#34;http://docs.mongodb.org/manual/replication/
&#34;&gt;replica sets&lt;/a&gt; or &lt;a href=&#34;http://docs.mongodb.org/manual/sharding/
&#34;&gt;sharded clusters&lt;/a&gt;, applications can configure the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-preference
&#34;&gt;read preference&lt;/a&gt; at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt;, as in the following example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  ClusterSettings clusterSettings = ClusterSettings.builder()
                            .hosts(asList(
                            new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                            new ServerAddress(&amp;quot;host2&amp;quot;, 27017))).build();
  MongoClientSettings settings = MongoClientSettings.builder()
                                    .clusterSettings(clusterSettings)
                                    .readPreference(ReadPreference.secondary())
                                    .build();
  MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Via a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; object.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(new ConnectionString(
        &amp;quot;mongodb://host1:27017,host2:27017/?readPreference=secondary&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Via string that specifies the connection URI:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(
        &amp;quot;mongodb://host1:27017,host2:27017/?readPreference=secondary&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoDatabase.html
&#34;&gt;&lt;code&gt;MongoDatabase&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoDatabase.html#withReadPreference-com.mongodb.ReadPreference-
&#34;&gt;&lt;code&gt;withReadPreference&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;)     
        .withReadPreference(ReadPreference.secondary());
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html
&#34;&gt;&lt;code&gt;MongoCollection&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#withReadPreference-com.mongodb.ReadPreference-
&#34;&gt;&lt;code&gt;withReadPreference&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;)
          .withReadPreference(ReadPreference.secondary());
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MongoDatabase&lt;/code&gt; and &lt;code&gt;MongoCollection&lt;/code&gt; instances are immutable. Calling &lt;code&gt;.withReadPreference()&lt;/code&gt; on an existing &lt;code&gt;MongoDatabase&lt;/code&gt; or &lt;code&gt;MongoCollection&lt;/code&gt; instance returns a new instance and does not affect the instance on which the method is called.&lt;/p&gt;

&lt;p&gt;For example, in the following, the &lt;code&gt;collectionWithReadPref&lt;/code&gt; instance has the read preference of primaryPreferred whereas the read preference of the &lt;code&gt;collection&lt;/code&gt; is unaffected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoCollection&amp;lt;Document&amp;gt; collectionWithReadPref =
                collection.withReadPreference(ReadPreference.primaryPreferred());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;read-concern&#34;&gt;Read Concern&lt;/h2&gt;

&lt;p&gt;For read operations on &lt;a href=&#34;http://docs.mongodb.org/manual/replication/
&#34;&gt;replica sets&lt;/a&gt; or &lt;a href=&#34;http://docs.mongodb.org/manual/sharding/
&#34;&gt;sharded clusters&lt;/a&gt;, applications can configure the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-concern
&#34;&gt;read concern&lt;/a&gt; at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt;, as in the following example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  ClusterSettings clusterSettings = ClusterSettings.builder()
                            .hosts(asList(
                            new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                            new ServerAddress(&amp;quot;host2&amp;quot;, 27017))).build();
  MongoClientSettings settings = MongoClientSettings.builder()
                                    .clusterSettings(clusterSettings)
                                    .readConcern(ReadConcern.DEFAULT)
                                    .build();
  MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Via a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; object.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(new ConnectionString(
          &amp;quot;mongodb://host1:27017,host2:27017/?readConcernLevel=majority&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Via string that specifies the connection URI:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(
          &amp;quot;mongodb://host1:27017,host2:27017/?readConcernLevel=majority&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoDatabase.html
&#34;&gt;&lt;code&gt;MongoDatabase&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#withReadConcern-com.mongodb.ReadConcern-
&#34;&gt;&lt;code&gt;withReadConcern&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;)
                            .withReadConcern(ReadConcern.DEFAULT);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html
&#34;&gt;&lt;code&gt;MongoCollection&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#withReadConcern-com.mongodb.ReadConcern-
&#34;&gt;&lt;code&gt;withReadConcern&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;)
                            .withReadConcern(ReadConcern.DEFAULT);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MongoDatabase&lt;/code&gt; and &lt;code&gt;MongoCollection&lt;/code&gt; instances are immutable. Calling &lt;code&gt;.withReadConcern()&lt;/code&gt; on an existing &lt;code&gt;MongoDatabase&lt;/code&gt; or &lt;code&gt;MongoCollection&lt;/code&gt; instance returns a new instance and does not affect the instance on which the method is called.&lt;/p&gt;

&lt;p&gt;For example, in the following, the &lt;code&gt;collWithReadConcern&lt;/code&gt; instance has majority read concern whereas the read concern of the &lt;code&gt;collection&lt;/code&gt; is unaffected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collWithReadConcern = collection
                                                  .withReadConcern(ReadConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can build &lt;code&gt;MongoClientOptions&lt;/code&gt;, &lt;code&gt;MongoDatabase&lt;/code&gt;, or &lt;code&gt;MongoCollection&lt;/code&gt; to include a combination of read concern, read preference, and &lt;a href=&#34;http://docs.mongodb.org/manual/reference/write-concern
&#34;&gt;write concern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, the following sets all three at the collection level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection = database.getCollection(&amp;quot;restaurants&amp;quot;)
                .withReadPreference(ReadPreference.primary())
                .withReadConcern(ReadConcern.MAJORITY)
                .withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Write Operations</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/perform-write-operations/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/perform-write-operations/</guid>
      <description>

&lt;h2 id=&#34;write-operations-insert-update-replace-delete&#34;&gt;Write Operations (Insert, Update, Replace, Delete)&lt;/h2&gt;

&lt;p&gt;Perform write operations to insert new documents into a collection, update existing document or documents in a collection, replace an existing document in a collection, or delete existing document or documents from a collection.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.ConnectionString;
import com.mongodb.ServerAddress;
import com.mongodb.WriteConcern;
import com.mongodb.async.client.*;
import com.mongodb.async.SingleResultCallback;

import com.mongodb.client.model.UpdateOptions;
import com.mongodb.client.result.DeleteResult;
import com.mongodb.client.result.UpdateResult;
import com.mongodb.connection.ClusterSettings;
import org.bson.Document;
import org.bson.types.ObjectId;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Updates.combine;
import static com.mongodb.client.model.Updates.currentDate;
import static com.mongodb.client.model.Updates.set;
import static java.util.Arrays.asList;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;considerations&#34;&gt;Considerations&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Always check for errors in any &lt;code&gt;SingleResultCallback&amp;lt;T&amp;gt;&lt;/code&gt; implementation
and handle them appropriately.&lt;/p&gt;

&lt;p&gt;For sake of brevity, this tutorial omits the error check logic in the code examples.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; and a &lt;code&gt;MongoCollection&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = MongoClients.create();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;insert-new-document&#34;&gt;Insert New Document&lt;/h2&gt;

&lt;p&gt;To insert the document into the collection, you can use the collection&amp;rsquo;s &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#insertOne-TDocument-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;insertOne()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document document = new Document(&amp;quot;name&amp;quot;, &amp;quot;Café Con Leche&amp;quot;)
               .append(&amp;quot;contact&amp;quot;, new Document(&amp;quot;phone&amp;quot;, &amp;quot;228-555-0149&amp;quot;)
                                       .append(&amp;quot;email&amp;quot;, &amp;quot;cafeconleche@example.com&amp;quot;)
                                       .append(&amp;quot;location&amp;quot;,Arrays.asList(-73.92502, 40.8279556)))
               .append(&amp;quot;stars&amp;quot;, 3)
               .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Bakery&amp;quot;, &amp;quot;Coffee&amp;quot;, &amp;quot;Pastries&amp;quot;));


collection.insertOne(document, new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Inserted!&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;If no top-level &lt;code&gt;_id&lt;/code&gt; field is specified in the document, the driver automatically adds the &lt;code&gt;_id&lt;/code&gt; field to the inserted document.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;insert-multiple-documents&#34;&gt;Insert Multiple Documents&lt;/h3&gt;

&lt;p&gt;To add multiple documents, you can use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#insertMany-java.util.List-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;insertMany()&lt;/code&gt;&lt;/a&gt; method which takes a list of documents to insert.&lt;/p&gt;

&lt;p&gt;The following example inserts two documents to the collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document doc1 = new Document(&amp;quot;name&amp;quot;, &amp;quot;Amarcord Pizzeria&amp;quot;)
               .append(&amp;quot;contact&amp;quot;, new Document(&amp;quot;phone&amp;quot;, &amp;quot;264-555-0193&amp;quot;)
                                       .append(&amp;quot;email&amp;quot;, &amp;quot;amarcord.pizzeria@example.net&amp;quot;)
                                       .append(&amp;quot;location&amp;quot;,Arrays.asList(-73.88502, 40.749556)))
               .append(&amp;quot;stars&amp;quot;, 2)
               .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Pizzeria&amp;quot;, &amp;quot;Italian&amp;quot;, &amp;quot;Pasta&amp;quot;));


Document doc2 = new Document(&amp;quot;name&amp;quot;, &amp;quot;Blue Coffee Bar&amp;quot;)
               .append(&amp;quot;contact&amp;quot;, new Document(&amp;quot;phone&amp;quot;, &amp;quot;604-555-0102&amp;quot;)
                                       .append(&amp;quot;email&amp;quot;, &amp;quot;bluecoffeebar@example.com&amp;quot;)
                                       .append(&amp;quot;location&amp;quot;,Arrays.asList(-73.97902, 40.8479556)))
               .append(&amp;quot;stars&amp;quot;, 5)
               .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Coffee&amp;quot;, &amp;quot;Pastries&amp;quot;));

List&amp;lt;Document&amp;gt; documents = new ArrayList&amp;lt;Document&amp;gt;();
documents.add(doc1);
documents.add(doc2);

collection.insertMany(documents, new SingleResultCallback&amp;lt;Void&amp;gt;() {
    @Override
    public void onResult(final Void result, final Throwable t) {
        System.out.println(&amp;quot;Documents inserted!&amp;quot;);
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;If no top-level &lt;code&gt;_id&lt;/code&gt; field is specified in the document, the driver automatically adds the &lt;code&gt;_id&lt;/code&gt; field to the inserted document.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;update-existing-documents&#34;&gt;Update Existing Documents&lt;/h2&gt;

&lt;p&gt;To update existing documents in a collection, you can use the collection&amp;rsquo;s
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;updateOne&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;updateMany&lt;/code&gt;&lt;/a&gt; methods.&lt;/p&gt;

&lt;h3 id=&#34;filters&#34;&gt;Filters&lt;/h3&gt;

&lt;p&gt;You can pass in a filter document to the methods to specify which documents to update. The filter document specification is the same as for &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/perform-read-operations/&#34;&gt;read operations&lt;/a&gt;. To facilitate creating filter objects, Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; helper.&lt;/p&gt;

&lt;p&gt;To specify an empty filter (i.e. match all documents in a collection), use an empty &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;

&lt;h3 id=&#34;update-operators&#34;&gt;Update Operators&lt;/h3&gt;

&lt;p&gt;To change a field in a document, MongoDB provides &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update
&#34;&gt;update operators&lt;/a&gt;.  To specify the modification to perform using the update operators, use an updates document.&lt;/p&gt;

&lt;p&gt;To facilitate the creation of updates documents, the Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html
&#34;&gt;&lt;code&gt;Updates&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; field is immutable; i.e. you cannot change the value of the &lt;code&gt;_id&lt;/code&gt; field.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;update-a-single-document&#34;&gt;Update a Single Document&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;updateOne&lt;/code&gt;&lt;/a&gt;  method updates at most a single document, even if the filter condition matches multiple documents in the collection.&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection updates a document whose &lt;code&gt;_id&lt;/code&gt; field equals &lt;code&gt;ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateOne(
                eq(&amp;quot;_id&amp;quot;, new ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)),
                combine(set(&amp;quot;stars&amp;quot;, 1),
                        set(&amp;quot;contact.phone&amp;quot;, &amp;quot;228-555-9999&amp;quot;),
                        currentDate(&amp;quot;lastModified&amp;quot;)),
                new SingleResultCallback&amp;lt;UpdateResult&amp;gt;() {
                        @Override
                        public void onResult(final UpdateResult result, final Throwable t) {
                            System.out.println(result.getModifiedCount());
                        }
                });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifically, the operation uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html#set-java.lang.String-TItem-
&#34;&gt;&lt;code&gt;Updates.set&lt;/code&gt;&lt;/a&gt; to set the value of the &lt;code&gt;stars&lt;/code&gt; field to &lt;code&gt;1&lt;/code&gt; and the &lt;code&gt;contact.phone&lt;/code&gt; field to &lt;code&gt;&amp;quot;228-555-9999&amp;quot;&lt;/code&gt;, and&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html#currentDate-java.lang.String-
&#34;&gt;&lt;code&gt;Updates.currentDate&lt;/code&gt;&lt;/a&gt; to modify the &lt;code&gt;lastModified&lt;/code&gt; field to the current date. If the &lt;code&gt;lastModified&lt;/code&gt; field does not exist, the operator adds the field to the document.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;admonition tip&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;tip&lt;/h5&gt;
&lt;p&gt;In some cases where you may need to update many fields in a document, it may be more efficient to replace the document.  See &lt;a href=&#34;#replace-a-document&#34;&gt;Replace a Document&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;update-multiple-documents&#34;&gt;Update Multiple Documents&lt;/h3&gt;

&lt;p&gt;The   &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;updateMany&lt;/code&gt;&lt;/a&gt; method updates all documents that match the filter condition.&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection updates all documents whose &lt;code&gt;stars&lt;/code&gt; field equals &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateMany(
              eq(&amp;quot;stars&amp;quot;, 2),
              combine(set(&amp;quot;stars&amp;quot;, 0), currentDate(&amp;quot;lastModified&amp;quot;)),
              new SingleResultCallback&amp;lt;UpdateResult&amp;gt;() {
                      @Override
                      public void onResult(final UpdateResult result, final Throwable t) {
                          System.out.println(result.getModifiedCount());
                      }
              });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifically, the operation uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html#set-java.lang.String-TItem-
&#34;&gt;&lt;code&gt;Updates.set&lt;/code&gt;&lt;/a&gt; to set the value of the &lt;code&gt;stars&lt;/code&gt; field to &lt;code&gt;0&lt;/code&gt; , and&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html#currentDate-java.lang.String-
&#34;&gt;&lt;code&gt;Updates.currentDate&lt;/code&gt;&lt;/a&gt; to modify the &lt;code&gt;lastModified&lt;/code&gt; field to the current date. If the &lt;code&gt;lastModified&lt;/code&gt; field does not exist, the operator adds the field to the document.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;update-operations&#34;&gt;Update operations&lt;/h3&gt;

&lt;p&gt;With the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#updateOne-org.bson.conversions.Bson-org.bson.conversions.Bson-com.mongodb.client.model.UpdateOptions-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;updateOne()&lt;/code&gt;&lt;/a&gt;  and  &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-com.mongodb.client.model.UpdateOptions-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;updateMany&lt;/code&gt;&lt;/a&gt; methods, you can include an &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/UpdateOptions.html
&#34;&gt;&lt;code&gt;UpdateOptions&lt;/code&gt;&lt;/a&gt; document to specify the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/db.collection.update/#upsert-option
&#34;&gt;&lt;code&gt;upsert&lt;/code&gt;&lt;/a&gt; option or the &lt;a href=&#34;http://docs.mongodb.org/manual/core/document-validation/#bypass-document-validation
&#34;&gt;&lt;code&gt;bypassDocumentationValidation&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateOne(
                eq(&amp;quot;_id&amp;quot;, 1),
                combine(set(&amp;quot;name&amp;quot;, &amp;quot;Fresh Breads and Tulips&amp;quot;),     
                        currentDate(&amp;quot;lastModified&amp;quot;)),
                new UpdateOptions().upsert(true).bypassDocumentValidation(true),
                new SingleResultCallback&amp;lt;UpdateResult&amp;gt;(){
                        @Override
                        public void onResult(final UpdateResult result, final Throwable t) {
                            System.out.println(result.getModifiedCount());
                        }
                });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;replace-an-existing-document&#34;&gt;Replace an Existing Document&lt;/h2&gt;

&lt;p&gt;To replace an existing document in a collection, you can use the collection&amp;rsquo;s &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#replaceOne-org.bson.conversions.Bson-TDocument-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;replaceOne&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; field is immutable; i.e. you cannot replace the &lt;code&gt;_id&lt;/code&gt; field value.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;filters-1&#34;&gt;Filters&lt;/h3&gt;

&lt;p&gt;You can pass in a filter document to the method to specify which document to replace. The filter document specification is the same as for &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/perform-read-operations/&#34;&gt;read operations&lt;/a&gt;. To facilitate creating filter objects, Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; helper.&lt;/p&gt;

&lt;p&gt;To specify an empty filter (i.e. match all documents in a collection), use an empty &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#replaceOne-org.bson.conversions.Bson-TDocument-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;replaceOne&lt;/code&gt;&lt;/a&gt; method replaces at most a single document, even if the filter condition matches multiple documents in the collection.&lt;/p&gt;

&lt;h3 id=&#34;replace-a-document&#34;&gt;Replace a Document&lt;/h3&gt;

&lt;p&gt;To replace a document, pass a new document to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#replaceOne-org.bson.conversions.Bson-TDocument-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;replaceOne&lt;/code&gt;&lt;/a&gt;  method.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;The replacement document can have different fields from the original document. In the replacement document, you can omit the &lt;code&gt;_id&lt;/code&gt; field since the &lt;code&gt;_id&lt;/code&gt; field is immutable; however, if you do include the &lt;code&gt;_id&lt;/code&gt; field, you cannot specify a different value for the &lt;code&gt;_id&lt;/code&gt; field.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection replaces the document whose &lt;code&gt;_id&lt;/code&gt; field equals &lt;code&gt;ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.replaceOne(
                eq(&amp;quot;_id&amp;quot;, new ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)),
                new Document(&amp;quot;name&amp;quot;, &amp;quot;Green Salads Buffet&amp;quot;)
                        .append(&amp;quot;contact&amp;quot;, &amp;quot;TBD&amp;quot;)
                        .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Salads&amp;quot;, &amp;quot;Health Foods&amp;quot;, &amp;quot;Buffet&amp;quot;)),
                new SingleResultCallback&amp;lt;UpdateResult&amp;gt;() {
                        @Override
                        public void onResult(final UpdateResult result, final Throwable t) {
                            System.out.println(result.getModifiedCount());
                        }
                });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also &lt;a href=&#34;#update-a-single-document&#34;&gt;Update a Document&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;update-options&#34;&gt;Update Options&lt;/h3&gt;

&lt;p&gt;With the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#replaceOne-org.bson.conversions.Bson-TDocument-com.mongodb.client.model.UpdateOptions-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;replaceOne&lt;/code&gt;&lt;/a&gt; method, you can include an &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/UpdateOptions.html
&#34;&gt;&lt;code&gt;UpdateOptions&lt;/code&gt;&lt;/a&gt; document to specify the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/db.collection.update/#upsert-option
&#34;&gt;&lt;code&gt;upsert&lt;/code&gt;&lt;/a&gt; option or the &lt;a href=&#34;http://docs.mongodb.org/manual/core/document-validation/#bypass-document-validation
&#34;&gt;&lt;code&gt;bypassDocumentationValidation&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.replaceOne(
                eq(&amp;quot;name&amp;quot;, &amp;quot;Orange Patisserie and Gelateria&amp;quot;),
                new Document(&amp;quot;stars&amp;quot;, 5)
                        .append(&amp;quot;contact&amp;quot;, &amp;quot;TBD&amp;quot;)
                        .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Cafe&amp;quot;, &amp;quot;Pastries&amp;quot;, &amp;quot;Ice Cream&amp;quot;)),
                new UpdateOptions().upsert(true).bypassDocumentValidation(true),
                new SingleResultCallback&amp;lt;UpdateResult&amp;gt;() {
                    @Override
                    public void onResult(final UpdateResult result, final Throwable t) {
                        System.out.println(result.getModifiedCount());
                    }
                });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;delete-documents&#34;&gt;Delete Documents&lt;/h2&gt;

&lt;p&gt;To delete documents in a collection, you can use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#deleteOne-org.bson.conversions.Bson-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;deleteOne&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#deleteMany-org.bson.conversions.Bson-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;deleteMany&lt;/code&gt;&lt;/a&gt; methods.&lt;/p&gt;

&lt;h3 id=&#34;filters-2&#34;&gt;Filters&lt;/h3&gt;

&lt;p&gt;You can pass in a filter document to the methods to specify which documents to delete. The filter document specification is the same as for &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/perform-read-operations/&#34;&gt;read operations&lt;/a&gt;. To facilitate creating filter objects, Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; helper.&lt;/p&gt;

&lt;p&gt;To specify an empty filter (i.e. match all documents in a collection), use an empty &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;

&lt;h3 id=&#34;delete-a-single-document&#34;&gt;Delete a Single Document&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#deleteOne-org.bson.conversions.Bson-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;deleteOne&lt;/code&gt;&lt;/a&gt; method deletes at most a single document, even if the filter condition matches multiple documents in the collection.&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection deletes a document whose &lt;code&gt;_id&lt;/code&gt; field equals &lt;code&gt;ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteOne(eq(&amp;quot;_id&amp;quot;, new ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)),
      new SingleResultCallback&amp;lt;DeleteResult&amp;gt;(){
          @Override
          public void onResult(final DeleteResult result, final Throwable t) {
              System.out.println(result.getDeletedCount());
          }
      });
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-multiple-documents&#34;&gt;Delete Multiple Documents&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#deleteMany-org.bson.conversions.Bson-com.mongodb.async.SingleResultCallback-
&#34;&gt;&lt;code&gt;deleteMany&lt;/code&gt;&lt;/a&gt; method deletes all documents that match the filter condition.&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection deletes all documents whose &lt;code&gt;stars&lt;/code&gt; field equals &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteMany(eq(&amp;quot;stars&amp;quot;, 4),new SingleResultCallback&amp;lt;DeleteResult&amp;gt;(){
    @Override
    public void onResult(final DeleteResult result, final Throwable t) {
        System.out.println(result.getDeletedCount());
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver-async/tutorials/databases-collections/&#34;&gt;Drop a Collection&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;write-concern&#34;&gt;Write Concern&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/reference/write-concern
&#34;&gt;Write concern&lt;/a&gt; describes the level of acknowledgement requested from MongoDB for write operations.&lt;/p&gt;

&lt;p&gt;Applications can configure &lt;a href=&#34;http://docs.mongodb.org/manual/reference/write-concern
&#34;&gt;write concern&lt;/a&gt; at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.html
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt;, as in the following example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  ClusterSettings clusterSettings = ClusterSettings.builder()
                            .hosts(asList(
                            new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                            new ServerAddress(&amp;quot;host2&amp;quot;, 27017))).build();
  MongoClientSettings settings = MongoClientSettings.builder()
                                    .clusterSettings(clusterSettings)
                                    .writeConcern(WriteConcern.MAJORITY).build();
  MongoClient mongoClient = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Via a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ConnectionString.html
&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; object.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(
        new ConnectionString(&amp;quot;mongodb://host1:27017,host2:27017/?w=majority&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Via string that specifies the connection URI:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = MongoClients.create(
        &amp;quot;mongodb://host1:27017,host2:27017/?w=majority&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoDatabase.html
&#34;&gt;&lt;code&gt;MongoDatabase&lt;/code&gt;&lt;/a&gt; via its
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoDatabase.html#withWriteConcern-com.mongodb.WriteConcern-
&#34;&gt;&lt;code&gt;withWriteConcern&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;)
                                     .withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html
&#34;&gt;&lt;code&gt;MongoCollection&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#withWriteConcern-com.mongodb.WriteConcern-
&#34;&gt;&lt;code&gt;withWriteConcern&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;)
                                        .withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MongoDatabase&lt;/code&gt; and &lt;code&gt;MongoCollection&lt;/code&gt; instances are immutable. Calling &lt;code&gt;.withWriteConcern()&lt;/code&gt; on an existing &lt;code&gt;MongoDatabase&lt;/code&gt; or &lt;code&gt;MongoCollection&lt;/code&gt; instance returns a new instance and does not affect the instance on which the method is called.&lt;/p&gt;

&lt;p&gt;For example, in the following, the &lt;code&gt;collWithWriteConcern&lt;/code&gt; instance has the write concern of majority whereas the write concern of the &lt;code&gt;collection&lt;/code&gt; is unaffected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collWithWriteConcern = collection
                                                  .withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can build &lt;code&gt;MongoClientOptions&lt;/code&gt;, &lt;code&gt;MongoDatabase&lt;/code&gt;, or &lt;code&gt;MongoCollection&lt;/code&gt; to include a combination of write concern, &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-concern
&#34;&gt;read concern&lt;/a&gt;, and &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-preference
&#34;&gt;read preference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, the following sets all three at the collection level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection = database.getCollection(&amp;quot;restaurants&amp;quot;)
                .withReadPreference(ReadPreference.primary())
                .withReadConcern(ReadConcern.MAJORITY)
                .withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/mongo-java-driver/3.4/driver-async/reference/monitoring/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/reference/monitoring/</guid>
      <description>

&lt;h1 id=&#34;jmx-monitoring&#34;&gt;JMX Monitoring&lt;/h1&gt;

&lt;p&gt;The driver uses &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/jmx/&#34;&gt;JMX&lt;/a&gt; to create
&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/jmx/mbeans/mxbeans.html&#34;&gt;MXBeans&lt;/a&gt; that allow an
application or end user to monitor various aspects of the driver.&lt;/p&gt;

&lt;p&gt;The driver creates MXBean instances of a single type:
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/management/ConnectionPoolStatisticsMBean.html
&#34;&gt;ConnectionPoolStatisticsMBean&lt;/a&gt;.
 The driver registers one &lt;code&gt;ConnectionPoolStatisticsMBean&lt;/code&gt; instance per each server it connects to. For example, in the case of a replica
 set, the driver creates an instance per each non-hidden member of the replica set.&lt;/p&gt;

&lt;p&gt;Each MXBean instance is required to be registered with a unique object name, which consists of a domain and a set of named properties. All
MXBean instances created by the driver are under the domain &lt;code&gt;&amp;quot;org.mongodb.driver&amp;quot;&lt;/code&gt;.  Instances of &lt;code&gt;ConnectionPoolStatisticsMBean&lt;/code&gt; will have
the following properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clusterId&lt;/code&gt;: a client-generated unique identifier, required to ensure object name uniqueness in situations where an
application has multiple &lt;code&gt;MongoClient&lt;/code&gt; instances connected to the same MongoDB server deployment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;host&lt;/code&gt;: the host name of the server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;port&lt;/code&gt;: the port on which the server is listening&lt;/li&gt;
&lt;li&gt;&lt;code&gt;minSize&lt;/code&gt;: the minimum allowed size of the pool, including idle and in-use members&lt;/li&gt;
&lt;li&gt;&lt;code&gt;maxSize&lt;/code&gt;: the maximum allowed size of the pool, including idle and in-use members&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;: the current size of the pool, including idle and and in-use members&lt;/li&gt;
&lt;li&gt;&lt;code&gt;waitQueueSize&lt;/code&gt;: the current size of the wait queue for a connection from this pool&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkedOutCount&lt;/code&gt;: the current count of connections that are currently in use&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;command-monitoring&#34;&gt;Command Monitoring&lt;/h1&gt;

&lt;p&gt;The driver implements the
&lt;a href=&#34;https://github.com/mongodb/specifications/blob/master/source/command-monitoring/command-monitoring.rst&#34;&gt;command monitoring specification&lt;/a&gt;,
allowing an application to be notified when a command starts and when it either succeeds or fails.&lt;/p&gt;

&lt;p&gt;An application registers command listeners with a &lt;code&gt;MongoClient&lt;/code&gt; by configuring &lt;code&gt;MongoClientSettings&lt;/code&gt; with instances of classes
that implement the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/event/CommandListener.html
&#34;&gt;&lt;code&gt;CommandListener&lt;/code&gt;&lt;/a&gt; interface. Consider the following, somewhat
simplistic, implementation of the &lt;code&gt;CommandListener&lt;/code&gt; interface:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TestCommandListener implements CommandListener {
    @Override
    public void commandStarted(final CommandStartedEvent event) {
        System.out.println(String.format(&amp;quot;Sent command &#39;%s:%s&#39; with id %s to database &#39;%s&#39; &amp;quot;
                                         + &amp;quot;on connection &#39;%s&#39; to server &#39;%s&#39;&amp;quot;,
                                         event.getCommandName(),
                                         event.getCommand().get(event.getCommandName()),
                                         event.getRequestId(),
                                         event.getDatabaseName(),
                                         event.getConnectionDescription()
                                              .getConnectionId(),
                                         event.getConnectionDescription().getServerAddress()));
    }

    @Override
    public void commandSucceeded(final CommandSucceededEvent event) {
        System.out.println(String.format(&amp;quot;Successfully executed command &#39;%s&#39; with id %s &amp;quot;
                                         + &amp;quot;on connection &#39;%s&#39; to server &#39;%s&#39;&amp;quot;,
                                         event.getCommandName(),
                                         event.getRequestId(),
                                         event.getConnectionDescription()
                                              .getConnectionId(),
                                         event.getConnectionDescription().getServerAddress()));
    }

    @Override
    public void commandFailed(final CommandFailedEvent event) {
        System.out.println(String.format(&amp;quot;Failed execution of command &#39;%s&#39; with id %s &amp;quot;
                                         + &amp;quot;on connection &#39;%s&#39; to server &#39;%s&#39; with exception &#39;%s&#39;&amp;quot;,
                                         event.getCommandName(),
                                         event.getRequestId(),
                                         event.getConnectionDescription()
                                              .getConnectionId(),
                                         event.getConnectionDescription().getServerAddress(),
                                         event.getThrowable()));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and an instance of &lt;code&gt;MongoClientSettings&lt;/code&gt; configured with an instance of &lt;code&gt;TestCommandListener&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ClusterSettings clusterSettings = ...
MongoClientSettings settings = MongoClientSettings.builder()
                                       .clusterSettings(clusterSettings)
                                       .addCommandListener(new TestCommandListener())
                                       .build();
MongoClient client = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;MongoClient&lt;/code&gt; configured with these options will print a message to &lt;code&gt;System.out&lt;/code&gt; before sending each command to a MongoDB server, and
another message upon either successful completion or failure of each command.&lt;/p&gt;

&lt;h1 id=&#34;cluster-monitoring&#34;&gt;Cluster Monitoring&lt;/h1&gt;

&lt;p&gt;The driver implements the
&lt;a href=&#34;https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring-monitoring.rst&#34;&gt;SDAM Monitoring specification&lt;/a&gt;,
allowing an application to be notified when the driver detects changes to the topology of the MongoDB cluster to which it is connected.&lt;/p&gt;

&lt;p&gt;An application registers listeners with a &lt;code&gt;MongoClient&lt;/code&gt; by configuring  &lt;code&gt;MongoClientSettings&lt;/code&gt; with instances of classes that
implement any of the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/event/ClusterListener.html
&#34;&gt;&lt;code&gt;ClusterListener&lt;/code&gt;&lt;/a&gt;,
 &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/event/ServerListener.html
&#34;&gt;&lt;code&gt;ServerListener&lt;/code&gt;&lt;/a&gt;,
or &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/event/ServerMonitorListener.html
&#34;&gt;&lt;code&gt;ServerMonitorListener&lt;/code&gt;&lt;/a&gt; interfaces.&lt;/p&gt;

&lt;p&gt;Consider the following, somewhat simplistic, example of a cluster listener:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TestClusterListener implements ClusterListener {
    private final ReadPreference readPreference;
    private boolean isWritable;
    private boolean isReadable;

    public TestClusterListener(final ReadPreference readPreference) {
        this.readPreference = readPreference;
    }

    @Override
    public void clusterOpening(final ClusterOpeningEvent clusterOpeningEvent) {
        System.out.println(String.format(&amp;quot;Cluster with unique client identifier %s opening&amp;quot;,
                clusterOpeningEvent.getClusterId()));
    }

    @Override
    public void clusterClosed(final ClusterClosedEvent clusterClosedEvent) {
        System.out.println(String.format(&amp;quot;Cluster with unique client identifier %s closed&amp;quot;,
                clusterClosedEvent.getClusterId()));
    }

    @Override
    public void clusterDescriptionChanged(final ClusterDescriptionChangedEvent event) {
        if (!isWritable) {
            if (event.getNewDescription().hasWritableServer()) {
                isWritable = true;
                System.out.println(&amp;quot;Writable server available!&amp;quot;);
            }
        } else {
            if (!event.getNewDescription().hasWritableServer()) {
                isWritable = false;
                System.out.println(&amp;quot;No writable server available!&amp;quot;);
            }
        }

        if (!isReadable) {
            if (event.getNewDescription().hasReadableServer(readPreference)) {
                isReadable = true;
                System.out.println(&amp;quot;Readable server available!&amp;quot;);
            }
        } else {
            if (!event.getNewDescription().hasReadableServer(readPreference)) {
                isReadable = false;
                System.out.println(&amp;quot;No readable server available!&amp;quot;);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and an instance of &lt;code&gt;MongoClientSettings&lt;/code&gt; configured with an instance of &lt;code&gt;TestClusterListener&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;List&amp;lt;ServerAddress&amp;gt; seedList = ...
ClusterSettings clusterSettings = ClusterSettings.builder()
                                          .hosts(seedList)
                                          .addClusterListener(new TestClusterListener(ReadPreference.secondary()))
                                          .build();
MongoClientSettings settings = MongoClientSettings.builder()
                                       .clusterSettings(clusterSettings)
                                       .build();
MongoClient client = MongoClients.create(settings);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;MongoClient&lt;/code&gt; configured with these settings will print a message to &lt;code&gt;System.out&lt;/code&gt; when the MongoClient is created with these options,
and when that MongoClient is closed.  In addition, it will print a message when the client enters a state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;with an available server that will accept writes&lt;/li&gt;
&lt;li&gt;without an available server that will accept writes&lt;/li&gt;
&lt;li&gt;with an available server that will accept reads using the configured &lt;code&gt;ReadPreference&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;without an available server that will accept reads using the configured &lt;code&gt;ReadPreference&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SSL</title>
      <link>/mongo-java-driver/3.4/driver-async/tutorials/ssl/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver-async/tutorials/ssl/</guid>
      <description>

&lt;h2 id=&#34;tls-ssl&#34;&gt;TLS/SSL&lt;/h2&gt;

&lt;p&gt;The Java driver supports TLS/SSL connections to MongoDB servers using
the underlying support for TLS/SSL provided by the JDK.
To use TLS/SSL, you must configure the asynchronous driver to use &lt;a href=&#34;http://netty.io/&#34;&gt;Netty&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;specify-tls-ssl-and-netty-configuration&#34;&gt;Specify TLS/SSL and Netty Configuration&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;If your application requires Netty, it must explicitly add a dependency to
Netty artifacts.  The driver is currently tested against Netty 4.0.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;via-connection-string&#34;&gt;Via Connection String&lt;/h3&gt;

&lt;p&gt;To configure the driver to use Netty, include the  &lt;code&gt;ssl=true&lt;/code&gt;  and  &lt;code&gt;streamType=netty&lt;/code&gt; options in the connection string, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient client = MongoClients.create(&amp;quot;mongodb://localhost/?streamType=netty&amp;amp;ssl=true&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;You can also specify the connection string via the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ConnectionString.html&#34;&gt;&lt;code&gt;ConnectionString&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;via-mongoclientsettings&#34;&gt;Via &lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To specify TLS/SSL with  &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoClientSettings.Builder.html#streamFactoryFactory-com.mongodb.connection.StreamFactoryFactory-
&#34;&gt;&lt;code&gt;MongoClientSettings&lt;/code&gt;&lt;/a&gt; , set the &lt;code&gt;sslEnabled&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;, and the stream factory to &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/connection/netty/NettyStreamFactoryFactory.html
&#34;&gt;&lt;code&gt;NettyStreamFactoryFactory&lt;/code&gt;&lt;/a&gt;, as in&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
EventLoopGroup eventLoopGroup = new NioEventLoopGroup();  // make sure application shuts this down


MongoClient client = MongoClients.create(MongoClientSettings.builder()
                        .clusterSettings(ClusterSettings.builder()
                                          .hosts(Arrays.asList(new ServerAddress()))
                                          .build())
                        .streamFactoryFactory(NettyStreamFactoryFactory.builder()
                                          .eventLoopGroup(eventLoopGroup).build())
                        .sslSettings(SslSettings.builder()
                                          .enabled(true)
                                          .build())
                        .build());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, the Netty-based streams will use the &lt;a href=&#34;http://netty.io/4.0/api/io/netty/channel/nio/NioEventLoopGroup.html&#34;&gt;NioEventLoopGroup&lt;/a&gt;
and Netty&amp;rsquo;s &lt;a href=&#34;http://netty.io/4.0/api/io/netty/buffer/ByteBufAllocator.html#DEFAULT&#34;&gt;default &lt;code&gt;ByteBufAllocator&lt;/code&gt;&lt;/a&gt;, but these are
configurable via the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/connection/netty/NettyStreamFactoryFactory.html
&#34;&gt;&lt;code&gt;NettyStreamFactoryFactory&lt;/code&gt;&lt;/a&gt; constructor.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Netty may also be configured by setting the &lt;code&gt;org.mongodb.async.type&lt;/code&gt; system property to &lt;code&gt;netty&lt;/code&gt;, but this should be considered as
deprecated as of the 3.1 driver release.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;disable-hostname-verification&#34;&gt;Disable Hostname Verification&lt;/h2&gt;

&lt;p&gt;By default, the driver ensures that the hostname included in the
server&amp;rsquo;s SSL certificate(s) matches the hostname(s) provided when
creating a &lt;code&gt;MongoClient&lt;/code&gt;. However, the hostname verification
requires a Java 7 JVM, as it relies on additions introduced in Java 7
to the &lt;code&gt;javax.net.SSLParameters&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;If your application must run on Java 6, or for some other reason you need
to disable host name verification, you must explicitly indicate this using the &lt;code&gt;invalidHostNameAllowed&lt;/code&gt; property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
EventLoopGroup eventLoopGroup = new NioEventLoopGroup();  // make sure application shuts this down

MongoClient client = MongoClients.create(MongoClientSettings.builder()
                                                 .clusterSettings(ClusterSettings.builder()
                                                                          .hosts(Arrays.asList(new ServerAddress()))
                                                                          .build())
                                                  .sslSettings(SslSettings.builder()
                                                                       .enabled(true)
                                                                       .invalidHostNameAllowed(true)
                                                                       .build())
                                                  .streamFactoryFactory(NettyStreamFactoryFactory.builder()
                                                                            .eventLoopGroup(eventLoopGroup).build())
                                                  .build());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or via the connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient client = MongoClients.create(&amp;quot;mongodb://localhost/?ssl=true&amp;amp;sslInvalidHostNameAllowed=true&amp;amp;streamType=netty&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jvm-system-properties-for-tls-ssl&#34;&gt;JVM System Properties for TLS/SSL&lt;/h2&gt;

&lt;p&gt;A typical application will need to set several JVM system properties to
ensure that the client is able to validate the TLS/SSL certificate
presented by the server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;javax.net.ssl.trustStore&lt;/code&gt;:
  The path to a trust store containing the certificate of the
  signing authority&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;javax.net.ssl.trustStorePassword&lt;/code&gt;:
  The password to access this trust store&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The trust store is typically created with the
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;&lt;code&gt;keytool&lt;/code&gt;&lt;/a&gt;
command line program provided as part of the JDK. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    keytool -importcert -trustcacerts -file &amp;lt;path to certificate authority file&amp;gt;
        -keystore &amp;lt;path to trust store&amp;gt; -storepass &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A typical application will also need to set several JVM system
properties to ensure that the client presents an TLS/SSL certificate to the
MongoDB server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;javax.net.ssl.keyStore&lt;/code&gt;
  The path to a key store containing the client&amp;rsquo;s TLS/SSL certificates&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;javax.net.ssl.keyStorePassword&lt;/code&gt;
  The password to access this key store&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key store is typically created with the
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;&lt;code&gt;keytool&lt;/code&gt;&lt;/a&gt;
or the &lt;a href=&#34;https://www.openssl.org/docs/apps/openssl.html&#34;&gt;&lt;code&gt;openssl&lt;/code&gt;&lt;/a&gt;
command line program.&lt;/p&gt;

&lt;p&gt;For more information on configuring a Java application for TLS/SSL, please
refer to the &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSS
ERefGuide.html&#34;&gt;&lt;code&gt;JSSE Reference Guide&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
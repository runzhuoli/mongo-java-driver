<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drivers on MongoDB Java Driver</title>
    <link>/mongo-java-driver/3.4/driver/</link>
    <description>Recent content in Drivers on MongoDB Java Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Jun 2016 17:29:57 -0400</lastBuildDate>
    <atom:link href="/mongo-java-driver/3.4/driver/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GridFS</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/gridfs/</link>
      <pubDate>Sun, 12 Jun 2016 17:29:57 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/gridfs/</guid>
      <description>

&lt;h2 id=&#34;gridfs&#34;&gt;GridFS&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/core/gridfs
&#34;&gt;GridFS&lt;/a&gt; is a specification for storing and retrieving files that exceed the BSON document size limit of 16MB. Instead of storing a file in a single document, GridFS divides a file into parts, or chunks, and stores each of those chunks as a separate document.&lt;/p&gt;

&lt;p&gt;When you query a GridFS store for a file, the Java driver will reassemble the chunks as needed.&lt;/p&gt;

&lt;p&gt;The following code snippets come from the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/master/driver/src/examples/gridfs/GridFSTour.java
&#34;&gt;&lt;code&gt;GridFSTour.java&lt;/code&gt;&lt;/a&gt; example code
that can be found with the driver source on github.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.Block;
import com.mongodb.MongoClient;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.gridfs.*;
import com.mongodb.client.gridfs.model.*;
import org.bson.Document;
import org.bson.types.ObjectId;
import java.io.*;
import java.nio.file.Files;
import java.nio.charset.StandardCharsets;
import static com.mongodb.client.model.Filters.eq;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-a-gridfs-bucket&#34;&gt;Create a GridFS Bucket&lt;/h2&gt;

&lt;p&gt;GridFS stores files in &lt;a href=&#34;http://docs.mongodb.org/manual/core/gridfs/#gridfs-collections
&#34;&gt;two collections&lt;/a&gt;: a &lt;code&gt;chunks&lt;/code&gt; collection stores the file chunks, and a  &lt;code&gt;files&lt;/code&gt; collection stores file metadata. The two collections are in a common bucket and the collection names are prefixed with the bucket name.&lt;/p&gt;

&lt;p&gt;The Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBuckets.html#create-com.mongodb.client.MongoDatabase-
&#34;&gt;&lt;code&gt;GridFSBuckets.create()&lt;/code&gt;&lt;/a&gt; method
to create the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html
&#34;&gt;&lt;code&gt;GridFSBucket&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoDatabase myDatabase = mongoClient.getDatabase(&amp;quot;mydb&amp;quot;);

// Create a gridFSBucket using the default bucket name &amp;quot;fs&amp;quot;
GridFSBucket gridFSBucket = GridFSBuckets.create(myDatabase);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can specify a bucket name to &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBuckets.html#create-com.mongodb.client.MongoDatabase-java.lang.String-
&#34;&gt;&lt;code&gt;GridFSBuckets.create()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Create a gridFSBucket with a custom bucket name &amp;quot;files&amp;quot;
GridFSBucket gridFSFilesBucket = GridFSBuckets.create(myDatabase, &amp;quot;files&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;GridFS will automatically create indexes on the &lt;code&gt;files&lt;/code&gt; and &lt;code&gt;chunks&lt;/code&gt; collections on first upload of data into the GridFS bucket.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;upload-to-gridfs&#34;&gt;Upload to GridFS&lt;/h2&gt;

&lt;p&gt;To upload data into GridFS, you can upload from an &lt;code&gt;InputStream&lt;/code&gt; or write data to a &lt;code&gt;GridFSUploadStream&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;uploadfromstream&#34;&gt;UploadFromStream&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html#openUploadStream-java.lang.String-com.mongodb.client.gridfs.model.GridFSUploadOptions-
&#34;&gt;&lt;code&gt;GridFSBucket.uploadFromStream&lt;/code&gt;&lt;/a&gt; method reads the contents of an &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/index.html?java/io/InputStream.html&#34;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; and saves it to the &lt;code&gt;GridFSBucket&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;You can use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/model/GridFSUploadOptions.html
&#34;&gt;&lt;code&gt;GridFSUploadOptions&lt;/code&gt;&lt;/a&gt; to configure the chunk size or include additional metadata.&lt;/p&gt;

&lt;p&gt;The following example uploads an &lt;code&gt;InputStream&lt;/code&gt; into &lt;code&gt;GridFSBucket&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Get the input stream

try {
    InputStream streamToUploadFrom = new FileInputStream(new File(&amp;quot;/tmp/mongodb-tutorial.pdf&amp;quot;));
    // Create some custom options
    GridFSUploadOptions options = new GridFSUploadOptions()
                                        .chunkSizeBytes(358400)
                                        .metadata(new Document(&amp;quot;type&amp;quot;, &amp;quot;presentation&amp;quot;));

    ObjectId fileId = gridFSBucket.uploadFromStream(&amp;quot;mongodb-tutorial&amp;quot;, streamToUploadFrom, options);
} catch (FileNotFoundException e){
   // handle exception
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;openuploadstream&#34;&gt;OpenUploadStream&lt;/h3&gt;

&lt;p&gt;You can write data to a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?mongodb/client/gridfs/GridFSUploadStream.html
&#34;&gt;&lt;code&gt;GridFSUploadStream&lt;/code&gt;&lt;/a&gt; which extends &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/index.html?java/io/OutputStream.html&#34;&gt;&lt;code&gt;OutputStream&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html#openUploadStream-java.lang.String-com.mongodb.client.gridfs.model.GridFSUploadOptions-
&#34;&gt;&lt;code&gt;GridFSBucket.openUploadStream&lt;/code&gt;&lt;/a&gt; method returns a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?mongodb/client/gridfs/GridFSUploadStream.html
&#34;&gt;&lt;code&gt;GridFSUploadStream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;GridFSUploadStream&lt;/code&gt; buffers data until it reaches the &lt;code&gt;chunkSizeBytes&lt;/code&gt; and then inserts the chunk into the &lt;code&gt;chunks&lt;/code&gt; collection.  When the &lt;code&gt;GridFSUploadStream&lt;/code&gt; is closed, the final chunk is written and the file metadata is inserted into the &lt;code&gt;files&lt;/code&gt; collection.&lt;/p&gt;

&lt;p&gt;The following example uploads into a &lt;code&gt;GridFSBucket&lt;/code&gt; via the returned &lt;code&gt;GridFSUploadStream&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try {
    GridFSUploadOptions options = new GridFSUploadOptions()
                       .chunkSizeBytes(358400)
                       .metadata(new Document(&amp;quot;type&amp;quot;, &amp;quot;presentation&amp;quot;));

    GridFSUploadStream uploadStream = gridFSFilesBucket.openUploadStream(&amp;quot;mongodb-tutorial-2&amp;quot;, options);
    byte[] data = Files.readAllBytes(new File(&amp;quot;/tmp/MongoDB-manual-master.pdf&amp;quot;).toPath());

    uploadStream.write(data);
    uploadStream.close();
    System.out.println(&amp;quot;The fileId of the uploaded file is: &amp;quot; + uploadStream.getObjectId().toHexString());

} catch(IOException e){
    // handle exception
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;find-files-stored-in-gridfs&#34;&gt;Find Files Stored in GridFS&lt;/h2&gt;

&lt;p&gt;To find the files stored in the &lt;code&gt;GridFSBucket&lt;/code&gt; use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html#find--
&#34;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example prints out the filename of each file stored:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;gridFSBucket.find().forEach(
  new Block&amp;lt;GridFSFile&amp;gt;() {
    public void apply(final GridFSFile gridFSFile) {
        System.out.println(gridFSFile.getFilename());
    }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also provide a custom filter to limit the results returned. The following example prints out the filenames of all files with a &amp;ldquo;image/png&amp;rdquo; value set as the contentType in the user defined metadata document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;gridFSBucket.find(eq(&amp;quot;metadata.contentType&amp;quot;, &amp;quot;image/png&amp;quot;)).forEach(
  new Block&amp;lt;GridFSFile&amp;gt;() {
      public void apply(final GridFSFile gridFSFile) {
          System.out.println(gridFSFile.getFilename());
      }
  });
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;download-from-gridfs&#34;&gt;Download from GridFS&lt;/h2&gt;

&lt;p&gt;There are various ways to download data from GridFS.&lt;/p&gt;

&lt;h3 id=&#34;downloadtostream&#34;&gt;DownloadToStream&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html#downloadToStream-org.bson.types.ObjectId-java.io.OutputStream-
&#34;&gt;&lt;code&gt;downloadToStream&lt;/code&gt;&lt;/a&gt; method reads the contents from MongoDB and writes the data directly to the provided &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/index.html?java/io/OutputStream.html&#34;&gt;&lt;code&gt;OutputStream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To download a file by its file &lt;code&gt;_id&lt;/code&gt;, pass the &lt;code&gt;_id&lt;/code&gt; to the method. The
following example downloads a file by its file &lt;code&gt;_id&lt;/code&gt; into the provided
&lt;code&gt;OutputStream&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ObjectId fileId; //The id of a file uploaded to GridFS, initialize to valid file id 

try {
    FileOutputStream streamToDownloadTo = new FileOutputStream(&amp;quot;/tmp/mongodb-tutorial.pdf&amp;quot;);
    gridFSBucket.downloadToStream(fileId, streamToDownloadTo);
    streamToDownloadTo.close();
    System.out.println(streamToDownloadTo.toString());
} catch (IOException e) {
    // handle exception
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you don&amp;rsquo;t know the &lt;code&gt;_id&lt;/code&gt; of the file but know the filename, then you can pass the filename to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html#downloadToStream-java.lang.String-java.io.OutputStream-com.mongodb.client.gridfs.model.GridFSDownloadOptions-
&#34;&gt;&lt;code&gt;downloadToStream&lt;/code&gt;&lt;/a&gt; method. By default, it will download the latest version of the file. Use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/model/GridFSDownloadOptions.html
&#34;&gt;&lt;code&gt;GridFSDownloadOptions&lt;/code&gt;&lt;/a&gt; to configure which version to download.&lt;/p&gt;

&lt;p&gt;The following example downloads the original version of the file named &amp;ldquo;mongodb-tutorial&amp;rdquo; into the &lt;code&gt;OutputStream&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;try {
    FileOutputStream streamToDownloadTo = new FileOutputStream(&amp;quot;/tmp/mongodb-tutorial.pdf&amp;quot;);
    GridFSDownloadOptions downloadOptions = new GridFSDownloadOptions().revision(0);
    gridFSBucket.downloadToStream(&amp;quot;mongodb-tutorial&amp;quot;, streamToDownloadTo, downloadOptions);
    streamToDownloadTo.close();
} catch (IOException e) {
   // handle exception
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;opendownloadstream&#34;&gt;OpenDownloadStream&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html#openDownloadStream-org.bson.types.ObjectId-
&#34;&gt;&lt;code&gt;openDownloadStream&lt;/code&gt;&lt;/a&gt; method returns a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSDownloadStream.html
&#34;&gt;&lt;code&gt;GridFSDownloadStream&lt;/code&gt;&lt;/a&gt; which extends &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/index.html?java/io/InputStream.html&#34;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following example reads from the &lt;code&gt;GridFSBucket&lt;/code&gt; via the returned &lt;code&gt;InputStream&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ObjectId fileId; //The id of a file uploaded to GridFS, initialize to valid file id 

GridFSDownloadStream downloadStream = gridFSBucket.openDownloadStream(fileId);
int fileLength = (int) downloadStream.getGridFSFile().getLength();
byte[] bytesToWriteTo = new byte[fileLength];
downloadStream.read(bytesToWriteTo);
downloadStream.close();

System.out.println(new String(bytesToWriteTo, StandardCharsets.UTF_8));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also pass the filename to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html#openDownloadStream-java.lang.String-com.mongodb.client.gridfs.model.GridFSDownloadOptions-
&#34;&gt;&lt;code&gt;openDownloadStream&lt;/code&gt;&lt;/a&gt; method. By default it will download the latest version of the file. Use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/model/GridFSDownloadOptions.html
&#34;&gt;&lt;code&gt;GridFSDownloadOptions&lt;/code&gt;&lt;/a&gt; to configure which version to download.&lt;/p&gt;

&lt;p&gt;The following example downloads the latest version of the file named &amp;ldquo;sampleData&amp;rdquo; into the &lt;code&gt;OutputStream&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;GridFSDownloadStream downloadStream = gridFSBucket.openDownloadStream(&amp;quot;sampleData&amp;quot;);
int fileLength = (int) downloadStream.getGridFSFile().getLength();
byte[] bytesToWriteTo = new byte[fileLength];
downloadStream.read(bytesToWriteTo);
downloadStream.close();

System.out.println(new String(bytesToWriteTo, StandardCharsets.UTF_8));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rename-files&#34;&gt;Rename files&lt;/h2&gt;

&lt;p&gt;If you should need to rename a file, then use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html#rename-org.bson.types.ObjectId-java.lang.String-
&#34;&gt;&lt;code&gt;rename&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example renames a file to &amp;ldquo;mongodbTutorial&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ObjectId fileId; //ObjectId of a file uploaded to GridFS

gridFSBucket.rename(fileId, &amp;quot;mongodbTutorial&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;rename&lt;/code&gt; method requires an &lt;code&gt;ObjectId&lt;/code&gt; rather than a &lt;code&gt;filename&lt;/code&gt; to ensure the correct file is renamed.&lt;/p&gt;

&lt;p&gt;To rename multiple revisions of the same filename, first retrieve the full list of files. Then for every file that should be renamed then execute &lt;code&gt;rename&lt;/code&gt; with the corresponding &lt;code&gt;_id&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;delete-files&#34;&gt;Delete files&lt;/h2&gt;

&lt;p&gt;To delete a file from the &lt;code&gt;GridFSBucket&lt;/code&gt; use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/gridfs/GridFSBucket.html#delete-org.bson.types.ObjectId-
&#34;&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example deletes a file from the &lt;code&gt;GridFSBucket&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ObjectId fileId; //ObjectId of a file uploaded to GridFS

gridFSBucket.delete(fileId);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Geospatial Search</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/geospatial-search/</link>
      <pubDate>Sun, 12 Jun 2016 17:26:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/geospatial-search/</guid>
      <description>

&lt;h2 id=&#34;geospatial-search&#34;&gt;Geospatial Search&lt;/h2&gt;

&lt;p&gt;To support geospatial queries, MongoDB provides various geospatial indexes as well as &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query-geospatial/
&#34;&gt;geospatial query operators&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; import com.mongodb.Block;
 import com.mongodb.MongoClient;
 import com.mongodb.client.MongoCollection;
 import com.mongodb.client.MongoDatabase;
 import com.mongodb.client.MongoCursor;
 import com.mongodb.client.model.geojson.*;
 import com.mongodb.client.model.Indexes;
 import com.mongodb.client.model.Filters;
 import org.bson.Document;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following code which the examples in the tutorials will use to print the results of the geospatial search:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; Block&amp;lt;Document&amp;gt; printBlock = new Block&amp;lt;Document&amp;gt;() {
        @Override
        public void apply(final Document document) {
            System.out.println(document.toJson());
        }
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-the-2dsphere-index&#34;&gt;Create the &lt;code&gt;2dsphere&lt;/code&gt; Index&lt;/h2&gt;

&lt;p&gt;To create a &lt;a href=&#34;http://docs.mongodb.org/manual/core/2dsphere
&#34;&gt;&lt;code&gt;2dsphere&lt;/code&gt; index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#geo2dsphere-java.lang.String...-
&#34;&gt;&lt;code&gt;Indexes.geo2dsphere&lt;/code&gt;&lt;/a&gt;
helper to create a specification for the &lt;code&gt;2dsphere&lt;/code&gt; index and pass to &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#createIndex-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;MongoCollection.createIndex()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example creates a &lt;code&gt;2dsphere&lt;/code&gt; index on the &lt;code&gt;&amp;quot;contact.location&amp;quot;&lt;/code&gt; field for the &lt;code&gt;restaurants&lt;/code&gt; collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
collection.createIndex(Indexes.geo2dsphere(&amp;quot;contact.location&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;query-for-locations-near-a-geojson-point&#34;&gt;Query for Locations Near a GeoJSON Point&lt;/h2&gt;

&lt;p&gt;MongoDB provides various &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?reference/operator/query-geospatial.html
&#34;&gt;geospatial query operators&lt;/a&gt;. To facilitate the creation of geospatial queries filters, the Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; class and the &lt;code&gt;com.mongodb.client.model.geojson&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;The following example returns documents that are at least 1000 meters from and at most 5000 meters from the specified GeoJSON point &lt;code&gt;com.mongodb.client.model.geojson.Point&lt;/code&gt;, sorted from nearest to farthest:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Point refPoint = new Point(new Position(-73.9667, 40.78));
collection.find(Filters.near(&amp;quot;contact.location&amp;quot;, refPoint, 5000.0, 1000.0)).forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Read Operations</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/perform-read-operations/</link>
      <pubDate>Thu, 09 Jun 2016 13:21:16 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/perform-read-operations/</guid>
      <description>

&lt;h2 id=&#34;find-operations&#34;&gt;Find Operations&lt;/h2&gt;

&lt;p&gt;Find operations retrieve documents from a collection. You can specify a filter to select only those documents that match the filter condition.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; import com.mongodb.*;
 import com.mongodb.MongoClient;
 import com.mongodb.client.MongoCollection;
 import com.mongodb.client.MongoDatabase;
 import com.mongodb.client.model.Projections;
 import com.mongodb.client.model.Filters;
 import static com.mongodb.client.model.Filters.*;
 import static com.mongodb.client.model.Projections.*;
 import com.mongodb.client.model.Sorts;
 import java.util.Arrays;
 import org.bson.Document;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following code which the examples in the tutorials will use to print the results of the find operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Block&amp;lt;Document&amp;gt; printBlock = new Block&amp;lt;Document&amp;gt;() {
       @Override
       public void apply(final Document document) {
           System.out.println(document.toJson());
       }
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; instance and a &lt;code&gt;MongoCollection&lt;/code&gt; instance&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;query-a-collection&#34;&gt;Query a Collection&lt;/h2&gt;

&lt;p&gt;To query the collection, you can use the collection&amp;rsquo;s &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#find--
&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;You can call the method without any arguments to query all documents in a collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or pass a filter to query for documents that match the filter criteria:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(eq(&amp;quot;name&amp;quot;, &amp;quot;456 Cookies Shop&amp;quot;))
            .forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;query-filters&#34;&gt;Query Filters&lt;/h2&gt;

&lt;p&gt;To query for documents that match certain conditions, pass a filter document to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#find--
&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;h3 id=&#34;empty-filter&#34;&gt;Empty Filter&lt;/h3&gt;

&lt;p&gt;To specify an empty filter (i.e. match all documents in a collection), use an empty &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(new Document()).forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition tip&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;tip&lt;/h5&gt;
&lt;p&gt;For the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#find--&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; method, you can also call the method without passing a filter object to match all documents in a collection.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find().forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;filters-helper&#34;&gt;&lt;code&gt;Filters&lt;/code&gt; Helper&lt;/h3&gt;

&lt;p&gt;To facilitate the creation of filter documents, the Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; class that provides filter condition helper methods.&lt;/p&gt;

&lt;p&gt;Consider the following &lt;code&gt;find&lt;/code&gt; operation which includes a filter &lt;code&gt;Document&lt;/code&gt; which specifies that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;stars&lt;/code&gt; field is greater than or equal to 2 and less than 5, &lt;em&gt;AND&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;the &lt;code&gt;categories&lt;/code&gt; field equals &lt;code&gt;&amp;quot;Bakery&amp;quot;&lt;/code&gt; (or if &lt;code&gt;categories&lt;/code&gt; is an array, contains the string &lt;code&gt;&amp;quot;Bakery&amp;quot;&lt;/code&gt; as an element):&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(
    new Document(&amp;quot;stars&amp;quot;, new Document(&amp;quot;$gte&amp;quot;, 2)
          .append(&amp;quot;$lt&amp;quot;, 5))
          .append(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)).forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following example specifies the same filter condition using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; helper methods:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
            .forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a list of MongoDB query filter operators, refer to the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query
&#34;&gt;MongoDB Manual&lt;/a&gt;. For the associated &lt;code&gt;Filters&lt;/code&gt; helpers, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt;.
See also the  &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/query-documents
&#34;&gt;Query Documents Tutorial&lt;/a&gt; for an overview of querying in MongoDB, including specifying filter conditions on arrays and embedded documents.&lt;/p&gt;

&lt;h2 id=&#34;finditerable&#34;&gt;FindIterable&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#find--
&#34;&gt;&lt;code&gt;find()&lt;/code&gt;&lt;/a&gt; method returns an instance of the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/FindIterable.html
&#34;&gt;&lt;code&gt;FindIterable&lt;/code&gt;&lt;/a&gt; interface. The interface provides various methods that you can chain to the &lt;code&gt;find()&lt;/code&gt; method to modify the output or behavior of the query, such as &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/FindIterable.html#sort-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;sort()&lt;/code&gt;&lt;/a&gt;  or &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/FindIterable.html#projection-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;projection()&lt;/code&gt;&lt;/a&gt;, as well as for iterating the results, such as &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoIterable.html#iterator--
&#34;&gt;&lt;code&gt;iterator()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoIterable.html#forEach-com.mongodb.Block-
&#34;&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;projections&#34;&gt;Projections&lt;/h3&gt;

&lt;p&gt;By default, queries in MongoDB return all fields in matching documents. To specify the fields to return in the matching documents, you can specify a &lt;a href=&#34;http://docs.mongodb.org/manual/tutorial/project-fields-from-query-results/#projection-document
&#34;&gt;projection document&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Consider the following &lt;code&gt;find&lt;/code&gt; operation which includes a projection &lt;code&gt;Document&lt;/code&gt; which specifies that the matching documents return only the &lt;code&gt;name&lt;/code&gt; field, &lt;code&gt;stars&lt;/code&gt; field, and the &lt;code&gt;categories&lt;/code&gt; field.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
                .projection(new Document(&amp;quot;name&amp;quot;, 1)
                     .append(&amp;quot;stars&amp;quot;, 1)
                     .append(&amp;quot;categories&amp;quot;,1)
                     .append(&amp;quot;_id&amp;quot;, 0))
                .forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To facilitate the creation of projection documents, the Java driver provides the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Projections.html
&#34;&gt;&lt;code&gt;Projections&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
                .projection(fields(include(&amp;quot;name&amp;quot;, &amp;quot;stars&amp;quot;, &amp;quot;categories&amp;quot;), excludeId()))
                .forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the projection document, you can also specify a projection expression using a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?reference/operator/projection/.html
&#34;&gt;projection operator&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For an example on using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Projections.html#metaTextScore-java.lang.String-
&#34;&gt;&lt;code&gt;Projections.metaTextScore&lt;/code&gt;&lt;/a&gt;,
see the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/text-search/&#34;&gt;Text Search tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;sorts&#34;&gt;Sorts&lt;/h3&gt;

&lt;p&gt;To sort documents, pass a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/cursor.sort/#cursor.sort
&#34;&gt;sort specification document&lt;/a&gt; to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/FindIterable.html#sort-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;FindIterable.sort()&lt;/code&gt;&lt;/a&gt; method.  The Java driver provides &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/sorts/&#34;&gt;&lt;code&gt;Sorts&lt;/code&gt;&lt;/a&gt; helpers to facilitate the sort specification document.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
                .sort(Sorts.ascending(&amp;quot;name&amp;quot;))
                .forEach(printBlock);

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sort-with-projections&#34;&gt;Sort with Projections&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/FindIterable.html
&#34;&gt;&lt;code&gt;FindIterable&lt;/code&gt;&lt;/a&gt; methods themselves return &lt;code&gt;FindIterable&lt;/code&gt; objects, and as such, you can append multiple &lt;code&gt;FindIterable&lt;/code&gt; methods to the &lt;code&gt;find()&lt;/code&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(and(gte(&amp;quot;stars&amp;quot;, 2), lt(&amp;quot;stars&amp;quot;, 5), eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)))
                .sort(Sorts.ascending(&amp;quot;name&amp;quot;))
                .projection(fields(include(&amp;quot;name&amp;quot;, &amp;quot;stars&amp;quot;, &amp;quot;categories&amp;quot;), excludeId()))
                .forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mongoiterable&#34;&gt;MongoIterable&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoIterable.html
&#34;&gt;&lt;code&gt;MongoIterable&lt;/code&gt;&lt;/a&gt; interface provides helper methods to access the results of an operation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoIterable.html#iterator--
&#34;&gt;&lt;code&gt;iterator()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoIterable.html#first--
&#34;&gt;&lt;code&gt;first()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoIterable.html#forEach-com.mongodb.Block-
&#34;&gt;&lt;code&gt;forEach()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoIterable.html#map-com.mongodb.Function-
&#34;&gt;&lt;code&gt;map()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoIterable.html#into-A-
&#34;&gt;&lt;code&gt;into()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;read-preference&#34;&gt;Read Preference&lt;/h2&gt;

&lt;p&gt;For read operations on &lt;a href=&#34;http://docs.mongodb.org/manual/replication/
&#34;&gt;replica sets&lt;/a&gt; or &lt;a href=&#34;http://docs.mongodb.org/manual/sharding/
&#34;&gt;sharded clusters&lt;/a&gt;, applications can configure the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-preference
&#34;&gt;read preference&lt;/a&gt; at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClientOptions.html
&#34;&gt;&lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClientOptions options = MongoClientOptions.builder().readPreference(
                                  ReadPreference.secondary()).build();
  MongoClient mongoClient = new MongoClient(Arrays.asList(
                                  new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                                  new ServerAddress(&amp;quot;host2&amp;quot;, 27017)), options);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Via &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?/com/mongodb/MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt;, as in the following example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = new MongoClient(
    new MongoClientURI(&amp;quot;mongodb://host1:27017,host2:27017/?readPreference=secondary&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html
&#34;&gt;&lt;code&gt;MongoDatabase&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#withReadPreference-com.mongodb.ReadPreference-
&#34;&gt;&lt;code&gt;withReadPreference&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;)
                         .withReadPreference(ReadPreference.secondary());
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html
&#34;&gt;&lt;code&gt;MongoCollection&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#withReadPreference-com.mongodb.ReadPreference-
&#34;&gt;&lt;code&gt;withReadPreference&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;)
            .withReadPreference(ReadPreference.secondary());
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MongoDatabase&lt;/code&gt; and &lt;code&gt;MongoCollection&lt;/code&gt; instances are immutable. Calling &lt;code&gt;.withReadPreference()&lt;/code&gt; on an existing &lt;code&gt;MongoDatabase&lt;/code&gt; or &lt;code&gt;MongoCollection&lt;/code&gt; instance returns a new instance and does not affect the instance on which the method is called.&lt;/p&gt;

&lt;p&gt;For example, in the following, the &lt;code&gt;collectionWithReadPref&lt;/code&gt; instance has the read preference of primaryPreferred whereas the read preference of the &lt;code&gt;collection&lt;/code&gt; is unaffected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoCollection&amp;lt;Document&amp;gt; collectionWithReadPref =  collection.withReadPreference(ReadPreference.primaryPreferred());
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;read-concern&#34;&gt;Read Concern&lt;/h2&gt;

&lt;p&gt;For read operations on &lt;a href=&#34;http://docs.mongodb.org/manual/replication/
&#34;&gt;replica sets&lt;/a&gt; or &lt;a href=&#34;http://docs.mongodb.org/manual/sharding/
&#34;&gt;sharded clusters&lt;/a&gt;, applications can configure the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-concern
&#34;&gt;read concern&lt;/a&gt; at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?/com/mongodb/MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt;, as in the following example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(
  new MongoClientURI(&amp;quot;mongodb://host1:27017,host2:27017/?readConcernLevel=majority&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Via &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClientOptions.html
&#34;&gt;&lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/a&gt;, as in the following example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientOptions options = MongoClientOptions.builder().readConcern(ReadConcern.DEFAULT).build();
MongoClient mongoClient = new MongoClient(Arrays.asList(
                              new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                              new ServerAddress(&amp;quot;host1&amp;quot;, 27017)), options);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html
&#34;&gt;&lt;code&gt;MongoDatabase&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#withReadConcern-com.mongodb.ReadConcern-
&#34;&gt;&lt;code&gt;withReadConcern&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;)
                                    .withReadConcern(ReadConcern.DEFAULT);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html
&#34;&gt;&lt;code&gt;MongoCollection&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#withReadConcern-com.mongodb.ReadConcern-
&#34;&gt;&lt;code&gt;withReadConcern&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;)
                                          .withReadConcern(ReadConcern.DEFAULT);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MongoDatabase&lt;/code&gt; and &lt;code&gt;MongoCollection&lt;/code&gt; instances are immutable. Calling &lt;code&gt;.withReadConcern()&lt;/code&gt; on an existing &lt;code&gt;MongoDatabase&lt;/code&gt; or &lt;code&gt;MongoCollection&lt;/code&gt; instance returns a new instance and does not affect the instance on which the method is called.&lt;/p&gt;

&lt;p&gt;For example, in the following, the &lt;code&gt;collWithReadConcern&lt;/code&gt; instance has majority read concern whereas the read concern of the &lt;code&gt;collection&lt;/code&gt; is unaffected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collWithReadConcern = collection
                                                  .withReadConcern(ReadConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can build &lt;code&gt;MongoClientOptions&lt;/code&gt;, &lt;code&gt;MongoDatabase&lt;/code&gt;, or &lt;code&gt;MongoCollection&lt;/code&gt; to include a combination of read concern, read preference, and &lt;a href=&#34;http://docs.mongodb.org/manual/reference/write-concern
&#34;&gt;write concern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, the following sets all three at the collection level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection = database.getCollection(&amp;quot;restaurants&amp;quot;)
                .withReadPreference(ReadPreference.primary())
                .withReadConcern(ReadConcern.MAJORITY)
                .withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Write Operations</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/perform-write-operations/</link>
      <pubDate>Thu, 09 Jun 2016 13:21:16 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/perform-write-operations/</guid>
      <description>

&lt;h2 id=&#34;write-operations-insert-update-replace-delete&#34;&gt;Write Operations (Insert, Update, Replace, Delete)&lt;/h2&gt;

&lt;p&gt;Perform write operations to insert new documents into a collection, update existing document or documents in a collection, replace an existing document in a collection, or delete existing document or documents from a collection.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; import com.mongodb.*;
 import com.mongodb.MongoClient;
 import com.mongodb.client.MongoCollection;
 import com.mongodb.client.MongoDatabase;
 import com.mongodb.client.model.Filters;
 import static com.mongodb.client.model.Filters.*;
 import static com.mongodb.client.model.Updates.*;
 import com.mongodb.client.model.UpdateOptions;
 import com.mongodb.client.result.*;
 import org.bson.Document;
 import org.bson.types.ObjectId;


 import java.util.List;
 import java.util.Arrays;
 import java.util.ArrayList;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;insert-new-document&#34;&gt;Insert New Document&lt;/h2&gt;

&lt;p&gt;To insert a single document into the collection, you can use the collection&amp;rsquo;s &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#insertOne-TDocument-
&#34;&gt;&lt;code&gt;insertOne()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document document = new Document(&amp;quot;name&amp;quot;, &amp;quot;Café Con Leche&amp;quot;)
               .append(&amp;quot;contact&amp;quot;, new Document(&amp;quot;phone&amp;quot;, &amp;quot;228-555-0149&amp;quot;)
                                       .append(&amp;quot;email&amp;quot;, &amp;quot;cafeconleche@example.com&amp;quot;)
                                       .append(&amp;quot;location&amp;quot;,Arrays.asList(-73.92502, 40.8279556)))
               .append(&amp;quot;stars&amp;quot;, 3)
               .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Bakery&amp;quot;, &amp;quot;Coffee&amp;quot;, &amp;quot;Pastries&amp;quot;));

collection.insertOne(document);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;If no top-level &lt;code&gt;_id&lt;/code&gt; field is specified in the document, the Java driver automatically adds the &lt;code&gt;_id&lt;/code&gt; field to the inserted document.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;insert-multiple-documents&#34;&gt;Insert Multiple Documents&lt;/h2&gt;

&lt;p&gt;To add multiple documents, you can use the collection&amp;rsquo;s &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#insertMany-java.util.List-
&#34;&gt;&lt;code&gt;insertMany()&lt;/code&gt;&lt;/a&gt; method, which takes a list of documents to insert.&lt;/p&gt;

&lt;p&gt;The following example inserts two documents to the collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document doc1 = new Document(&amp;quot;name&amp;quot;, &amp;quot;Amarcord Pizzeria&amp;quot;)
               .append(&amp;quot;contact&amp;quot;, new Document(&amp;quot;phone&amp;quot;, &amp;quot;264-555-0193&amp;quot;)
                                       .append(&amp;quot;email&amp;quot;, &amp;quot;amarcord.pizzeria@example.net&amp;quot;)
                                       .append(&amp;quot;location&amp;quot;,Arrays.asList(-73.88502, 40.749556)))
               .append(&amp;quot;stars&amp;quot;, 2)
               .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Pizzeria&amp;quot;, &amp;quot;Italian&amp;quot;, &amp;quot;Pasta&amp;quot;));


Document doc2 = new Document(&amp;quot;name&amp;quot;, &amp;quot;Blue Coffee Bar&amp;quot;)
               .append(&amp;quot;contact&amp;quot;, new Document(&amp;quot;phone&amp;quot;, &amp;quot;604-555-0102&amp;quot;)
                                       .append(&amp;quot;email&amp;quot;, &amp;quot;bluecoffeebar@example.com&amp;quot;)
                                       .append(&amp;quot;location&amp;quot;,Arrays.asList(-73.97902, 40.8479556)))
               .append(&amp;quot;stars&amp;quot;, 5)
               .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Coffee&amp;quot;, &amp;quot;Pastries&amp;quot;));

List&amp;lt;Document&amp;gt; documents = new ArrayList&amp;lt;Document&amp;gt;();
documents.add(doc1);
documents.add(doc2);

collection.insertMany(documents);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;If no top-level &lt;code&gt;_id&lt;/code&gt; field is specified in the documents, the Java driver automatically adds the &lt;code&gt;_id&lt;/code&gt; field to the inserted documents.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;update-existing-documents&#34;&gt;Update Existing Documents&lt;/h2&gt;

&lt;p&gt;To update existing documents in a collection, you can use the collection&amp;rsquo;s &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#updateOne-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateOne()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateMany&lt;/code&gt;&lt;/a&gt; methods.&lt;/p&gt;

&lt;h3 id=&#34;filters&#34;&gt;Filters&lt;/h3&gt;

&lt;p&gt;You can pass in a filter document to the methods to specify which documents to update. The filter document specification is the same as for &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/perform-read-operations/&#34;&gt;read operations&lt;/a&gt;. To facilitate creating filter objects, Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; helper.&lt;/p&gt;

&lt;p&gt;To specify an empty filter (i.e. match all documents in a collection), use an empty &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;

&lt;h3 id=&#34;update-operators&#34;&gt;Update Operators&lt;/h3&gt;

&lt;p&gt;To change a field in a document, MongoDB provides &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/update
&#34;&gt;update operators&lt;/a&gt;.  To specify the modification to perform using the update operators, use an updates document.&lt;/p&gt;

&lt;p&gt;To facilitate the creation of updates documents, the Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html
&#34;&gt;&lt;code&gt;Updates&lt;/code&gt;&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; field is immutable; i.e. you cannot change the value of the &lt;code&gt;_id&lt;/code&gt; field.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;update-a-single-document&#34;&gt;Update a Single Document&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#updateOne-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateOne()&lt;/code&gt;&lt;/a&gt; method updates at most a single document, even if the filter condition matches multiple documents in the collection.&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection updates a document whose &lt;code&gt;_id&lt;/code&gt; field equals &lt;code&gt;ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateOne(
                eq(&amp;quot;_id&amp;quot;, new ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)),
                combine(set(&amp;quot;stars&amp;quot;, 1), set(&amp;quot;contact.phone&amp;quot;, &amp;quot;228-555-9999&amp;quot;), currentDate(&amp;quot;lastModified&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifically, the operation uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html#set-java.lang.String-TItem-
&#34;&gt;&lt;code&gt;Updates.set&lt;/code&gt;&lt;/a&gt; to set the value of the &lt;code&gt;stars&lt;/code&gt; field to &lt;code&gt;1&lt;/code&gt; and the &lt;code&gt;contact.phone&lt;/code&gt; field to &lt;code&gt;&amp;quot;228-555-9999&amp;quot;&lt;/code&gt;, and&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html#currentDate-java.lang.String-
&#34;&gt;&lt;code&gt;Updates.currentDate&lt;/code&gt;&lt;/a&gt; to modify the &lt;code&gt;lastModified&lt;/code&gt; field to the current date. If the &lt;code&gt;lastModified&lt;/code&gt; field does not exist, the operator adds the field to the document.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;div class=&#34;admonition tip&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;tip&lt;/h5&gt;
&lt;p&gt;In some cases where you may need to update many fields in a document, it may be more efficient to replace the document.  See &lt;a href=&#34;#replace-a-document&#34;&gt;Replace a Document&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;update-multiple-documents&#34;&gt;Update Multiple Documents&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateMany&lt;/code&gt;&lt;/a&gt; method updates all documents that match the filter condition.&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection updates all documents whose &lt;code&gt;stars&lt;/code&gt; field equals &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateMany(
              eq(&amp;quot;stars&amp;quot;, 2),
              combine(set(&amp;quot;stars&amp;quot;, 0), currentDate(&amp;quot;lastModified&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specifically, the operation uses:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html#set-java.lang.String-TItem-
&#34;&gt;&lt;code&gt;Updates.set&lt;/code&gt;&lt;/a&gt; to set the value of the &lt;code&gt;stars&lt;/code&gt; field to &lt;code&gt;0&lt;/code&gt; , and&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Updates.html#currentDate-java.lang.String-
&#34;&gt;&lt;code&gt;Updates.currentDate&lt;/code&gt;&lt;/a&gt; to modify the &lt;code&gt;lastModified&lt;/code&gt; field to the current date. If the &lt;code&gt;lastModified&lt;/code&gt; field does not exist, the operator adds the field to the document.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;update-options&#34;&gt;Update Options&lt;/h3&gt;

&lt;p&gt;With the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#updateOne-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateOne()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/async/client/MongoCollection.html#updateMany-org.bson.conversions.Bson-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;updateMany&lt;/code&gt;&lt;/a&gt; methods, you can include an &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/UpdateOptions.html
&#34;&gt;&lt;code&gt;UpdateOptions&lt;/code&gt;&lt;/a&gt; document to specify the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/db.collection.update/#upsert-option
&#34;&gt;&lt;code&gt;upsert&lt;/code&gt;&lt;/a&gt; option or the &lt;a href=&#34;http://docs.mongodb.org/manual/core/document-validation/#bypass-document-validation
&#34;&gt;&lt;code&gt;bypassDocumentationValidation&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.updateOne(
                eq(&amp;quot;_id&amp;quot;, 1),
                combine(set(&amp;quot;name&amp;quot;, &amp;quot;Fresh Breads and Tulips&amp;quot;), currentDate(&amp;quot;lastModified&amp;quot;)),
                new UpdateOptions().upsert(true).bypassDocumentValidation(true));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;replace-an-existing-document&#34;&gt;Replace an Existing Document&lt;/h2&gt;

&lt;p&gt;To replace an existing document in a collection, you can use the collection&amp;rsquo;s &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#replaceOne-org.bson.conversions.Bson-TDocument-
&#34;&gt;&lt;code&gt;replaceOne&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;The &lt;code&gt;_id&lt;/code&gt; field is immutable; i.e. you cannot replace the &lt;code&gt;_id&lt;/code&gt; field value.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;filters-1&#34;&gt;Filters&lt;/h3&gt;

&lt;p&gt;You can pass in a filter document to the method to specify which document to replace. The filter document specification is the same as for &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/perform-read-operations/&#34;&gt;read operations&lt;/a&gt;. To facilitate creating filter objects, Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; helper.&lt;/p&gt;

&lt;p&gt;To specify an empty filter (i.e. match all documents in a collection), use an empty &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#replaceOne-org.bson.conversions.Bson-TDocument-
&#34;&gt;&lt;code&gt;replaceOne&lt;/code&gt;&lt;/a&gt; method replaces at most a single document, even if the filter condition matches multiple documents in the collection.&lt;/p&gt;

&lt;h3 id=&#34;replace-a-document&#34;&gt;Replace a Document&lt;/h3&gt;

&lt;p&gt;To replace a document, pass a new document to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#replaceOne-org.bson.conversions.Bson-TDocument-
&#34;&gt;&lt;code&gt;replaceOne&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;The replacement document can have different fields from the original document. In the replacement document, you can omit the &lt;code&gt;_id&lt;/code&gt; field since the &lt;code&gt;_id&lt;/code&gt; field is immutable; however, if you do include the &lt;code&gt;_id&lt;/code&gt; field, you cannot specify a different value for the &lt;code&gt;_id&lt;/code&gt; field.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection replaces the document whose &lt;code&gt;_id&lt;/code&gt; field equals &lt;code&gt;ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.replaceOne(
                eq(&amp;quot;_id&amp;quot;, new ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)),
                new Document(&amp;quot;name&amp;quot;, &amp;quot;Green Salads Buffet&amp;quot;)
                        .append(&amp;quot;contact&amp;quot;, &amp;quot;TBD&amp;quot;)
                        .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Salads&amp;quot;, &amp;quot;Health Foods&amp;quot;, &amp;quot;Buffet&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also &lt;a href=&#34;#update-a-single-document&#34;&gt;Update a Document&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;update-options-1&#34;&gt;Update Options&lt;/h3&gt;

&lt;p&gt;With the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#replaceOne-org.bson.conversions.Bson-TDocument-
&#34;&gt;&lt;code&gt;replaceOne&lt;/code&gt;&lt;/a&gt;, you can include an &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/UpdateOptions.html
&#34;&gt;&lt;code&gt;UpdateOptions&lt;/code&gt;&lt;/a&gt; document to specify the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/method/db.collection.update/#upsert-option
&#34;&gt;&lt;code&gt;upsert&lt;/code&gt;&lt;/a&gt; option or the &lt;a href=&#34;http://docs.mongodb.org/manual/core/document-validation/#bypass-document-validation
&#34;&gt;&lt;code&gt;bypassDocumentationValidation&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.replaceOne(
                eq(&amp;quot;name&amp;quot;, &amp;quot;Orange Patisserie and Gelateria&amp;quot;),
                new Document(&amp;quot;stars&amp;quot;, 5)
                        .append(&amp;quot;contact&amp;quot;, &amp;quot;TBD&amp;quot;)
                        .append(&amp;quot;categories&amp;quot;, Arrays.asList(&amp;quot;Cafe&amp;quot;, &amp;quot;Pastries&amp;quot;, &amp;quot;Ice Cream&amp;quot;)),
                new UpdateOptions().upsert(true).bypassDocumentValidation(true));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;delete-documents&#34;&gt;Delete Documents&lt;/h2&gt;

&lt;p&gt;To delete documents in a collection, you can use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#deleteOne-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteOne&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#deleteMany-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteMany&lt;/code&gt;&lt;/a&gt; methods.&lt;/p&gt;

&lt;h3 id=&#34;filters-2&#34;&gt;Filters&lt;/h3&gt;

&lt;p&gt;You can pass in a filter document to the methods to specify which documents to delete. The filter document specification is the same as for &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/perform-read-operations/&#34;&gt;read operations&lt;/a&gt;. To facilitate creating filter objects, Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html
&#34;&gt;&lt;code&gt;Filters&lt;/code&gt;&lt;/a&gt; helper.&lt;/p&gt;

&lt;p&gt;To specify an empty filter (i.e. match all documents in a collection), use an empty &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; object.&lt;/p&gt;

&lt;h3 id=&#34;delete-a-single-document&#34;&gt;Delete a Single Document&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#deleteOne-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteOne&lt;/code&gt;&lt;/a&gt; method deletes at most a single document, even if the filter condition matches multiple documents in the collection.&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection deletes a document whose &lt;code&gt;_id&lt;/code&gt; field equals &lt;code&gt;ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteOne(eq(&amp;quot;_id&amp;quot;, new ObjectId(&amp;quot;57506d62f57802807471dd41&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;delete-multiple-documents&#34;&gt;Delete Multiple Documents&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#deleteMany-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;deleteMany&lt;/code&gt;&lt;/a&gt; method deletes all documents that match the filter condition.&lt;/p&gt;

&lt;p&gt;The following operation on the &lt;code&gt;restaurants&lt;/code&gt; collection deletes all documents whose &lt;code&gt;stars&lt;/code&gt; field equals &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.deleteMany(eq(&amp;quot;stars&amp;quot;, 4));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See also &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/databases-collections/&#34;&gt;Drop a Collection&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;write-concern&#34;&gt;Write Concern&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/reference/write-concern
&#34;&gt;Write concern&lt;/a&gt; describes the level of acknowledgement requested from MongoDB for write operations.&lt;/p&gt;

&lt;p&gt;Applications can configure &lt;a href=&#34;http://docs.mongodb.org/manual/reference/write-concern
&#34;&gt;write concern&lt;/a&gt; at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Via &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClientOptions.html
&#34;&gt;&lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/a&gt;, as in the following example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClientOptions options = MongoClientOptions.builder().writeConcern(WriteConcern.MAJORITY).build();
  MongoClient mongoClient = new MongoClient(Arrays.asList(
        new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
        new ServerAddress(&amp;quot;host1&amp;quot;, 27018)), options);
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Via &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?/com/mongodb/MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt;, as in the following example:&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;  MongoClient mongoClient = new MongoClient(
    new MongoClientURI(&amp;quot;mongodb://host1:27017,host2:27017/?w=majority&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html
&#34;&gt;&lt;code&gt;MongoDatabase&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#withWriteConcern-com.mongodb.WriteConcern-
&#34;&gt;&lt;code&gt;withWriteConcern&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;).withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html
&#34;&gt;&lt;code&gt;MongoCollection&lt;/code&gt;&lt;/a&gt; via its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#withWriteConcern-com.mongodb.WriteConcern-
&#34;&gt;&lt;code&gt;withWriteConcern&lt;/code&gt;&lt;/a&gt; method, as in the following example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;).withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;MongoDatabase&lt;/code&gt; and &lt;code&gt;MongoCollection&lt;/code&gt; instances are immutable. Calling &lt;code&gt;.withWriteConcern()&lt;/code&gt; on an existing &lt;code&gt;MongoDatabase&lt;/code&gt; or &lt;code&gt;MongoCollection&lt;/code&gt; instance returns a new instance and does not affect the instance on which the method is called.&lt;/p&gt;

&lt;p&gt;For example, in the following, the &lt;code&gt;collWithWriteConcern&lt;/code&gt; instance has the write concern of majority whereas the write concern of the &lt;code&gt;collection&lt;/code&gt; is unaffected.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collWithWriteConcern = collection
                                                  .withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can build &lt;code&gt;MongoClientOptions&lt;/code&gt;, &lt;code&gt;MongoDatabase&lt;/code&gt;, or &lt;code&gt;MongoCollection&lt;/code&gt; to include a combination of write concern, &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-concern
&#34;&gt;read concern&lt;/a&gt;, and &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-preference
&#34;&gt;read preference&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For example, the following sets all three at the collection level:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection = database.getCollection(&amp;quot;restaurants&amp;quot;)
                .withReadPreference(ReadPreference.primary())
                .withReadConcern(ReadConcern.MAJORITY)
                .withWriteConcern(WriteConcern.MAJORITY);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/aggregation/</link>
      <pubDate>Wed, 08 Jun 2016 14:19:24 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/aggregation/</guid>
      <description>

&lt;h2 id=&#34;aggregation-framework&#34;&gt;Aggregation Framework&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;http://docs.mongodb.org/manual//core/aggregation-pipeline
&#34;&gt;aggregation pipeline&lt;/a&gt; is a framework for data aggregation, modeled on the concept of data processing pipelines.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; import com.mongodb.Block;
 import com.mongodb.MongoClient;
 import com.mongodb.client.MongoCollection;
 import com.mongodb.client.MongoDatabase;
 import com.mongodb.client.model.Aggregates;
 import com.mongodb.client.model.Accumulators;
 import com.mongodb.client.model.Projections;
 import com.mongodb.client.model.Filters;


 import org.bson.Document;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following code which the examples in the tutorials will use to print the results of the aggregation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; Block&amp;lt;Document&amp;gt; printBlock = new Block&amp;lt;Document&amp;gt;() {
        @Override
        public void apply(final Document document) {
            System.out.println(document.toJson());
        }
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; and a &lt;code&gt;MongoCollection&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;perform-aggregation&#34;&gt;Perform Aggregation&lt;/h2&gt;

&lt;p&gt;To perform aggregation, pass a list of &lt;a href=&#34;http://docs.mongodb.org/manual/meta/aggregation-quick-reference
&#34;&gt;aggregation stages&lt;/a&gt; to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#aggregate-java.util.List-
&#34;&gt;&lt;code&gt;MongoCollection.aggregate()&lt;/code&gt;&lt;/a&gt; method.
The Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Aggregates.html
&#34;&gt;&lt;code&gt;Aggregates&lt;/code&gt;&lt;/a&gt; helper class that contains builders for aggregation stages.&lt;/p&gt;

&lt;p&gt;In the following example, the aggregation pipeline&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First uses a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/match/
&#34;&gt;&lt;code&gt;$match&lt;/code&gt;&lt;/a&gt; stage to filter for documents whose &lt;code&gt;categories&lt;/code&gt; array field contains the element &lt;code&gt;Bakery&lt;/code&gt;. The example uses &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/aggregation/#match&#34;&gt;&lt;code&gt;Aggregates.match&lt;/code&gt;&lt;/a&gt; to build the &lt;code&gt;$match&lt;/code&gt; stage.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then, uses  a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/group/
&#34;&gt;&lt;code&gt;$group&lt;/code&gt;&lt;/a&gt; stage to group the matching documents by the &lt;code&gt;stars&lt;/code&gt; field, accumulating a count of documents for each distinct value of &lt;code&gt;stars&lt;/code&gt;. The example uses &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/aggregation/#group&#34;&gt;&lt;code&gt;Aggregates.group&lt;/code&gt;&lt;/a&gt; to build the &lt;code&gt;$group&lt;/code&gt; stage and &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Accumulators#sum-java.lang.String-TExpression-.html
&#34;&gt;&lt;code&gt;Accumulators.sum&lt;/code&gt;&lt;/a&gt; to build the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/group/#accumulator-operator
&#34;&gt;accumulator expression&lt;/a&gt;.  For the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation-group/
&#34;&gt;accumulator expressions&lt;/a&gt; for use within the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/group/
&#34;&gt;&lt;code&gt;$group&lt;/code&gt;&lt;/a&gt; stage, the Java driver provides &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Accumulators.html
&#34;&gt;&lt;code&gt;Accumulators&lt;/code&gt;&lt;/a&gt; helper class.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.aggregate(
      Arrays.asList(
              Aggregates.match(Filters.eq(&amp;quot;categories&amp;quot;, &amp;quot;Bakery&amp;quot;)),
              Aggregates.group(&amp;quot;$stars&amp;quot;, Accumulators.sum(&amp;quot;count&amp;quot;, 1))
      )
).forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;use-aggregation-expressions&#34;&gt;Use Aggregation Expressions&lt;/h3&gt;

&lt;p&gt;For &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation-group/
&#34;&gt;$group accumulator expressions&lt;/a&gt;, the Java driver provides &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Accumulators.html
&#34;&gt;&lt;code&gt;Accumulators&lt;/code&gt;&lt;/a&gt; helper class. For other &lt;a href=&#34;http://docs.mongodb.org/manual/meta/aggregation-quick-reference/#aggregation-expressions
&#34;&gt;aggregation expressions&lt;/a&gt;, manually build the expression &lt;code&gt;Document&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the following example, the aggregation pipeline uses a &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/aggregation/project/
&#34;&gt;&lt;code&gt;$project&lt;/code&gt;&lt;/a&gt; stage to return only the &lt;code&gt;name&lt;/code&gt; field and the calculated field &lt;code&gt;firstCategory&lt;/code&gt; whose value is the first element in the &lt;code&gt;categories&lt;/code&gt; array. The example uses &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/aggregation/#project&#34;&gt;&lt;code&gt;Aggregates.project&lt;/code&gt;&lt;/a&gt; and various
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Projections.html
&#34;&gt;&lt;code&gt;Projections&lt;/code&gt;&lt;/a&gt; methods to build the &lt;code&gt;$project&lt;/code&gt; stage.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.aggregate(
      Arrays.asList(
          Aggregates.project(
              Projections.fields(
                    Projections.excludeId(),
                    Projections.include(&amp;quot;name&amp;quot;),
                    Projections.computed(
                            &amp;quot;firstCategory&amp;quot;,
                            new Document(&amp;quot;$arrayElemAt&amp;quot;, Arrays.asList(&amp;quot;$categories&amp;quot;, 0))
                    )
              )
          )
      )
).forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Text Search</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/text-search/</link>
      <pubDate>Tue, 07 Jun 2016 23:28:50 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/text-search/</guid>
      <description>

&lt;h2 id=&#34;text-search&#34;&gt;Text Search&lt;/h2&gt;

&lt;p&gt;MongoDB supports query operations that perform a &lt;a href=&#34;http://docs.mongodb.org/manual/text-search
&#34;&gt;text search&lt;/a&gt; of string content. To perform text search, MongoDB uses a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-text
&#34;&gt;text index&lt;/a&gt; and the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text
&#34;&gt;&lt;code&gt;$text&lt;/code&gt; query operator&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Java driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html#text-java.lang.String-com.mongodb.client.model.TextSearchOptions-
&#34;&gt;&lt;code&gt;Filters.text()&lt;/code&gt;&lt;/a&gt; helper to facilitate the creation of text search query filters.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; import com.mongodb.Block;
 import com.mongodb.MongoClient;
 import com.mongodb.client.MongoCollection;
 import com.mongodb.client.MongoDatabase;


 import com.mongodb.client.model.Indexes;
 import com.mongodb.client.model.Filters;
 import com.mongodb.client.model.Sorts;
 import com.mongodb.client.model.TextSearchOptions;
 import com.mongodb.client.model.Projections;
 import org.bson.Document;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following code which the examples in the tutorials will use to print the results of the text search:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; Block&amp;lt;Document&amp;gt; printBlock = new Block&amp;lt;Document&amp;gt;() {
        @Override
        public void apply(final Document document) {
            System.out.println(document.toJson());
        }
    };
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-the-text-index&#34;&gt;Create the &lt;code&gt;text&lt;/code&gt; Index&lt;/h2&gt;

&lt;p&gt;To create a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-text
&#34;&gt;text index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/builders/indexes/#text-index&#34;&gt;&lt;code&gt;Indexes.text&lt;/code&gt;&lt;/a&gt;
static helper to create a specification for a text index and pass to &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#createIndex-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;MongoCollection.createIndex()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The following example creates a text index on the &lt;code&gt;name&lt;/code&gt; field for the &lt;code&gt;restaurants&lt;/code&gt; collection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
collection.createIndex(Indexes.text(&amp;quot;name&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;perform-text-search&#34;&gt;Perform Text Search&lt;/h2&gt;

&lt;p&gt;To perform text search, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html#text-java.lang.String-com.mongodb.client.model.TextSearchOptions-
&#34;&gt;&lt;code&gt;Filters.text()&lt;/code&gt;&lt;/a&gt; helper to specify the text search query filter.&lt;/p&gt;

&lt;p&gt;For example, the following code performs a text search on the &lt;code&gt;name&lt;/code&gt; field for the word &lt;code&gt;&amp;quot;bakery&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;coffee&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;long matchCount = collection.count(Filters.text(&amp;quot;bakery coffee&amp;quot;));
System.out.println(&amp;quot;Text search matches: &amp;quot; + matchCount);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example should print the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;Text search matches: 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on the text search, see &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text
&#34;&gt;&lt;code&gt;$text&lt;/code&gt; operator&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;text-score&#34;&gt;Text Score&lt;/h3&gt;

&lt;p&gt;For each matching document, text search assigns a score, representing the relevance of a document to the specified text search query filter. To return and sort by score, use the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text/#sort-by-text-search-score
&#34;&gt;&lt;code&gt;$meta&lt;/code&gt;&lt;/a&gt; operator in the projection document and the sort expression.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.find(Filters.text(&amp;quot;bakery cafe&amp;quot;))
                              .projection(Projections.metaTextScore(&amp;quot;score&amp;quot;))
                              .sort(Sorts.metaTextScore(&amp;quot;score&amp;quot;)).forEach(printBlock);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example should print the following output:&lt;/p&gt;

&lt;h3 id=&#34;specify-a-text-search-option&#34;&gt;Specify a Text Search Option&lt;/h3&gt;

&lt;p&gt;The  &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Filters.html#text-java.lang.String-com.mongodb.client.model.TextSearchOptions-
&#34;&gt;&lt;code&gt;Filters.text()&lt;/code&gt;&lt;/a&gt; helper can accept various &lt;a href=&#34;http://docs.mongodb.org/manual/reference/operator/query/text
&#34;&gt;text search options&lt;/a&gt;. The Java driver provides &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/TextSearchOptions.html
&#34;&gt;&lt;code&gt;TextSearchOptions&lt;/code&gt;&lt;/a&gt; class to specify these options.&lt;/p&gt;

&lt;p&gt;For example, the following text search specifies the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/text-search-languages
&#34;&gt;text search language&lt;/a&gt; option when performing text search for the word &lt;code&gt;cafe&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;long matchCountEnglish = collection.count(Filters.text(&amp;quot;cafe&amp;quot;, new TextSearchOptions().language(&amp;quot;english&amp;quot;)));
System.out.println(&amp;quot;Text search matches (english): &amp;quot; + matchCountEnglish);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The example should print the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;Text search matches (english): 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information about text search see the following sections in the MongoDB Server Manual:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual//reference/operator/query/text
&#34;&gt;&lt;code&gt;$text&lt;/code&gt; query operator&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual//core/index-text
&#34;&gt;&lt;code&gt;text&lt;/code&gt; index&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/reference/text-search-languages
&#34;&gt;Text Search Languages&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Databases and Collections</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/databases-collections/</link>
      <pubDate>Tue, 31 May 2016 13:40:45 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/databases-collections/</guid>
      <description>

&lt;h2 id=&#34;databases-and-collections&#34;&gt;Databases and Collections&lt;/h2&gt;

&lt;p&gt;MongoDB stores documents in collections; the collections in databases.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Include following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Filters.*;
import com.mongodb.client.model.CreateCollectionOptions;
import com.mongodb.client.model.ValidationOptions;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a running MongoDB deployment.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on connecting to running MongoDB deployments, see
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;access-a-database&#34;&gt;Access a Database&lt;/h2&gt;

&lt;p&gt;Once you have a &lt;code&gt;MongoClient&lt;/code&gt; instance connected to a MongoDB deployment, use its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html#getDatabase-java.lang.String-
&#34;&gt;&lt;code&gt;getDatabase()&lt;/code&gt;&lt;/a&gt; method to access a database.&lt;/p&gt;

&lt;p&gt;Specify the name of the database to the &lt;code&gt;getDatabase()&lt;/code&gt; method. If a database does not exist, MongoDB creates the database when you first store data for that database.&lt;/p&gt;

&lt;p&gt;The following example accesses the &lt;code&gt;test&lt;/code&gt; database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;MongoDatabase&lt;/code&gt; instances are immutable.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;access-a-collection&#34;&gt;Access a Collection&lt;/h2&gt;

&lt;p&gt;Once you have a &lt;code&gt;MongoDatabase&lt;/code&gt; instance, use its &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#getCollection-java.lang.String-
&#34;&gt;&lt;code&gt;getCollection()&lt;/code&gt;&lt;/a&gt;
method to access a collection.&lt;/p&gt;

&lt;p&gt;Specify the name of the collection to the &lt;code&gt;getCollection()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;For example, using the &lt;code&gt;database&lt;/code&gt; instance, the following statement accesses the collection named &lt;code&gt;myTestCollection&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; coll = database.getCollection(&amp;quot;myTestCollection&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;MongoCollection&lt;/code&gt; instances are immutable.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;If a collection does not exist, MongoDB creates the collection when you first store data for that collection.&lt;/p&gt;

&lt;p&gt;You can also explicitly create a collection with various options, such as setting the maximum size or the documentation validation rules.&lt;/p&gt;

&lt;h2 id=&#34;explicitly-create-a-collection&#34;&gt;Explicitly Create a Collection&lt;/h2&gt;

&lt;p&gt;The MongoDB driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#createCollection-java.lang.String-com.mongodb.client.model.CreateCollectionOptions-
&#34;&gt;&lt;code&gt;createCollection()&lt;/code&gt;&lt;/a&gt; method to explicitly create a collection. When you explicitly create a collection, you can specify various collection options, such as a maximum size or the documentation validation rules, with the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/CreateCollectionOptions.html
&#34;&gt;&lt;code&gt;CreateCollectionOptions&lt;/code&gt;&lt;/a&gt; class. If you are not specifying these options, you do not need to explicitly create the collection since MongoDB creates new collections when you first store data for the collections.&lt;/p&gt;

&lt;h3 id=&#34;capped-collection&#34;&gt;Capped Collection&lt;/h3&gt;

&lt;p&gt;For example, the following operation creates a &lt;a href=&#34;http://docs.mongodb.org/manual/core/capped-collections
&#34;&gt;capped collection&lt;/a&gt; sized to 1 megabyte:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;database.createCollection(&amp;quot;cappedCollection&amp;quot;,
          new CreateCollectionOptions().capped(true).sizeInBytes(0x100000));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;document-validation&#34;&gt;Document Validation&lt;/h3&gt;

&lt;p&gt;MongoDB provides the capability to &lt;a href=&#34;http://docs.mongodb.org/manual/core/document-validation
&#34;&gt;validate documents&lt;/a&gt; during updates and insertions. Validation rules are specified on a per-collection basis using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/ValidationOptions.html
&#34;&gt;&lt;code&gt;ValidationOptions&lt;/code&gt;&lt;/a&gt;, which takes a filter document that specifies the validation rules or expressions.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;ValidationOptions collOptions = new ValidationOptions().validator(
        Filters.or(Filters.exists(&amp;quot;email&amp;quot;), Filters.exists(&amp;quot;phone&amp;quot;)));
database.createCollection(&amp;quot;contacts&amp;quot;,
        new CreateCollectionOptions().validationOptions(collOptions));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-a-list-of-collections&#34;&gt;Get A List of Collections&lt;/h2&gt;

&lt;p&gt;You can get a list of the collections in a database using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#listCollectionNames--
&#34;&gt;&lt;code&gt;MongoDatabase.listCollectionNames()&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (String name : database.listCollectionNames()) {
    System.out.println(name);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;drop-a-collection&#34;&gt;Drop a Collection&lt;/h2&gt;

&lt;p&gt;You can drop a collection by using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#drop--
&#34;&gt;&lt;code&gt;MongoCollection.drop()&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;contacts&amp;quot;);
collection.drop();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;immutability&#34;&gt;Immutability&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;MongoDatabase&lt;/code&gt; and &lt;code&gt;MongoCollection&lt;/code&gt; instances are immutable. To create new instances from existing instances that
have different property values, such as &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-concern
&#34;&gt;read concern&lt;/a&gt;, &lt;a href=&#34;http://docs.mongodb.org/manual/reference/read-preference
&#34;&gt;read preference&lt;/a&gt;, and &lt;a href=&#34;http://docs.mongodb.org/manual/reference/write-concern
&#34;&gt;write concern&lt;/a&gt;, the &lt;code&gt;MongoDatabase&lt;/code&gt; and &lt;code&gt;MongoCollection&lt;/code&gt; class provides various methods:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#withReadConcern-com.mongodb.ReadConcern-
&#34;&gt;&lt;code&gt;MongoDatabase.withReadConcern&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#withReadPreference-com.mongodb.ReadPreference-
&#34;&gt;&lt;code&gt;MongoDatabase.withReadPreference&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#withWriteConcern-com.mongodb.WriteConcern-
&#34;&gt;&lt;code&gt;MongoDatabase.withWriteConcern&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#withReadConcern-com.mongodb.ReadConcern-
&#34;&gt;&lt;code&gt;MongoCollection.withReadConcern&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#withReadPreference-com.mongodb.ReadPreference-
&#34;&gt;&lt;code&gt;MongoCollection.withReadPreference&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#withWriteConcern-com.mongodb.WriteConcern-
&#34;&gt;&lt;code&gt;MongoCollection.withWriteConcern&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For details, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/perform-read-operations/&#34;&gt;Read Operations&lt;/a&gt; and &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/perform-write-operations/&#34;&gt;Write Operations&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;codecregistry&#34;&gt;CodecRegistry&lt;/h2&gt;

&lt;p&gt;An overload of the &lt;code&gt;getCollection&lt;/code&gt; method allows clients to specify a different class for representing BSON documents.  For example,
users of the legacy CRUD API from the 2.x driver series may wish to continue using &lt;code&gt;BasicDBObject&lt;/code&gt; in order to ease the transition to the new
CRUD API:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Pass BasicDBObject.class as the second argument
MongoCollection&amp;lt;BasicDBObject&amp;gt; collection = database.getCollection(&amp;quot;mycoll&amp;quot;, BasicDBObject.class);

// insert a document
BasicDBObject document = new BasicDBObject(&amp;quot;x&amp;quot;, 1)
collection.insertOne(document);
document.append(&amp;quot;x&amp;quot;, 2).append(&amp;quot;y&amp;quot;, 3);

// replace a document
collection.replaceOne(Filters.eq(&amp;quot;_id&amp;quot;, document.get(&amp;quot;_id&amp;quot;)), document);

// find documents
List&amp;lt;BasicDBObject&amp;gt; foundDocument = collection.find().into(new ArrayList&amp;lt;BasicDBObject&amp;gt;());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are two requirements that must be met for any class used in this way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;Codec&lt;/code&gt; for it must be registered in the &lt;code&gt;MongoCollection&lt;/code&gt;&amp;rsquo;s &lt;code&gt;CodecRegistry&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;Codec&lt;/code&gt; must be one that encodes and decodes a full BSON document (and not just, for example, a single BSON value like an Int32)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, a &lt;code&gt;MongoCollection&lt;/code&gt; is configured with &lt;code&gt;Codec&lt;/code&gt;s for three classes:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BasicDBObject&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BsonDocument&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Applications, however, are free to register &lt;code&gt;Codec&lt;/code&gt; implementations for other classes by customizing the &lt;code&gt;CodecRegistry&lt;/code&gt;.  New
&lt;code&gt;CodecRegistry&lt;/code&gt; instances are configurable at three levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In a &lt;code&gt;MongoClient&lt;/code&gt; via &lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;MongoDatabase&lt;/code&gt; via its &lt;code&gt;withCodecRegistry&lt;/code&gt; method&lt;/li&gt;
&lt;li&gt;In a &lt;code&gt;MongoCollection&lt;/code&gt; via its &lt;code&gt;withCodecRegistry&lt;/code&gt; method&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Consider the case of encoding and decoding instances of the &lt;code&gt;UUID&lt;/code&gt; class.  The Java driver by default encodes instances of &lt;code&gt;UUID&lt;/code&gt; using a
byte ordering that is not compatible with other MongoDB drivers, and changing the default would be quite dangerous.  But it is
possible for new applications that require interoperability across multiple drivers to be able to change that default, and they can do
that with a &lt;code&gt;CodecRegistry&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// Replaces the default UuidCodec with one that uses the new standard UUID representation
CodecRegistry codecRegistry =
CodecRegistries.fromRegistries(CodecRegistries.fromCodecs(new UuidCodec(UuidRepresentation.STANDARD)),
                               MongoClient.getDefaultCodecRegistry());

// globally
MongoClientOptions options = MongoClientOptions.builder()
                                                .codecRegistry(codecRegistry).build();
MongoClient client = new MongoClient(new ServerAddress(), options);  

// or per database
MongoDatabase database = client.getDatabase(&amp;quot;mydb&amp;quot;)
                               .withCodecRegistry(codecRegistry);

// or per collection
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;mycoll&amp;quot;)
                                               .withCodecRegistry(codecRegistry);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Run Commands</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/commands/</link>
      <pubDate>Tue, 31 May 2016 13:07:04 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/commands/</guid>
      <description>

&lt;h2 id=&#34;run-commands&#34;&gt;Run Commands&lt;/h2&gt;

&lt;p&gt;Not all commands have a specific helper. However you can run any &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command
&#34;&gt;MongoDB command&lt;/a&gt; by using the MongoDatabase&amp;rsquo;s &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoDatabase.html#runCommand-org.bson.conversions.Bson-com.mongodb.ReadPreference-
&#34;&gt;&lt;code&gt;runCommand()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The example below requires a &lt;code&gt;restaurants&lt;/code&gt; collection in the &lt;code&gt;test&lt;/code&gt; database. To create and populate the collection, follow the directions in &lt;a href=&#34;https://github.com/mongodb/docs-assets/tree/drivers&#34;&gt;github&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; import com.mongodb.MongoClient;
 import com.mongodb.client.MongoDatabase;
 import org.bson.Document;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; instance.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;run-buildinfo-and-collstats-commands&#34;&gt;Run &lt;code&gt;buildInfo&lt;/code&gt; and &lt;code&gt;collStats&lt;/code&gt; Commands&lt;/h2&gt;

&lt;p&gt;To run a command, construct a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?org/bson/Document.html
&#34;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt;
object that specifies the command and pass it to the &lt;code&gt;runCommand()&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;The following runs the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command/buildInfo
&#34;&gt;&lt;code&gt;buildInfo&lt;/code&gt;&lt;/a&gt; command and the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command/collStats
&#34;&gt;&lt;code&gt;collStats&lt;/code&gt;&lt;/a&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;Document buildInfoResults = database.runCommand(new Document(&amp;quot;buildInfo&amp;quot;, 1));
System.out.println(buildInfoResults.toJson());

Document collStatsResults = database.runCommand(new Document(&amp;quot;collStats&amp;quot;, &amp;quot;restaurants&amp;quot;));
System.out.println(collStatsResults.toJson());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a list of available MongoDB commands, see &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command
&#34;&gt;MongoDB commands&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create Indexes</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/indexes/</link>
      <pubDate>Tue, 31 May 2016 10:10:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/indexes/</guid>
      <description>

&lt;h2 id=&#34;create-indexes&#34;&gt;Create Indexes&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.mongodb.org/manual/indexes
&#34;&gt;Indexes&lt;/a&gt; support the efficient execution of queries in MongoDB. To create an &lt;a href=&#34;http://docs.mongodb.org/manual/indexes
&#34;&gt;index&lt;/a&gt; on a field or fields, pass an index specification document to the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#createIndex-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;MongoCollection.createIndex()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;p&gt;The MongoDB Java Driver provides
the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html
&#34;&gt;&lt;code&gt;Indexes&lt;/code&gt;&lt;/a&gt; class that
includes static factory methods to create index specification
documents for the various MongoDB Index key types.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;MongoDB only creates an index if an index of the same specification does not already exist.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Include the following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; import com.mongodb.MongoClient;
 import com.mongodb.client.MongoDatabase;
 import com.mongodb.client.MongoCollection;
 import org.bson.Document;


 import com.mongodb.client.model.Indexes;
 import com.mongodb.client.model.IndexOptions;
 import com.mongodb.client.model.Filters;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-mongodb-deployment&#34;&gt;Connect to a MongoDB Deployment&lt;/h2&gt;

&lt;p&gt;Connect to a MongoDB deployment and declare and define a &lt;code&gt;MongoDatabase&lt;/code&gt; and a &lt;code&gt;MongoCollection&lt;/code&gt; instances.&lt;/p&gt;

&lt;p&gt;For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port &lt;code&gt;27017&lt;/code&gt; and define &lt;code&gt;database&lt;/code&gt; to refer to the &lt;code&gt;test&lt;/code&gt; database and &lt;code&gt;collection&lt;/code&gt; to refer to the &lt;code&gt;restaurants&lt;/code&gt; collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
MongoDatabase database = mongoClient.getDatabase(&amp;quot;test&amp;quot;);
MongoCollection&amp;lt;Document&amp;gt; collection = database.getCollection(&amp;quot;restaurants&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For additional information on connecting to MongoDB, see &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;ascending-index&#34;&gt;Ascending Index&lt;/h2&gt;

&lt;p&gt;To create a specification for an ascending index, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html
&#34;&gt;&lt;code&gt;Indexes.ascending&lt;/code&gt;&lt;/a&gt; static helper methods.&lt;/p&gt;

&lt;h3 id=&#34;single-ascending-index&#34;&gt;Single Ascending Index&lt;/h3&gt;

&lt;p&gt;The following example creates an ascending index on the
&lt;code&gt;name&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.ascending(&amp;quot;name&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compound-ascending-index&#34;&gt;Compound Ascending Index&lt;/h3&gt;

&lt;p&gt;The following example creates an ascending &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-compound
&#34;&gt;compound index&lt;/a&gt;  on the &lt;code&gt;stars&lt;/code&gt; field and the &lt;code&gt;name&lt;/code&gt;
 field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.ascending(&amp;quot;stars&amp;quot;, &amp;quot;name&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For an alternative way to create a compound index, see &lt;a href=&#34;#compound-indexes&#34;&gt;Compound Indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;descending-index&#34;&gt;Descending Index&lt;/h2&gt;

&lt;p&gt;To create a specification of a descending index, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html
&#34;&gt;&lt;code&gt;Indexes.descending&lt;/code&gt;&lt;/a&gt; static helper methods.&lt;/p&gt;

&lt;h3 id=&#34;single-descending-key-index&#34;&gt;Single Descending Key Index&lt;/h3&gt;

&lt;p&gt;The following example creates a descending index on the &lt;code&gt;stars&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.descending(&amp;quot;stars&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;compound-descending-key-index&#34;&gt;Compound Descending Key Index&lt;/h3&gt;

&lt;p&gt;The following example creates a descending &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-compound
&#34;&gt;compound index&lt;/a&gt; on the &lt;code&gt;stars&lt;/code&gt; field and the &lt;code&gt;name&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.descending(&amp;quot;stars&amp;quot;, &amp;quot;name&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For an alternative way to create a compound index, see &lt;a href=&#34;#compound-indexes&#34;&gt;Compound Indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;compound-indexes&#34;&gt;Compound Indexes&lt;/h2&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-compound
&#34;&gt;compound index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html
&#34;&gt;&lt;code&gt;Indexes.compoundIndex&lt;/code&gt;&lt;/a&gt; static helper methods.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;To create a specification for a compound index where all the keys are ascending, you can use the &lt;a href=&#34;#compound-ascending-key-index&#34;&gt;&lt;code&gt;ascending()&lt;/code&gt;&lt;/a&gt; method. To create a specification for a compound index where all the keys are descending, you can use the &lt;a href=&#34;##compound-descending-key-index&#34;&gt;&lt;code&gt;descending()&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The following example creates a compound index with the &lt;code&gt;stars&lt;/code&gt; field in descending order and the &lt;code&gt;name&lt;/code&gt; field in ascending order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.compoundIndex(Indexes.descending(&amp;quot;stars&amp;quot;), Indexes.ascending(&amp;quot;name&amp;quot;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;text-indexes&#34;&gt;Text Indexes&lt;/h2&gt;

&lt;p&gt;MongoDB provides &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-text
&#34;&gt;text indexes&lt;/a&gt; to support text search of string content. Text indexes can include any field whose value is a string or an array of string elements. To create a specification for a text index, use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#text-java.lang.String-
&#34;&gt;&lt;code&gt;Indexes.text&lt;/code&gt;&lt;/a&gt; static helper method.&lt;/p&gt;

&lt;p&gt;The following example creates a text index on the &lt;code&gt;name&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.text(&amp;quot;name&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;hashed-index&#34;&gt;Hashed Index&lt;/h2&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-hashed
&#34;&gt;hashed index&lt;/a&gt; index, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#hashed-java.lang.String-
&#34;&gt;&lt;code&gt;Indexes.hashed&lt;/code&gt;&lt;/a&gt; static helper method.&lt;/p&gt;

&lt;p&gt;The following example creates a hashed index on the &lt;code&gt;_id&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.hashed(&amp;quot;_id&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;geospatial-indexes&#34;&gt;Geospatial Indexes&lt;/h2&gt;

&lt;p&gt;To support geospatial queries, MongoDB supports various
&lt;a href=&#34;http://docs.mongodb.org/manual/applications/geospatial-indexes
&#34;&gt;geospatial indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;2dsphere&#34;&gt;&lt;code&gt;2dsphere&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/2dsphere
&#34;&gt;&lt;code&gt;2dsphere&lt;/code&gt; index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#geo2dsphere-java.lang.String...-
&#34;&gt;&lt;code&gt;Indexes.geo2dsphere&lt;/code&gt;&lt;/a&gt; static helper methods.&lt;/p&gt;

&lt;p&gt;The following example creates a &lt;code&gt;2dsphere&lt;/code&gt; index on the &lt;code&gt;&amp;quot;contact.location&amp;quot;&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.geo2dsphere(&amp;quot;contact.location&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2d&#34;&gt;&lt;code&gt;2d&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/2d/
&#34;&gt;&lt;code&gt;2d&lt;/code&gt; index&lt;/a&gt; index, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#geo2d-java.lang.String-
&#34;&gt;&lt;code&gt;Indexes.geo2d&lt;/code&gt;&lt;/a&gt;
static helper method.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;A 2d index is for data stored as points on a two-dimensional plane
and is intended for legacy coordinate pairs used in MongoDB 2.2 and
earlier.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;The following example creates a &lt;code&gt;2d&lt;/code&gt; index on the &lt;code&gt;&amp;quot;contact.location&amp;quot;&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;collection.createIndex(Indexes.geo2d(&amp;quot;contact.location&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;geohaystack&#34;&gt;geoHaystack&lt;/h3&gt;

&lt;p&gt;To create a specification for a &lt;a href=&#34;http://docs.mongodb.org/manual/core/geohaystack/
&#34;&gt;&lt;code&gt;geoHaystack&lt;/code&gt; index&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/Indexes.html#geoHaystack-java.lang.String-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;Indexes.geoHaystack&lt;/code&gt;&lt;/a&gt; method. &lt;code&gt;geoHaystack&lt;/code&gt; indexes can improve performance on queries that use flat geometries.&lt;/p&gt;

&lt;p&gt;The following example creates a &lt;code&gt;geoHaystack&lt;/code&gt; index on the &lt;code&gt;contact.location&lt;/code&gt; field and an ascending index on the &lt;code&gt;stars&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;IndexOptions haystackOption = new IndexOptions().bucketSize(1.0);
collection.createIndex(
         Indexes.geoHaystack(&amp;quot;contact.location&amp;quot;, Indexes.ascending(&amp;quot;stars&amp;quot;)),
         haystackOption);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To query a haystack index, use the &lt;a href=&#34;http://docs.mongodb.org/manual/reference/command/geoSearch
&#34;&gt;&lt;code&gt;geoSearch&lt;/code&gt;&lt;/a&gt; command.&lt;/p&gt;

&lt;h2 id=&#34;indexoptions&#34;&gt;IndexOptions&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.client.model.IndexOptions;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to the index specification document, the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/MongoCollection.html#createIndex-org.bson.conversions.Bson-
&#34;&gt;&lt;code&gt;createIndex()&lt;/code&gt;&lt;/a&gt; method can take an index options document, such as to create unique indexes or partial indexes.&lt;/p&gt;

&lt;p&gt;The Java Driver provides the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/IndexOptions.html
&#34;&gt;IndexOptions&lt;/a&gt; class to specify various index options.&lt;/p&gt;

&lt;h3 id=&#34;unique-index&#34;&gt;Unique Index&lt;/h3&gt;

&lt;p&gt;The following specifies a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/IndexOptions.html#unique-boolean-
&#34;&gt;&lt;code&gt;unique(true)&lt;/code&gt;&lt;/a&gt; option to create a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-unique
&#34;&gt;unique index&lt;/a&gt; on the &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;stars&lt;/code&gt; fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;IndexOptions indexOptions = new IndexOptions().unique(true);
collection.createIndex(Indexes.ascending(&amp;quot;name&amp;quot;, &amp;quot;stars&amp;quot;), indexOptions);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on unique indexes, see &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-unique
&#34;&gt;Unique Indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;partial-index&#34;&gt;Partial Index&lt;/h3&gt;

&lt;p&gt;To create a &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-partial/
&#34;&gt;partial index&lt;/a&gt;, include a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/model/IndexOptions.html#partialFilterExpression-org.bson.conversions.Bson-
&#34;&gt;partialFilterExpression&lt;/a&gt; as an index option.&lt;/p&gt;

&lt;p&gt;The following example creates a partial index on documents that have &lt;code&gt;status&lt;/code&gt; field equal to &lt;code&gt;&amp;quot;A&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;IndexOptions partialFilterIndexOptions = new IndexOptions()
                .partialFilterExpression(Filters.exists(&amp;quot;contact.email&amp;quot;));
collection.createIndex(
                Indexes.descending(&amp;quot;name&amp;quot;, &amp;quot;stars&amp;quot;), partialFilterIndexOptions);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information on partial indexes, see &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-partial/
&#34;&gt;Partial Indexes&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;get-a-list-of-indexes-on-a-collection&#34;&gt;Get a List of Indexes on a Collection&lt;/h2&gt;

&lt;p&gt;Use the &lt;code&gt;listIndexes()&lt;/code&gt; method to get a list of indexes. The following lists the indexes on the collection:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;for (Document index : collection.listIndexes()) {
    System.out.println(index.toJson());
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For other index options, see &lt;a href=&#34;http://docs.mongodb.org/manual/core/index-properties
&#34;&gt;MongoDB Manual&lt;/a&gt; .&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/authentication/</link>
      <pubDate>Sun, 29 May 2016 23:27:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/authentication/</guid>
      <description>

&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;The Java driver supports all &lt;a href=&#34;http://docs.mongodb.org/manual/core/authentication/
&#34;&gt;MongoDB authentication mechanisms&lt;/a&gt;, including those only available in the
&lt;a href=&#34;http://docs.mongodb.org/manual/administration/install-enterprise/
&#34;&gt;MongoDB Enterprise Edition&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;mongocredential&#34;&gt;&lt;code&gt;MongoCredential&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.MongoCredential;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An authentication credential is represented as an instance of the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html
&#34;&gt;&lt;code&gt;MongoCredential&lt;/code&gt;&lt;/a&gt; class. The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html
&#34;&gt;&lt;code&gt;MongoCredential&lt;/code&gt;&lt;/a&gt; class includes static
factory methods for each of the supported authentication mechanisms.&lt;/p&gt;

&lt;p&gt;To specify a list of these instances, use one of
several &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt; constructors that take a parameter of type
&lt;code&gt;List &amp;lt;MongoCredential&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To specify a single &lt;code&gt;MongoCredential&lt;/code&gt;, you can also use a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?/com/mongodb/MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt; and pass it to a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt; constructor that takes a &lt;code&gt;MongoClientURI&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;Given the flexibility of role-based access control in MongoDB, it is
usually sufficient to authenticate with a single user, but, for
completeness, the driver accepts a list of credentials.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;default-authentication-mechanism&#34;&gt;Default Authentication Mechanism&lt;/h2&gt;

&lt;p&gt;Starting in MongoDB 3.0, MongoDB changed the default authentication
mechanism from &lt;a href=&#34;http://docs.mongodb.org/manual//core/security-mongodb-cr
&#34;&gt;&lt;code&gt;MONGODB-CR&lt;/code&gt;&lt;/a&gt; to
&lt;a href=&#34;http://docs.mongodb.org/manual/core/security-scram-sha-1
&#34;&gt;&lt;code&gt;SCRAM-SHA-1&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To create a credential that will authenticate using the default
authentication mechanism regardless of server version, create a
credential using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createCredential-java.lang.String-java.lang.String-char:A-
&#34;&gt;&lt;code&gt;createCredential&lt;/code&gt;&lt;/a&gt;
static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user; // the user name
String database; // the name of the database in which the user is defined
char[] password; // the password as a character array
// ...
MongoCredential credential = MongoCredential.createCredential(user, database, password);
MongoClient mongoClient = new MongoClient(new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                                         Arrays.asList(credential));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a connection string without explicitly specifying the
authentication mechanism:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;quot;);
MongoClient mongoClient = new MongoClient(uri);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For challenge and response mechanisms, using the default authentication
mechanism is the recommended approach as the approach will make
upgrading from MongoDB 2.6 to MongoDB 3.0 seamless, even after
&lt;a href=&#34;http://docs.mongodb.org/manual/release-notes/3.0-scram/
&#34;&gt;upgrading the authentication schema&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;scram-sha-1&#34;&gt;SCRAM-SHA-1&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/security-scram-sha-1/
&#34;&gt;&lt;code&gt;SCRAM-SHA-1&lt;/code&gt;&lt;/a&gt;, use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createScramSha1Credential-java.lang.String-java.lang.String-char:A-
&#34;&gt;&lt;code&gt;createScramSha1Credential&lt;/code&gt;&lt;/a&gt; method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
String user; // the user name
String database; // the name of the database in which the user is defined
char[] password; // the password as a character array
// ...
MongoCredential credential = MongoCredential.createScramSha1Credential(user,
                                                                      database,
                                                                      password);
MongoClient mongoClient = new MongoClient(new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                                             Arrays.asList(credential));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a connection string  that explicitly specifies the
&lt;code&gt;authMechanism=SCRAM-SHA-1&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=SCRAM-SHA-1&amp;quot;);
MongoClient mongoClient = new MongoClient(uri);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mongodb-cr&#34;&gt;MONGODB-CR&lt;/h2&gt;

&lt;p&gt;To explicitly create a credential of type &lt;a href=&#34;http://docs.mongodb.org/manual/core/security-mongodb-cr
&#34;&gt;&lt;code&gt;MONGODB-CR&lt;/code&gt;&lt;/a&gt; use the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createMongoCRCredential-java.lang.String-java.lang.String-char:A-
&#34;&gt;&lt;code&gt;createMongCRCredential&lt;/code&gt;&lt;/a&gt;
static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user; // the user name
String database; // the name of the database in which the user is defined
char[] password; // the password as a character array
// ...
MongoCredential credential = MongoCredential.createMongoCRCredential(user,
                                                                    database,
                                                                    password);
MongoClient mongoClient = new MongoClient(new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                                         Arrays.asList(credential));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a connection string that explicitly specifies the
&lt;code&gt;authMechanism=MONGODB-CR&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;authMechanism=MONGODB-CR&amp;quot;);
MongoClient mongoClient = new MongoClient(uri);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;After the &lt;a href=&#34;http://docs.mongodb.org/manual/release-notes/3.0-scram/&#34;&gt;authentication schema upgrade&lt;/a&gt; from MONGODB-CR to SCRAM-SHA-1,
MONGODB-CR credentials will fail to authenticate.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;x-509&#34;&gt;X.509&lt;/h2&gt;

&lt;p&gt;With &lt;a href=&#34;http://docs.mongodb.org/manual/core/security-x.509
&#34;&gt;X.509&lt;/a&gt; mechanism, MongoDB uses the
X.509 certificate presented during SSL negotiation to
authenticate a user whose name is derived from the distinguished name
of the X.509 certificate.&lt;/p&gt;

&lt;p&gt;X.509 authentication requires the use of SSL connections with
certificate validation and is available in MongoDB 2.6 and later. To
create a credential of this type use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createMongoX509Credential-java.lang.String-
&#34;&gt;&lt;code&gt;createMongoX509Credential&lt;/code&gt;&lt;/a&gt; static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user;     // The X.509 certificate derived user name, e.g. &amp;quot;CN=user,OU=OrgUnit,O=myOrg,...&amp;quot;
// ...
MongoCredential credential = MongoCredential.createMongoX509Credential(user);
MongoClientOptions options = MongoClientOptions.builder().sslEnabled(true).build();


MongoClient mongoClient = new MongoClient(new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                                         Arrays.asList(credential), options);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a connection string that explicitly specifies the
&lt;code&gt;authMechanism=MONGODB-X509&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://subjectName@host1/?authMechanism=MONGODB-X509&amp;amp;ssl=true&amp;quot;);
MongoClient mongoClient = new MongoClient(uri);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the MongoDB server &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?tutorial/configure-x509-client-authentication/#add-x-509-certificate-subject-as-a-user.html
&#34;&gt;x.509 tutorial&lt;/a&gt;
for more information about determining the subject
name from the certificate.&lt;/p&gt;

&lt;h2 id=&#34;gssapi&#34;&gt;Kerberos (GSSAPI)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy
authentication through Kerberos service. To create a credential of type
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?core/authentication/#kerberos-authentication.html
&#34;&gt;Kerberos (GSSAPI)&lt;/a&gt;, use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createGSSAPICredential-java.lang.String-
&#34;&gt;&lt;code&gt;createGSSAPICredential&lt;/code&gt;&lt;/a&gt;
static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user;   // The Kerberos user name, including the realm, e.g. &amp;quot;user1@MYREALM.ME&amp;quot;
// ...
MongoCredential credential = MongoCredential.createGSSAPICredential(user);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a connection string that explicitly specifies the
&lt;code&gt;authMechanism=GSSAPI&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://username%40REALM.ME@host1/?authMechanism=GSSAPI&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;GSSAPI&lt;/code&gt; authentication mechanism instead
of &lt;code&gt;Kerberos&lt;/code&gt; because technically the driver authenticates via
the &lt;a href=&#34;https://tools.ietf.org/html/rfc4752&#34;&gt;&lt;code&gt;GSSAPI&lt;/code&gt;&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;To successfully authenticate via Kerberos, the application typically
must specify several system properties so that the underlying GSSAPI
Java libraries can acquire a Kerberos ticket:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;java.security.krb5.realm=MYREALM.ME
java.security.krb5.kdc=mykdc.myrealm.me
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ldap-plain&#34;&gt;LDAP (PLAIN)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.com/products/mongodb-enterprise&#34;&gt;MongoDB Enterprise&lt;/a&gt; supports proxy authentication through a Lightweight Directory Access Protocol (LDAP) service. To create a credential of type &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?core/authentication/#ldap-proxy-authority-authentication.html
&#34;&gt;LDAP&lt;/a&gt; use the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoCredential.html#createPlainCredential-java.lang.String-java.lang.String-char:A-
&#34;&gt;&lt;code&gt;createPlainCredential&lt;/code&gt;&lt;/a&gt; static factory method:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String user;          // The LDAP user name
char[] password;      // The LDAP password
// ...
MongoCredential credential = MongoCredential.createPlainCredential(user, &amp;quot;$external&amp;quot;, password);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or use a connection string that explicitly specifies the
&lt;code&gt;authMechanism=PLAIN&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://user1@host1/?authSource=$external&amp;amp;authMechanism=PLAIN&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;The method refers to the &lt;code&gt;plain&lt;/code&gt; authentication mechanism instead
of &lt;code&gt;LDAP&lt;/code&gt; because technically the driver authenticates via the
&lt;a href=&#34;https://www.ietf.org/rfc/rfc4616.txt&#34;&gt;&lt;code&gt;PLAIN&lt;/code&gt;&lt;/a&gt; SASL mechanism.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TLS/SSL</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/ssl/</link>
      <pubDate>Sun, 29 May 2016 22:05:03 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/ssl/</guid>
      <description>

&lt;h2 id=&#34;tls-ssl&#34;&gt;TLS/SSL&lt;/h2&gt;

&lt;p&gt;The Java driver supports TLS/SSL connections to MongoDB servers using
the underlying support for TLS/SSL provided by the JDK. You can
configure the driver to use TLS/SSL either with &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com.mongodb.MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt; or with
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com.mongodb.MongoClientOptions.html
&#34;&gt;&lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;specify-tls-ssl-via-mongoclienturi&#34;&gt;Specify TLS/SSL via &lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.MongoClientURI;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To specify TLS/SSL with &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com.mongodb.MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt;, specify &lt;code&gt;ssl=true&lt;/code&gt; as part of the connection
string, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://localhost/?ssl=true&amp;quot;);
MongoClient mongoClient = new MongoClient(uri);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;specify-tls-ssl-via-mongoclientoptions&#34;&gt;Specify TLS/SSL via &lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.MongoClientOptions;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To specify TLS/SSL with with &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com.mongodb.MongoClientOptions.html
&#34;&gt;&lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/a&gt;, set the &lt;code&gt;sslEnabled&lt;/code&gt; property to &lt;code&gt;true&lt;/code&gt;, as in:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt; MongoClientOptions options = MongoClientOptions.builder().sslEnabled(true).build();
 MongoClient client = new MongoClient(&amp;quot;localhost&amp;quot;, options);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;disable-hostname-verification&#34;&gt;Disable Hostname Verification&lt;/h2&gt;

&lt;p&gt;By default, the driver ensures that the hostname included in the
server&amp;rsquo;s SSL certificate(s) matches the hostname(s) provided when
constructing a &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt;. However, the hostname verification
requires a Java 7 JVM, as it relies on additions introduced in Java 7
to the &lt;code&gt;javax.net.SSLParameters&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;If your application must run on Java 6, or for some other reason you
need to disable hostname verification, you must explicitly indicate
this in &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com.mongodb.MongoClientOptions.html
&#34;&gt;&lt;code&gt;MongoClientOptions&lt;/code&gt;&lt;/a&gt; using the &lt;code&gt;sslInvalidHostNameAllowed&lt;/code&gt;
property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientOptions.builder().sslEnabled(true).sslInvalidHostNameAllowed(true).build();
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jvm-system-properties-for-tls-ssl&#34;&gt;JVM System Properties for TLS/SSL&lt;/h2&gt;

&lt;p&gt;A typical application will need to set several JVM system properties to
ensure that the client is able to validate the TLS/SSL certificate
presented by the server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;javax.net.ssl.trustStore&lt;/code&gt;:
  The path to a trust store containing the certificate of the
  signing authority&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;javax.net.ssl.trustStorePassword&lt;/code&gt;:
  The password to access this trust store&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The trust store is typically created with the
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;&lt;code&gt;keytool&lt;/code&gt;&lt;/a&gt;
command line program provided as part of the JDK. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;keytool -importcert -trustcacerts -file &amp;lt;path to certificate authority file&amp;gt;
            -keystore &amp;lt;path to trust store&amp;gt; -storepass &amp;lt;password&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A typical application will also need to set several JVM system
properties to ensure that the client presents an TLS/SSL certificate to the
MongoDB server:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;javax.net.ssl.keyStore&lt;/code&gt;
  The path to a key store containing the client&amp;rsquo;s TLS/SSL certificates&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;javax.net.ssl.keyStorePassword&lt;/code&gt;
  The password to access this key store&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The key store is typically created with the
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html&#34;&gt;&lt;code&gt;keytool&lt;/code&gt;&lt;/a&gt;
or the &lt;a href=&#34;https://www.openssl.org/docs/apps/openssl.html&#34;&gt;&lt;code&gt;openssl&lt;/code&gt;&lt;/a&gt;
command line program.&lt;/p&gt;

&lt;p&gt;For more information on configuring a Java application for TLS/SSL, please
refer to the &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/security/jsse/JSS
ERefGuide.html&#34;&gt;&lt;code&gt;JSSE Reference Guide&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connect to MongoDB</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/</link>
      <pubDate>Sun, 29 May 2016 13:26:13 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/</guid>
      <description>

&lt;h2 id=&#34;connect-to-mongodb&#34;&gt;Connect to MongoDB&lt;/h2&gt;

&lt;p&gt;Use &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt; to make a connection to a running MongoDB instance.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;The following examples are not meant to provide an exhaustive list
of ways to instantiate &lt;code&gt;MongoClient&lt;/code&gt;. For a complete list of the
MongoClient constructors, see
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html&#34;&gt;&lt;code&gt;MongoClient() API documentation&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Running MongoDB deployments to which to connect. For example, to connect to a standalone, you must have a running standalone.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The MongoDB Driver.  See &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/getting-started/installation/&#34;&gt;Installation&lt;/a&gt; for instructions on how to install the MongoDB driver.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The following import statements:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.mongodb.MongoClient;
import com.mongodb.MongoClientURI;
import com.mongodb.ServerAddress;
import com.mongodb.MongoCredential;
import com.mongodb.MongoClientOptions;


import java.util.Arrays;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mongoclient&#34;&gt;&lt;code&gt;MongoClient&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/MongoClient.html
&#34;&gt;&lt;code&gt;MongoClient()&lt;/code&gt;&lt;/a&gt; instance represents a pool of connections
to the database; you will only need one instance of class
&lt;code&gt;MongoClient&lt;/code&gt; even with multiple threads.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Typically you only create one &lt;code&gt;MongoClient&lt;/code&gt; instance for a given MongoDB deployment (e.g. standalone, replica set, or a sharded cluster) and use it across your application. However, if you do create multiple instances:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;All resource usage limits (e.g. max connections, etc.) apply per &lt;code&gt;MongoClient&lt;/code&gt; instance.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;To dispose of an instance, call &lt;code&gt;MongoClient.close()&lt;/code&gt; to clean up resources.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;connect-to-a-standalone-mongodb-instance&#34;&gt;Connect to a Standalone MongoDB Instance&lt;/h2&gt;

&lt;p&gt;To connect to a standalone MongoDB instance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can instantiate a &lt;code&gt;MongoClient&lt;/code&gt; object without any parameters to
connect to a MongoDB instance running on localhost on port &lt;code&gt;27017&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient();
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can explicitly specify the hostname to connect to a MongoDB
instance running on the specified host on port &lt;code&gt;27017&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient( &amp;quot;host1&amp;quot; );
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can explicitly specify the hostname and the port:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient( &amp;quot;host1&amp;quot; , 27017 );
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can specify the
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?/com/mongodb/MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt; connection string.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(new MongoClientURI(&amp;quot;mongodb://host1:27017&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-replica-set&#34;&gt;Connect to a Replica Set&lt;/h2&gt;

&lt;p&gt;To connect to a &lt;a href=&#34;http://docs.mongodb.org/manual/replication/
&#34;&gt;replica set&lt;/a&gt;, you must specify  one or more members to the
&lt;code&gt;MongoClient&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;admonition note&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;Note&lt;/h5&gt;
&lt;p&gt;MongoDB will auto-discover the primary and the secondaries.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can specify the members using the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?/com/mongodb/MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt; connection string:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To specify at least two members of the replica set:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(
    new MongoClientURI(&amp;quot;mongodb://host1:27017,host2:27017,host3:27017&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;With at least one member of the replica set and the &lt;code&gt;replicaSet&lt;/code&gt; option:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(
    new MongoClientURI(
      &amp;quot;mongodb://host1:27017,host2:27017,host3:27017/?replicaSet=myReplicaSet&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can specify a list of the all the replica set members&amp;rsquo; &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/ServerAddress.html
&#34;&gt;&lt;code&gt;ServerAddress&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(
Arrays.asList(new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
              new ServerAddress(&amp;quot;host2&amp;quot;, 27017),
              new ServerAddress(&amp;quot;host3&amp;quot;, 27017)));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connect-to-a-sharded-cluster&#34;&gt;Connect to a Sharded Cluster&lt;/h2&gt;

&lt;p&gt;To connect to a &lt;a href=&#34;http://docs.mongodb.org/manual/sharding/
&#34;&gt;sharded cluster&lt;/a&gt;, specify the &lt;code&gt;mongos&lt;/code&gt; instance
or instances to the &lt;code&gt;MongoClient&lt;/code&gt; constructor.&lt;/p&gt;

&lt;p&gt;To connect to a single &lt;code&gt;mongos&lt;/code&gt; instance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can specify the hostname and the port (or you can omit the
parameters if &lt;code&gt;mongos&lt;/code&gt; is running on &lt;code&gt;localhost&lt;/code&gt; and port
&lt;code&gt;27017&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient( &amp;quot;localhost&amp;quot; , 27017 );
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can specify the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?/com/mongodb/MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt; connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(new MongoClientURI(&amp;quot;mongodb://localhost:27017&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To connect to multiple &lt;code&gt;mongos&lt;/code&gt; instances:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You can specify the &lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?/com/mongodb/MongoClientURI.html
&#34;&gt;&lt;code&gt;MongoClientURI&lt;/code&gt;&lt;/a&gt; connection string with their hostnames and ports:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(
   new MongoClientURI(&amp;quot;mongodb://host1:27017,host2:27017&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You can specify a list of the &lt;code&gt;mongos&lt;/code&gt; instances&amp;rsquo;
&lt;a href=&#34;{{ &amp;lt;apiref &amp;quot;com/mongodb/ServerAddress.html&amp;quot;&amp;gt;}}&#34;&gt;&lt;code&gt;ServerAddress&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClient mongoClient = new MongoClient(
   Arrays.asList(new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                 new ServerAddress(&amp;quot;host2&amp;quot;, 27017)));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;connection-options&#34;&gt;Connection Options&lt;/h2&gt;

&lt;p&gt;You can specify the connection settings using either the
&lt;code&gt;MongoClientURI&lt;/code&gt; or &lt;code&gt;MongoClientOptions&lt;/code&gt; or both.&lt;/p&gt;

&lt;p&gt;For example, you can specify TLS/SSL and authentication setting in the
&lt;code&gt;MongoClientURI&lt;/code&gt; connection string:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;MongoClientURI uri = new MongoClientURI(&amp;quot;mongodb://user1:pwd1@host1/?authSource=db1&amp;amp;ssl=true&amp;quot;);
MongoClient mongoClient = new MongoClient(uri);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also use &lt;code&gt;MongoClientOptions&lt;/code&gt; to specify TLS/SSL and the
&lt;code&gt;MongoCredential&lt;/code&gt; for the authentication information:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
 String user; // the user name
 String database; // the name of the database in which the user is defined
 char[] password; // the password as a character array
 // ...

 MongoCredential credential = MongoCredential.createCredential(user, database, password);

 MongoClientOptions options = MongoClientOptions.builder().sslEnabled(true).build();

 MongoClient mongoClient = new MongoClient(new ServerAddress(&amp;quot;host1&amp;quot;, 27017),
                                           Arrays.asList(credential),
                                           options);
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/</link>
      <pubDate>Sun, 29 May 2016 12:49:33 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/</guid>
      <description>

&lt;h2 id=&#34;java-driver-tutorials&#34;&gt;Java Driver Tutorials&lt;/h2&gt;

&lt;p&gt;The tutorials in this section provide examples of some frequently used operations. This section is not meant to be an exhaustive list of all operations available in the Java driver.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/connect-to-mongodb/&#34;&gt;Connect to MongoDB&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/databases-collections/&#34;&gt;Databases and Collections&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/indexes/&#34;&gt;Create Indexes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/perform-read-operations/&#34;&gt;Perform Read Operations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/perform-write-operations/&#34;&gt;Perform Write Operations&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/aggregation/&#34;&gt;Aggregation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/text-search/&#34;&gt;Text Search&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/geospatial-search/&#34;&gt;Geospatial Search&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/gridfs/&#34;&gt;GridFS&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/driver/tutorials/commands/&#34;&gt;Run Commands&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bulk Writes</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/bulk-writes/</link>
      <pubDate>Sun, 29 May 2016 12:47:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/bulk-writes/</guid>
      <description>

&lt;h2 id=&#34;bulk-operations&#34;&gt;Bulk operations&lt;/h2&gt;

&lt;p&gt;Starting in version 2.6, MongoDB servers support bulk write commands for insert, update, and delete in a way that allows the driver to implement the correct semantics for BulkWriteResult and BulkWriteException.&lt;/p&gt;

&lt;p&gt;There are two types of bulk operations, ordered and unordered bulk operations.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ordered bulk operations execute all the operation in order and error out on the first write error.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Unordered bulk operations execute all the operations and report any the errors. Unordered bulk operations do not guarantee order of execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The following code provide examples using ordered and unordered
operations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// 1. Ordered bulk operation - order is guaranteed
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))));


 // 2. Unordered bulk operation - no guarantee of order of operation
collection.bulkWrite(
  Arrays.asList(new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 4)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 5)),
                new InsertOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 6)),
                new UpdateOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 1),
                                     new Document(&amp;quot;$set&amp;quot;, new Document(&amp;quot;x&amp;quot;, 2))),
                new DeleteOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 2)),
                new ReplaceOneModel&amp;lt;&amp;gt;(new Document(&amp;quot;_id&amp;quot;, 3),
                                      new Document(&amp;quot;_id&amp;quot;, 3).append(&amp;quot;x&amp;quot;, 4))),
  new BulkWriteOptions().ordered(false));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;div class=&#34;admonition important&#34;&gt;
&lt;h5 class=&#34;admonition-title&#34;&gt;important&lt;/h5&gt;
&lt;p&gt;Use of the bulkWrite methods is not recommended when connected to pre-2.6 MongoDB servers. Although these methods will work for pre-2.6 servers, performance will suffer as each write operation executes one at a time.&lt;/p&gt;

&lt;/div&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JNDI</title>
      <link>/mongo-java-driver/3.4/driver/tutorials/jndi/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/3.4/driver/tutorials/jndi/</guid>
      <description>

&lt;h2 id=&#34;java-naming-and-directory-interface-jndi&#34;&gt;Java Naming and Directory Interface (JNDI)&lt;/h2&gt;

&lt;p&gt;The driver includes a &lt;a href=&#34;http://docs.oracle.com/javase/8/docs/technotes/guides/jndi/index.html&#34;&gt;JNDI&lt;/a&gt; ObjectFactory implementation,
&lt;a href=&#34;/mongo-java-driver/3.4/mongo-java-driver/3.4/javadoc?com/mongodb/client/jndi/MongoClientFactory.html
&#34;&gt;&lt;code&gt;MongoClientFactory&lt;/code&gt;&lt;/a&gt;, that returns &lt;code&gt;MongoClient&lt;/code&gt; instances based on a
&lt;a href=&#34;http://docs.mongodb.org/manual/reference/connection-string/&#34;&gt;connection string&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;

&lt;p&gt;The configuration of the &lt;code&gt;MongoClientFactory&lt;/code&gt; differs depending on the application server. Below are examples of a few popular ones.&lt;/p&gt;

&lt;h3 id=&#34;wildfly-formerly-jboss&#34;&gt;Wildfly (formerly JBoss)&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;http://wildfly.org/&#34;&gt;Wildfly&lt;/a&gt; installation, create a new module for MongoDB at &lt;code&gt;modules/system/layers/base/org/mongodb/main&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Copy the mongo-java-driver jar file into the module.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add the following module.xml file into the module:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;module xmlns=&amp;quot;urn:jboss:module:1.3&amp;quot; name=&amp;quot;org.mongodb&amp;quot;&amp;gt;
   &amp;lt;resources&amp;gt;
       &amp;lt;resource-root path=&amp;quot;mongo-java-driver-3.4.3.jar&amp;quot;/&amp;gt;
   &amp;lt;/resources&amp;gt;
   &amp;lt;dependencies&amp;gt;
       &amp;lt;module name=&amp;quot;javax.api&amp;quot;/&amp;gt;
       &amp;lt;module name=&amp;quot;javax.transaction.api&amp;quot;/&amp;gt;
       &amp;lt;module name=&amp;quot;javax.servlet.api&amp;quot; optional=&amp;quot;true&amp;quot;/&amp;gt;
   &amp;lt;/dependencies&amp;gt;
&amp;lt;/module&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Add a binding to JBoss&amp;rsquo;s naming subsystem configuration that references the above module, the &lt;code&gt;MongoClientFactory&lt;/code&gt; class, and the
connection string for the MongoDB cluster.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;subsystem xmlns=&amp;quot;urn:jboss:domain:naming:2.0&amp;quot;&amp;gt;
    &amp;lt;bindings&amp;gt;
        &amp;lt;object-factory name=&amp;quot;java:global/MyMongoClient&amp;quot; module=&amp;quot;org.mongodb&amp;quot; class=&amp;quot;com.mongodb.client.jndi.MongoClientFactory&amp;quot;&amp;gt;
            &amp;lt;environment&amp;gt;
                &amp;lt;property name=&amp;quot;connectionString&amp;quot; value=&amp;quot;mongodb://localhost:27017&amp;quot;/&amp;gt;
            &amp;lt;/environment&amp;gt;
         &amp;lt;/object-factory&amp;gt;
    &amp;lt;/bindings&amp;gt;
    &amp;lt;remote-naming/&amp;gt;
&amp;lt;/subsystem&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A MongoClient instance will be accessible via the JNDI name &lt;code&gt;java:global/LocalMongoClient&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;tomcat&#34;&gt;Tomcat&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;In a &lt;a href=&#34;http://tomcat.apache.org/&#34;&gt;Tomcat&lt;/a&gt; installation, copy the mongo-java-driver jar file into the lib directory.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In context.xml of a web application, add a resource that references the &lt;code&gt;MongoClientFactory&lt;/code&gt; class, and the connection string for the
MongoDB cluster:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;Resource name=&amp;quot;mongodb/MyMongoClient&amp;quot;
          auth=&amp;quot;Container&amp;quot;
          type=&amp;quot;com.mongodb.MongoClient&amp;quot;
          closeMethod=&amp;quot;close&amp;quot;
          factory=&amp;quot;com.mongodb.client.jndi.MongoClientFactory&amp;quot;
          singleton=&amp;quot;true&amp;quot;
          connectionString=&amp;quot;mongodb://localhost&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;In web.xml of a web application, add a reference to the above resource:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;resource-ref&amp;gt;
    &amp;lt;res-ref-name&amp;gt;
        mongodb/MyMongoClient
    &amp;lt;/res-ref-name&amp;gt;
    &amp;lt;res-type&amp;gt;
        com.mongodb.MongoClient
    &amp;lt;/res-type&amp;gt;
    &amp;lt;res-auth&amp;gt;
        Container
    &amp;lt;/res-auth&amp;gt;
&amp;lt;/resource-ref&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A MongoClient instance will be accessible via the JNDI name &lt;code&gt;mongodb/MyMongoClient&lt;/code&gt; in the &lt;code&gt;java:comp/env&lt;/code&gt; context.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>